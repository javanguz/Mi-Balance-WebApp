
----- C:\Users\Javier\Desktop\finanzas-app\.vscode\settings.json -----
{
  "files.associations": {
    "*.ejs": "html"
  },
  "emmet.includeLanguages": {
    "ejs": "html"
  },
  "git.ignoreLimitWarning": true,

  "html.validate.scripts": false,
  "editor.selectionHighlight": false,
  "editor.selectionHighlightMaxLength": 300
}

----- C:\Users\Javier\Desktop\finanzas-app\app.js -----
// app.js

require('dotenv').config();
const crypto = require('crypto');
const express = require('express');
const path = require('path');
const session = require('express-session');
const bodyParser = require('body-parser');
const db = require('./db/database');
const cron = require('node-cron');
const fs = require('fs');
const localBackupHelper = require('./utils/localBackupHelper');

// ===============================================================
// INICIO DE LA MEJORA: Centralización de formateadores y rutas
// ===============================================================
const formatters = require('./utils/formatters');
const initializeRoutes = require('./routes');
// ===============================================================
// FIN DE LA MEJORA
// ===============================================================

const app = express();
const PORT = process.env.PORT || 3000;

app.locals.maintenanceMode = false;

// ===============================================================
// INICIO DE LA MEJORA: Lógica de formato de moneda unificada
// ===============================================================
// Todas las funciones de formato ahora están disponibles en `app.locals`
Object.assign(app.locals, formatters);
// ===============================================================
// FIN DE LA MEJORA
// ===============================================================


// ===============================================================
// LÓGICA Y MIDDLEWARE DE LICENCIA (REFACTORIZADO)
// ===============================================================
const SECRET_KEY = 'tu-clave-secreta-para-generar-licencias'; 

// Helper para generar la clave
function generateCorrectLicenseKey(username, cuit) {
    if (!username || !cuit) return null;
    return crypto.createHash('sha256').update(username + cuit + SECRET_KEY).digest('hex').substring(0, 32);
}

// Función que lee y valida la licencia. Devuelve un objeto con el estado.
function getLicenseState() {
    const LICENSE_FILE_PATH = path.resolve(__dirname, 'license.json');
    const defaultState = {
        username: 'Usuario sin licencia',
        cuit: 'N/A',
        isLicensed: false
    };

    if (!fs.existsSync(LICENSE_FILE_PATH)) {
        return defaultState;
    }
    try {
        const licenseData = JSON.parse(fs.readFileSync(LICENSE_FILE_PATH, 'utf-8'));
        const correctKey = generateCorrectLicenseKey(licenseData.username, licenseData.cuit);
        if (licenseData.activated && licenseData.key === correctKey && licenseData.cuit) {
            return {
                username: licenseData.username,
                cuit: licenseData.cuit,
                isLicensed: true
            };
        }
        return defaultState;
    } catch (error) {
        console.error("Error al leer o validar el archivo de licencia:", error);
        return defaultState;
    }
}

// Middleware para verificar el estado de la licencia en CADA petición
const checkLicenseStatus = (req, res, next) => {
    const licenseState = getLicenseState();
    // Inyecta el estado de la licencia en res.locals para que esté
    // disponible automáticamente en todas las plantillas EJS de esta petición.
    res.locals.isLicensed = licenseState.isLicensed;
    res.locals.username = licenseState.username;
    res.locals.cuit = licenseState.cuit;
    next();
};

// Middleware para proteger rutas que requieren una licencia activa
const requireLicense = (req, res, next) => {
    if (!res.locals.isLicensed) { // Usamos res.locals que es actualizado en cada request
        if (req.get('Content-Type') === 'application/json' || req.path.startsWith('/api/')) {
            return res.status(403).json({ success: false, message: 'Acción no permitida. Se requiere una licencia activa.' });
        }
        return res.status(403).send('<h1>Acción no permitida</h1><p>Se requiere una licencia activa para realizar esta operación.</p>');
    }
    next();
};

const isProduction = process.env.NODE_ENV === 'production';
if (isProduction) {
    app.set('trust proxy', 1);
}

// ===============================================================
// CONFIGURACIÓN DE SESIÓN
// ===============================================================
app.use(session({
    secret: 'un-secreto-muy-secreto-para-la-sesion',
    resave: false,
    saveUninitialized: false,
    rolling: true, 
    cookie: {
        secure: isProduction,
        httpOnly: true,
        sameSite: 'lax',
        maxAge: 24 * 60 * 60 * 1000 
    }
}));

// APLICAR EL MIDDLEWARE DE LICENCIA GLOBALMENTE
// Se ejecuta después de la sesión y antes de las rutas para que esté disponible en todos lados.
app.use(checkLicenseStatus);

// ===============================================================
// LÓGICA DE RESPALDOS AUTOMÁTICOS MEJORADA
// ===============================================================

const cronTasks = new Map();

function scheduleBackup(cronExpression) {
    if (cronTasks.has('localBackup')) {
        cronTasks.get('localBackup').stop();
        console.log('Tarea de respaldo anterior detenida.');
    }
    
    console.log(`Programando respaldo local con la expresión cron: "${cronExpression}"`);
    const task = cron.schedule(cronExpression, () => {
        console.log('Ejecutando respaldo local programado...');
        try {
            localBackupHelper.createBackup();
        } catch (error) {
            console.error('Falló el respaldo local programado:', error);
        }
    }, {
        scheduled: true,
        timezone: "America/Argentina/Buenos_Aires"
    });

    cronTasks.set('localBackup', task);
}

function setupAutomaticBackups() {
    const settings = localBackupHelper.getSettings();
    if (!settings.path) {
        console.log('No hay ruta de respaldos configurada. Se omiten los respaldos automáticos.');
        return;
    }
    
    if (settings.mode === 'manual' || settings.mode === 'startup') {
        if (cronTasks.has('localBackup')) {
            cronTasks.get('localBackup').stop();
            cronTasks.delete('localBackup');
            console.log('Tareas de respaldo cron detenidas por configuración manual/startup.');
        }
        console.log(`Modo de respaldo actual: "${settings.mode}". No se programan tareas cron.`);
        return;
    }

    const [hour, minute] = (settings.scheduleTime || '04:00').split(':');
    let cronExpression = '';

    switch (settings.mode) {
        case 'daily':
            cronExpression = `${minute} ${hour} * * *`;
            break;
        case 'weekdays':
            cronExpression = `${minute} ${hour} * * 1-5`;
            break;
        default:
            console.log(`Modo de respaldo "${settings.mode}" no reconocido. No se programan tareas.`);
            return;
    }
    
    scheduleBackup(cronExpression);
}

function runBackupOnStartup() {
    const settings = localBackupHelper.getSettings();
    if (settings.mode === 'startup' && settings.path) {
        console.log('Modo de respaldo "al iniciar". Ejecutando respaldo en 10 segundos...');
        setTimeout(() => {
            try {
                localBackupHelper.createBackup();
            } catch (error) {
                console.error('Falló el respaldo "al iniciar":', error);
            }
        }, 10000); 
    }
}

// ===============================================================
// CONFIGURACIÓN DE EXPRESS
// ===============================================================
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// ===============================================================
// MIDDLEWARE DE MODO DE MANTENIMIENTO
// ===============================================================
app.use((req, res, next) => {
    if (app.locals.maintenanceMode) {
        return res.status(503).send(`
            <html lang="es">
                <head><title>Mantenimiento</title></head>
                <body style="font-family: sans-serif; text-align: center; padding-top: 50px;">
                    <h1>Servidor en Mantenimiento</h1>
                    <p>La aplicación se está reiniciando debido a una operación de base de datos. Por favor, espere un momento y vuelva a intentarlo.</p>
                </body>
            </html>
        `);
    }
    next();
});

// ===============================================================
// MIDDLEWARE DE AUTENTICACIÓN
// ===============================================================
function requireLogin(req, res, next) {
    if (req.session.loggedin) {
        return next();
    }
    
    const isApiCall = req.get('Content-Type') === 'application/json';

    if (isApiCall) {
        return res.status(401).json({ success: false, message: 'Sesión expirada. Por favor, inicie sesión de nuevo.' });
    } else {
        return res.redirect('/login');
    }
}

// ===============================================================
// INICIO DE LA MEJORA: INICIALIZACIÓN DE RUTAS CENTRALIZADA
// ===============================================================
initializeRoutes(app, requireLogin, requireLicense);
// ===============================================================
// FIN DE LA MEJORA
// ===============================================================


// ===============================================================
// MANEJO DE ERRORES
// ===============================================================
function errorHandler(err, req, res, next) {
    console.error("ERROR DETECTADO:", err.stack);
    const statusCode = err.statusCode || 500;
    const errorResponse = {
        success: false,
        message: err.message || 'Ocurrió un error inesperado en el servidor.'
    };
    if (process.env.NODE_ENV !== 'production') {
        errorResponse.stack = err.stack;
    }
    res.status(statusCode).json(errorResponse);
}
app.use(errorHandler);

// ===============================================================
// INICIO DEL SERVIDOR
// ===============================================================
const server = app.listen(PORT, () => {
    console.log(`Servidor corriendo en el puerto ${PORT}`);
    setupAutomaticBackups();
    runBackupOnStartup();
});

// ===============================================================
// GESTIÓN DE CIERRE GRÁCIL
// ===============================================================
const connections = new Set();
server.on('connection', (connection) => {
    connections.add(connection);
    connection.on('close', () => {
        connections.delete(connection);
    });
});

app.set('server', server);
app.set('connections', connections);


----- C:\Users\Javier\Desktop\finanzas-app\config.json -----
{
  "APP_PIN": "1234",
  "PIN_HINT": ""
}

----- C:\Users\Javier\Desktop\finanzas-app\db\consultas.js -----
// db/consultas.js
const db = require('./database');

// Helper para ejecutar db.all como una promesa
const dbAllAsync = (sql, params = []) => new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => err ? reject(err) : resolve(rows));
});

// Helper para ejecutar db.get como una promesa
const dbGetAsync = (sql, params = []) => new Promise((resolve, reject) => {
    db.get(sql, params, (err, row) => err ? reject(err) : resolve(row));
});

// Helper para ejecutar db.run como una promesa
const dbRunAsync = (sql, params = []) => new Promise(function (resolve, reject) {
    db.run(sql, params, function (err) {
        if (err) reject(err);
        else resolve(this);
    });
});

// =============================================
// CONSULTAS PARA PANTALLA DE REGISTRO
// =============================================

// ===============================================================
// INICIO DE LA MEJORA: Consulta de movimientos refactorizada
// Se utiliza una Expresión de Tabla Común (CTE) para mejorar la
// legibilidad y eficiencia, evitando la repetición de código y
// optimizando las condiciones de búsqueda.
// ===============================================================
const getMovimientosPaginados = async (filtros) => {
    const { pagina = 1, porPagina = 10, tipo, busqueda, fechaDesde, fechaHasta } = filtros;
    const offset = (pagina - 1) * porPagina;

    // CTE para unificar los joins y la selección de datos base.
    const baseSql = `
        WITH movimientos_base AS (
            SELECT
                m.id, m.tipo, m.fecha, m.monto, m.descripcion, m.modalidad, m.entidad_id, m.entidad_tipo,
                COALESCE(c.nombre, p.nombre, 'General') as entidad_nombre,
                cat.nombre as categoria_nombre
            FROM movimientos m
            LEFT JOIN clientes c ON m.entidad_id = c.id AND m.entidad_tipo = 'cliente'
            LEFT JOIN proveedores p ON m.entidad_id = p.id AND m.entidad_tipo = 'proveedor'
            LEFT JOIN categorias cat ON m.categoria_id = cat.id
        )
    `;

    let whereClauses = [];
    const params = [];

    if (tipo && tipo !== 'todos') {
        whereClauses.push('tipo = ?');
        params.push(tipo);
    }

    if (busqueda) {
        const busquedaLike = `%${busqueda}%`;
        // Búsqueda más eficiente, incluyendo el campo entidad_id.
        whereClauses.push(`(
            entidad_nombre LIKE ? OR
            descripcion LIKE ? OR
            modalidad LIKE ? OR
            categoria_nombre LIKE ? OR
            entidad_id LIKE ?
        )`);
        params.push(busquedaLike, busquedaLike, busquedaLike, busquedaLike, busquedaLike);
    }

    if (fechaDesde && fechaHasta) {
        whereClauses.push('fecha BETWEEN ? AND ?');
        params.push(fechaDesde, fechaHasta);
    }

    const whereSql = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';

    // Consulta principal que utiliza el CTE para obtener los datos paginados.
    const sqlMovimientos = `
        ${baseSql}
        SELECT * FROM movimientos_base
        ${whereSql}
        ORDER BY fecha DESC, id DESC
        LIMIT ? OFFSET ?
    `;

    // Consulta de conteo que reutiliza el mismo CTE y filtros para máxima eficiencia.
    const sqlConteo = `
        ${baseSql}
        SELECT COUNT(id) as total FROM movimientos_base
        ${whereSql}
    `;

    const [movimientos, conteo] = await Promise.all([
        dbAllAsync(sqlMovimientos, [...params, porPagina, offset]),
        dbGetAsync(sqlConteo, params)
    ]);

    return {
        movimientos,
        total: conteo.total,
        pagina: parseInt(pagina, 10),
        totalPaginas: Math.ceil(conteo.total / porPagina)
    };
};
// ===============================================================
// FIN DE LA MEJORA
// ===============================================================


// ===============================================================
// INICIO DE LA CORRECCIÓN
// Se añade una columna 'tipo_display' para controlar el texto
// que se muestra en la interfaz, sin alterar el 'tipo' lógico
// que se usa para los cálculos.
// ===============================================================
const searchEntities = async (query) => {
    const likeQuery = `%${query}%`;
    const sql = `
        SELECT id, nombre, 'cliente' as tipo, 'Cliente' as tipo_display FROM clientes WHERE nombre LIKE ? OR id LIKE ?
        UNION ALL
        SELECT id, nombre, 'proveedor' as tipo, 'Proveedor' as tipo_display FROM proveedores WHERE nombre LIKE ? OR id LIKE ?
        UNION ALL
        SELECT id, nombre, 'categoria_' || tipo as tipo, 'Categoría' as tipo_display FROM categorias WHERE nombre LIKE ?
    `;
    const params = [likeQuery, likeQuery, likeQuery, likeQuery, likeQuery];
    const results = await dbAllAsync(sql, params);
    return results.sort((a, b) => a.nombre.localeCompare(b.nombre));
};
const getAllEntitiesForSearch = async () => {
    const sql = `
        SELECT id, nombre, 'cliente' as tipo, 'Cliente' as tipo_display FROM clientes
        UNION ALL
        SELECT id, nombre, 'proveedor' as tipo, 'Proveedor' as tipo_display FROM proveedores
        UNION ALL
        SELECT id, nombre, 'categoria_' || tipo as tipo, 'Categoría' as tipo_display FROM categorias
    `;
    const results = await dbAllAsync(sql);
    return results.sort((a, b) => a.nombre.localeCompare(b.nombre));
};
// ===============================================================
// FIN DE LA CORRECCIÓN
// ===============================================================


// ===============================================================
// INICIO DE LA MEJORA: Función de totales refactorizada
// Se reemplaza el bucle que ejecutaba múltiples consultas por una
// única consulta SQL. Esto mejora drásticamente el rendimiento al
// reducir la carga sobre la base de datos.
// ===============================================================
const getTotalsForEntities = async (startDate, endDate, entities) => {
    if (!entities || entities.length === 0) {
        return { total: 0 };
    }

    // Separa las entidades por tipo para construir la consulta dinámica
    const entityIds = {
        cliente: [],
        proveedor: [],
        categoria_cliente: [],
        categoria_proveedor: []
    };

    for (const entity of entities) {
        if (entityIds[entity.type]) {
            entityIds[entity.type].push(entity.id);
        }
    }

    const conditions = [];
    const params = [startDate, endDate];

    if (entityIds.cliente.length > 0) {
        conditions.push(`(m.entidad_tipo = 'cliente' AND m.entidad_id IN (${entityIds.cliente.map(() => '?').join(',')}))`);
        params.push(...entityIds.cliente);
    }

    if (entityIds.proveedor.length > 0) {
        conditions.push(`(m.entidad_tipo = 'proveedor' AND m.entidad_id IN (${entityIds.proveedor.map(() => '?').join(',')}))`);
        params.push(...entityIds.proveedor);
    }

    if (entityIds.categoria_cliente.length > 0) {
        conditions.push(`(m.categoria_id IN (${entityIds.categoria_cliente.map(() => '?').join(',')}) AND m.tipo = 'ingreso')`);
        params.push(...entityIds.categoria_cliente);
    }
    
    if (entityIds.categoria_proveedor.length > 0) {
        conditions.push(`(m.categoria_id IN (${entityIds.categoria_proveedor.map(() => '?').join(',')}) AND m.tipo = 'egreso')`);
        params.push(...entityIds.categoria_proveedor);
    }

    if (conditions.length === 0) {
        return { total: 0 };
    }

    // Consulta única que calcula el balance total (ingresos - egresos) para todas las entidades seleccionadas.
    const sql = `
        SELECT SUM(CASE WHEN m.tipo = 'ingreso' THEN m.monto ELSE -m.monto END) as total
        FROM movimientos m
        WHERE m.fecha BETWEEN ? AND ?
        AND (${conditions.join(' OR ')})
    `;

    const result = await dbGetAsync(sql, params);

    return { total: result?.total || 0 };
};
// ===============================================================
// FIN DE LA MEJORA
// ===============================================================


// =============================================
// CONSULTAS GENERALES (Refactorizadas)
// =============================================
const getCategoriasPorTipo = (tipo) => dbAllAsync("SELECT * FROM categorias WHERE tipo = ? ORDER BY id", [tipo]);
const getModalidades = () => dbAllAsync("SELECT id, nombre, es_editable FROM modalidades ORDER BY id");
const getClientePorId = (id) => dbGetAsync("SELECT * FROM clientes WHERE id = ?", [id]);
const getProveedorPorId = (id) => dbGetAsync("SELECT * FROM proveedores WHERE id = ?", [id]);
const getMovimientoPorId = (id) => dbGetAsync("SELECT * FROM movimientos WHERE id = ?", [id]);
const eliminarMovimientoPorId = (id) => dbRunAsync('DELETE FROM movimientos WHERE id = ?', [id]);
const getCategorias = () => dbAllAsync("SELECT id, nombre, tipo FROM categorias ORDER BY tipo, nombre");
const getModalidadesUnicas = () => dbAllAsync("SELECT DISTINCT modalidad FROM movimientos ORDER BY modalidad");
const getClientes = () => dbAllAsync("SELECT id, nombre FROM clientes ORDER BY nombre ASC");
const getProveedores = () => dbAllAsync("SELECT id, nombre FROM proveedores ORDER BY nombre ASC");

module.exports = {
    dbAllAsync,
    dbGetAsync,
    dbRunAsync,
    getMovimientosPaginados,
    searchEntities,
    getAllEntitiesForSearch,
    getTotalsForEntities,
    getCategoriasPorTipo,
    getModalidades,
    getClientePorId,
    getProveedorPorId,
    getMovimientoPorId,
    eliminarMovimientoPorId,
    getCategorias,
    getModalidadesUnicas,
    getClientes,
    getProveedores
};


----- C:\Users\Javier\Desktop\finanzas-app\db\database.js -----
// =================================================================
// db/database.js - Configuración e inicialización de la base de datos SQLite
// =================================================================

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.resolve(__dirname, 'financiero.sqlite');

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error("Error al abrir la base de datos", err.message);
    } else {
        console.log("Conectado a la base de datos SQLite.");
        db.serialize(() => {
            // Habilitar claves foráneas
            db.run("PRAGMA foreign_keys = ON;");

   
             // --- Creación de Tablas (si no existen) ---
            db.run(`CREATE TABLE IF NOT EXISTS categorias (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL,
                tipo TEXT NOT NULL CHECK(tipo IN ('cliente', 'proveedor')),
   
                 es_editable INTEGER DEFAULT 1 NOT NULL,
                UNIQUE(nombre, tipo)
            )`);

            db.run(`CREATE TABLE IF NOT EXISTS modalidades (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
               
                 nombre TEXT NOT NULL UNIQUE,
                es_editable INTEGER DEFAULT 1 NOT NULL
            )`);

            db.run(`CREATE TABLE IF NOT EXISTS clientes (
                id INTEGER PRIMARY KEY,
                nombre TEXT NOT NULL,
      
                  cuit TEXT,
                telefono TEXT,
                email TEXT,
                observaciones TEXT,
                categoria_id INTEGER,
                FOREIGN KEY (categoria_id) REFERENCES categorias(id) 
 ON DELETE SET NULL
            )`);
 db.run(`CREATE TABLE IF NOT EXISTS proveedores (
                id INTEGER PRIMARY KEY,
                nombre TEXT NOT NULL,
                cuit TEXT,
                telefono TEXT,
                email TEXT,
     
                 observaciones TEXT,
                categoria_id INTEGER,
                FOREIGN KEY (categoria_id) REFERENCES categorias(id) ON DELETE SET NULL
            )`);
 db.run(`CREATE TABLE IF NOT EXISTS movimientos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                descripcion TEXT,
                monto REAL NOT NULL,
                tipo TEXT NOT NULL CHECK(tipo IN ('ingreso', 'egreso')),
               
                 fecha TEXT NOT NULL,
                modalidad TEXT NOT NULL,
                entidad_id INTEGER,
                entidad_tipo TEXT CHECK(entidad_tipo IN ('cliente', 'proveedor')),
                categoria_id INTEGER,
                FOREIGN KEY (categoria_id) REFERENCES categorias(id) ON 
 DELETE SET NULL
            )`);
 // Se crean índices únicos para la columna 'cuit' en ambas tablas.
 // Esto fuerza a la base de datos a no permitir valores duplicados.
 // El comando "IF NOT EXISTS" asegura que esto solo se ejecute una vez.
 // Si ya existen duplicados en tus datos, esto fallará y verás un
            // error en la consola al iniciar la app, lo cual es esperado.
 console.log("Verificando restricciones de unicidad en CUIT/DNI...");
            db.run(`CREATE UNIQUE INDEX IF NOT EXISTS idx_clientes_cuit ON clientes(cuit)`, (err) => {
                if (err) {
                    console.error("Error al crear índice único para clientes. Posiblemente existen CUITs duplicados que debe corregir manualmente.", err.message);
                } else {
            
                     console.log("Restricción de CUIT único para clientes asegurada.");
                }
            });
 db.run(`CREATE UNIQUE INDEX IF NOT EXISTS idx_proveedores_cuit ON proveedores(cuit)`, (err) => {
                if (err) {
                    console.error("Error al crear índice único para proveedores. Posiblemente existen CUITs duplicados que debe corregir manualmente.", err.message);
                } else {
                  
                   console.log("Restricción de CUIT único para proveedores asegurada.");
                }
            });

            // --- CORRECCIÓN: Se actualizan los nombres de las categorías por defecto si existen ---
            console.log("Actualizando nombres de categorías por defecto...");
            db.run("UPDATE categorias SET nombre = 'Ingresos sin categoría' WHERE nombre = 'Sin categorizar' AND tipo = 'cliente'");
            db.run("UPDATE categorias SET nombre = 'Egresos sin categoría' WHERE nombre = 'Sin categorizar' AND tipo = 'proveedor'");

             // --- Sembrado de datos por defecto ---
            const seedCategories = () => {
                const stmt = db.prepare("INSERT OR IGNORE INTO categorias (nombre, tipo, es_editable) VALUES (?, ?, ?)");
                stmt.run('Ingresos sin categoría', 'cliente', 0);
                stmt.run('Egresos sin categoría', 'proveedor', 0);
                const clienteCats = ["Ventas web", "Ventas mostrador", "Servicios"];
 clienteCats.forEach(cat => stmt.run(cat, 'cliente', 1));
                const proveedorCats = ["Agua, luz y gas", "Sueldos y cs. soc.", "Comestibles", "Gastos varios", "Impuestos", "Alquileres"];
 proveedorCats.forEach(cat => stmt.run(cat, 'proveedor', 1));
                stmt.finalize((err) => {
                    if (!err) console.log("Categorías por defecto verificadas/sembradas.");
                });
 };

            const seedModalidades = () => {
                const stmt = db.prepare("INSERT OR IGNORE INTO modalidades (nombre, es_editable) VALUES (?, ?)");
 stmt.run('Efectivo', 0);
                const editableModalidades = ['Transferencia', 'Billetera Vitual', 'Tarjeta C/D'];
                editableModalidades.forEach(mod => stmt.run(mod, 1));
 stmt.finalize((err) => {
                    if (!err) {
                        console.log("Modalidades por defecto verificadas/sembradas.");
                        db.run("UPDATE modalidades SET es_editable = 1 WHERE nombre IN ('Transferencia', 'Billetera/Qr', 'Tarjeta')");
              
           }
                });
 };
            
            seedCategories();
            seedModalidades();
        });
    }
});

module.exports = db;

----- C:\Users\Javier\Desktop\finanzas-app\generate-license.js -----
const crypto = require('crypto');

// IMPORTANTE: Esta clave debe ser EXACTAMENTE la misma que está en su archivo routes/settings.js
const SECRET_KEY = 'tu-clave-secreta-para-generar-licencias';

/**
 * Genera una clave de licencia basada en el nombre de usuario y CUIT.
 * @param {string} username - El nombre de usuario para la licencia.
 * @param {string} cuit - El CUIT del usuario para la licencia.
 * @returns {string|null} La clave de licencia generada o null si faltan datos.
 */
function generateCorrectLicenseKey(username, cuit) {
    if (!username || !cuit) return null;
    // La lógica de hashing es idéntica a la de su aplicación para garantizar la compatibilidad.
    return crypto.createHash('sha256').update(username + cuit + SECRET_KEY).digest('hex').substring(0, 32);
}

// --- INSTRUCCIONES DE USO ---
// 1. Guarde este archivo como 'generate-license.js' en la raíz de su proyecto.
// 2. Abra una terminal en la carpeta del proyecto.
// 3. Ejecute el script con el siguiente comando:
//    node generate-license.js "<Nombre de Usuario>" "<CUIT>"
//
// --- EJEMPLOS ---
// node generate-license.js "Javier Guzman" "20123456789"
// node generate-license.js "Usuario de Prueba" "30987654321"
//
// Nota: Si el nombre de usuario contiene espacios, asegúrese de ponerlo entre comillas.

// Obtener los argumentos de la línea de comandos
const username = process.argv[2];
const cuit = process.argv[3];

// Validar que se hayan proporcionado los argumentos necesarios
if (!username || !cuit) {
    console.error("\n\x1b[31mError: Faltan argumentos.\x1b[0m"); // Rojo
    console.log("\nUso: \x1b[36mnode generate-license.js \"<Nombre de Usuario>\" \"<CUIT>\"\x1b[0m"); // Cyan
    console.log("Ejemplo: \x1b[32mnode generate-license.js \"Javier Guzman\" \"20123456789\"\x1b[0m\n"); // Verde
    process.exit(1); // Salir con un código de error
}

// Generar y mostrar la licencia
const licenseKey = generateCorrectLicenseKey(username, cuit);

if (licenseKey) {
    console.log("\n\x1b[1m\x1b[32m-----------------------------------------\x1b[0m");
    console.log("\x1b[1m\x1b[32m  Clave de Licencia Generada con Éxito \x1b[0m");
    console.log("\x1b[1m\x1b[32m-----------------------------------------\x1b[0m");
    console.log(`\x1b[1m${licenseKey}\x1b[0m`);
    console.log("-----------------------------------------");
    console.log(`\x1b[34mPara el usuario:\x1b[0m      ${username}`);
    console.log(`\x1b[34mPara el CUIT:\x1b[0m         ${cuit}\n`);
} else {
    console.error("No se pudo generar la clave de licencia.");
}


----- C:\Users\Javier\Desktop\finanzas-app\last_local_backup_date.json -----
{"lastBackup":1753884965210}

----- C:\Users\Javier\Desktop\finanzas-app\license.json -----
{
  "activated": true,
  "key": "eb01369e9de6d560d35178e5ac50b7dd",
  "username": "Demo",
  "cuit": "20999999990"
}

----- C:\Users\Javier\Desktop\finanzas-app\local_backup_settings.json -----
{
  "path": "D:\\TEMP",
  "mode": "daily",
  "scheduleTime": "12:00",
  "retentionCount": 10
}

----- C:\Users\Javier\Desktop\finanzas-app\nodemon.json -----
{
  "ignore": [
    "local_backup_settings.json",
    "last_local_backup_date.json",
    "license.json"
  ]
}

----- C:\Users\Javier\Desktop\finanzas-app\package.json -----
{
  "name": "gestion-financiera-simple",
  "version": "1.0.0",
  "description": "Una aplicación web simple para gestión financiera.",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js",
    "seed": "node db/seed.js"
  },
  "keywords": [
    "nodejs",
    "express",
    "ejs",
    "sqlite",
    "bootstrap"
  ],
  "author": "Tu Nombre",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.20.2",
    "date-fns": "^4.1.0",
    "dotenv": "^17.2.1",
    "ejs": "^3.1.10",
    "express": "^4.19.2",
    "express-session": "^1.18.0",
    "multer": "^1.4.5-lts.1",
    "node-cron": "^4.2.1",
    "pdfkit": "^0.15.0",
    "sqlite3": "^5.1.7",
    "xlsx": "^0.18.5"
  },
  "devDependencies": {
    "@faker-js/faker": "^8.4.1",
    "nodemon": "^3.1.0"
  }
}


----- C:\Users\Javier\Desktop\finanzas-app\public\css\regrep.css -----
/* ================ */
/* ESTILOS COMUNES  */
/* ================ */ 

.btn-group-toggle-colors .btn {
    transition: all 0.2s ease;
}
/* Estilo para el botón "Todos" cuando está activo */
.btn-group-toggle-colors .btn-todos.active {
    background-color: var(--secondary-color);
    color: white;
    border-color: var(--secondary-color);
}
/* Estilo para el botón "Ingresos" cuando está activo */
.btn-group-toggle-colors .btn-ingreso.active {
    background-color: var(--ingresos-soft-color);
    color: white;
    border-color: var(--ingresos-soft-color);
}
/* Estilo para el botón "Egresos" cuando está activo */
.btn-group-toggle-colors .btn-egreso.active {
    background-color: var(--egresos-soft-color);
    color: white;
    border-color: var(--egresos-soft-color);
}


/* =============================================================== */
/* ESTILOS PARA LA PANTALLA DE REGISTRO                            */
/* =============================================================== */

.table thead.registro-header th {
    background-color: var(--registro-color);
    color: white;
    font-size: 0.85rem;
    font-weight: 500;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

/* Altura de las filas en la grilla de la pantalla de registro */
#registro-filtros-form + .table-responsive .table tbody td {
    padding-top: 0.15rem;
    padding-bottom: 0.15rem;
    font-size: 0.9rem; /* Opcional: reduce el tamaño del texto */
    color: var(--on-surface-variant-color)
}

/* --- Estilos para la Paginación --- */
.pagination .page-link {
    color: var(--on-secondary-container-color); /* Color de los enlaces normales */
    border-radius: 0.25rem; /* Bordes redondeados para todos */
    border: 1px solid var(--border-color);
    display: flex;           /* Habilita flexbox para centrar */
    justify-content: center; /* Centra el número horizontalmente */
    align-items: center;     /* Centra el número verticalmente */
    padding: 0.50rem;              /* Elimina el padding para un centrado perfecto */
}

.pagination .page-link:hover {
    background-color: var(--primary-container-color);
}

.pagination .page-item.active .page-link {
    background-color: var(--registro-color);
    color: white;
    font-weight: 600;
    box-shadow: var(--shadow-sm);
}

.pagination .page-item.disabled .page-link {
    color: #adb5bd;
    background-color: var(--bg-color);
}


/* ESTILOS PERSONALIZADOS PARA DATERANGEPICKER                     */

/* --- Contenedor principal del calendario --- */
.daterangepicker {
    font-family: var(--font-family-base) !important;
    border-radius: var(--border-radius);
    border-color: var(--border-color);
    background-color: var(--bg-color) !important;
    box-shadow: var(--shadow-md);
    padding: 1rem;
}

/* --- Botones "Aplicar" y "Limpiar" --- */
.daterangepicker .applyBtn,
.daterangepicker .cancelBtn {
    font-weight: 500 !important;
    padding: 0.5rem 1.5rem !important;
}

.daterangepicker .applyBtn {
    background-color: var(--primary-color) !important;
    border-color: var(--primary-color) !important;
}

.daterangepicker .cancelBtn {
    background-color: transparent !important;
    color: var(--on-surface-variant-color) !important;
    border-color: var(--secondary-color) !important;
}

.daterangepicker .cancelBtn:hover {
    background-color: var(--bg-color) !important;
    color: var(--on-surface-color) !important;
}


/* --- Estilo para los días del calendario --- */
.daterangepicker td {
    font-size: 0.9rem !important; /* Aumenta el tamaño de los números de los días */
    font-weight: 400 !important; /* Hace la fuente un poco más gruesa */
    background-color: var(--bg-color);
}

/* Estilo para todos los días dentro del rango */
.daterangepicker td.in-range {
    background-color: var(--primary-container-color) !important;
}

/* Fecha inicial */
.daterangepicker td.start-date {
    background-color: var(--on-primary-container-color) !important;
    color: #fff !important;
    border-right: 50px !important;
}

/* Fecha final */
.daterangepicker td.end-date {
    background-color: var(--on-primary-container-color) !important;
    color: #fff !important;
    border-left: 50px !important;
}

/* -- hover sobre los dias --*/
.daterangepicker td.available:hover {
    background-color: #efe9eb !important;
    border-radius: var(--border-radius) !important;
}

/* -- detalle del periodo seleccionado --*/
.daterangepicker .drp-selected {
    font-size: 0.9rem !important;
    font-weight: 600 !important;
    color: var(--on-primary-container-color) !important;
    padding: 6px 12px !important;
    vertical-align: middle !important;
}

/* --- Rangos predefinidos (Hoy, Ayer, etc.) --- */

.daterangepicker .ranges {
    flex-shrink: 0 !important; /* Evita que esta columna se comprima */
    margin-right: 1rem !important; /* Añade un espacio de separación con los calendarios */
}
.daterangepicker .ranges li {
    font-size: 0.95rem !important;
    padding: 0.75rem 1rem !important;
    background-color: var(--bg-color) !important;
    white-space: nowrap !important;
    min-width: 150px !important;
}

.daterangepicker .ranges li:hover {
    background-color: var(--primary-container-color) !important;
    color: var(--primary-color);
}

.daterangepicker .ranges li.active {
    background-color: var(--on-primary-container-color) !important;
    border-color: var(--on-primary-container-color) !important;
}



/* =============================================================== */
/* ESTILOS PARA LA PANTALLA DE REPORTES                            */
/* =============================================================== */
.report-container {
    /* Se cambia la fuente a Open Sans como fue solicitado */
    font-family: 'Open Sans', sans-serif !important;
    background-color: var(--surface-color); /* Asegura el fondo blanco */
    padding: 1.5rem; /* Añade espaciado interno para mejor estética */
    border-radius: var(--border-radius); /* Mantiene los bordes redondeados consistentes */
}

.report-results-card {
    width: fit-content; /* Adapta el ancho de la tarjeta a su contenido (la tabla) */
    max-width: 100%; /* Asegura que no se desborde en pantallas pequeñas */
}

.report-header {
    border: 1px solid var(--border-color);
    padding: 1.5rem;
    border-radius: var(--border-radius);
}
.report-title {
    margin-bottom: 1rem;
    font-weight: bold;
}
.report-header ul li {
    margin-bottom: 0.5rem;
}
.report-table th {
    font-weight: bold;
    border-bottom: 1px solid var(--on-surface-color) !important;
}
.report-table tfoot {
    border-top: 1px solid var(--on-surface-color) !important;
}
/* Quitamos los bordes por defecto de las celdas */
.report-table tbody td {
    border: none;
}
/* Agregamos un borde superior a cada fila de movimiento (pero no a las de comentario) */
.report-table tbody tr:not(.comment-row) {
    border-top: 1px solid var(--border-color);
}

.report-table tbody tr:nth-child(odd):not(.comment-row) td {
    background-color: var(--bg-color) !important; /* Fondo gris claro SOLO para filas impares */
}

.comment-row td {
    border-top: none;
    font-size: 0.85em;
}


.ts-wrapper.has-items .ts-control > input::placeholder {
    color: transparent; /* Oculta el placeholder cuando hay items deleccionados en el filtro */
}

/*-- Listas desplegables con filtros (TomSelect) --*/

.ts-dropdown .option.active {
    background-color: var(--primary-container-color);
    color: var(--primary-color);
}

/* Cuando el switch está desactivado: estilo de las leyendas */
.form-check.form-switch .form-check-label {
    color: var(--on-secondary-container-color); /* un gris o color más suave */
    font-size: 0.9rem; /* un poco más chico */
    opacity: 1;
}

/* Cuando el switch está activado: estilo de las leyendas */
.form-check.form-switch .form-check-input:checked ~ .form-check-label {
    color: var(--on-surface-color); /* mismo color que el texto normal */
    font-size: 1rem; /* tamaño normal */
    opacity: 1;
}

/* Estilo personalizado para los badges de filtros en el reporte */
.report-header .badge.bg-secondary {
    background-color: #dbdbe2 !important;
    color: black !important;
    font-weight: 500;
    font-size: 0.8rem;
}

/** ESTILOS PARA LA TABLA DE REPORTES DETALLADA (SIN RESUMEN) **/
.report-table-detailed {
    table-layout: fixed;
}
.report-table-detailed th,
.report-table-detailed tbody td {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
.report-table-detailed th:nth-child(5),
.report-table-detailed tr:not(.comment-row) td:nth-child(5) {
    overflow: visible;
}
.report-table-detailed th:nth-child(1) { width: 100px; } /* Fecha */
.report-table-detailed th:nth-child(2) { width: 200px; } /* Entidad */
.report-table-detailed th:nth-child(3) { width: 200px; } /* Categoría */
.report-table-detailed th:nth-child(4) { width: 120px; } /* Modalidad */
.report-table-detailed th:nth-child(5) { width: 150px; } /* Importe */

/** NUEVOS ESTILOS PARA REPORTES CON RESUMEN **/
/* --- Estilos Generales para Tablas de Resumen --- */
.summary-table-single,
.summary-table-all {
    table-layout: auto !important;
    width: 100%;
}

/* 1. La columna de concepto (la primera celda) se adapta al contenido con un máximo. */
.summary-table td:first-child,
.summary-table th:first-child {
    max-width: 400px;
    width: 1%; /* Truco para que la columna se encoja al mínimo necesario. */
    white-space: nowrap;
}

/* 2. El texto DENTRO de la celda de concepto se corta si es muy largo. */
.summary-table td:first-child .concept-label {
    display: block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


/* --- Estilos Específicos para Columnas de Importe --- */

/* Para reporte de TIPO ÚNICO (2 Columnas): la columna de importe ocupa el resto. */
.summary-table-single td:last-child,
.summary-table-single th:last-child {
    width: 99%;
}

/* Para reporte de TODOS los tipos (4 Columnas): las 3 columnas de importe tienen un ancho mínimo. */
.summary-table-all .amount-col-narrow {
    min-width: 100px; /* Se puede ajustar si es necesario */
    text-align: right;
}

/* Tamaños de fuente por nivel */
.summary-table .level-1 td { font-size: 1rem; }
.summary-table .level-2 td { font-size: 0.95rem; }
.summary-table .level-3 td { font-size: 0.90rem; }

/* Sangría izquierda para conceptos */
.summary-table .level-2 .concept-label { padding-left: 2.5rem; }
.summary-table .level-3 .concept-label { padding-left: 5rem; }

/* --- Sangría derecha para importes (Reporte de tipo único) --- */

/* Caso 1: SIN sangría cuando solo hay un nivel */
.summary-table-single.has-one-level .level-1 .amount-cell { padding-right: 0; }

/* Caso 2: Con sangría cuando hay dos niveles */
.summary-table-single.has-two-levels .level-1 .amount-cell { padding-right: 2.5rem; }

/* Caso 3: Con sangría escalonada cuando hay tres niveles */
.summary-table-single.has-three-levels .level-1 .amount-cell { padding-right: 5rem; }
.summary-table-single.has-three-levels .level-2 .amount-cell { padding-right: 2.5rem; }

/* Sangría derecha para importes (Reporte de todos los tipos) */
.summary-table-all .level-1 .amount-cell { padding-right: 2.5rem; }

/* Quitar sangría en reportes 'Todos' de un solo nivel */
.summary-table-all.has-one-level .level-1 .amount-cell { padding-right: 0; }

/* Borde sutil para agrupar visualmente los conceptos de primer nivel */
/* 1. Estilo remarcado para el 1er nivel CUANDO hay 2 o 3 niveles */
.summary-table.has-two-levels tr.level-1,
.summary-table.has-three-levels tr.level-1 {
    border-top: 1px solid #807a7d !important;
    font-weight: 600 !important;
}

/* 2. Estilo diferente (más sutil) para el 1er nivel CUANDO solo hay 1 nivel */
.summary-table.has-one-level tr.level-1 {
    border-top: 1px solid var(--border-color); /* Color de borde por defecto */
}

/* Estilo remarcado para el 2do nivel CUANDO hay 3 niveles */
.summary-table.has-three-levels tr.level-2 {
    font-weight: 500 !important;
}


.summary-table tfoot tr.level-1 {
    border-top: 1px solid var(--on-surface-color) !important;
}


.report-header .badge.filter-badge {
    white-space: normal; /* Permite que el texto pase a la siguiente línea */
    text-align: left; /* Alinea el texto a la izquierda si hay varias líneas */
    word-break: break-all; /* Fuerza el corte de palabras largas para que no se desborde */
    max-width: 100%; /* Asegura que el badge no sea más ancho que su contenedor */
}

----- C:\Users\Javier\Desktop\finanzas-app\public\css\style.css -----
/* --- Importar Fuente --- */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');
/* Se agrega la fuente Open Sans para los reportes */
@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700&display=swap');

/* --- Sistema de Diseño (Design System) --- */
:root {
    --font-family-base: 'Poppins', sans-serif;
    --bg-color: #fbfcfc;
    --surface-color: #ffffff;
    --on-surface-color: #1c1c1e;
    --on-surface-variant-color: #636366;
    --primary-color: #2060DF    ;
    --primary-container-color: #dfeeff;
    --on-primary-container-color: #005ecb;
    --secondary-color: #5D6B89;
    --on-secondary-container-color: #48536b;
    --success-color: #4ea72e !important;
    --success-container-color: #e4f7f1;
    --danger-color: #e64949;
    --danger-container-color: #fde2e4;
    --border-color: #e5e5ea;
    --ingresos-color: #4EA72E;
    --egresos-color: #ce3838;
    --registro-color: #0070C0;
    --reportes-color: #e79333;
    --ingresos-soft-color: #5da043;
    --egresos-soft-color: #df655c;
    --registro-soft-color: #267dbb;
    --shadow-sm: 0 1px 2px rgba(0,0,0,0.04);
    --shadow-md: 0 4px 6px rgba(0,0,0,0.08);
    --border-radius: 0.25rem;
    --bs-tooltip-bg: rgba(0, 0, 0, 0.90);
    --bs-tooltip-color: #ffffff;
    --bs-tooltip-opacity: 1; /* Asegura que no sea transparente por defecto */
}

/* --- Estilos Base --- */
body {
    font-family: var(--font-family-base);
    background-color: var(--bg-color);
    color: var(--on-surface-color);
    padding-top: 80px;
    padding-bottom: 80px; /* Espacio para la barra inferior en móvil */
}

body.tablero-page-bg {
    background-color: #f5f5f5;
}

body.venta-page-bg {
    background-color: #eafaf1;
}

body.pago-page-bg {
    background-color: #fdecec;
}

body.registro-page-bg {
    background-color: #ecf5fd;
}

body.venta-page-bg .form-label {
    color: var(--ingresos-color);
}
body.pago-page-bg .form-label {
    color: var(--egresos-color);
}
body.reportes-page-bg .form-label {
    color: var(--reportes-color);
}

body.reportes-page-bg {
    background-color: #fff7f0;
}

.main-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
}


/* =============================================================== */
/* TITULOS DE CADA PÁGINA                           */
/* =============================================================== */

/* Estilos generales para el contenedor del título */
.page-title {
  display: flex;
}

/* Estilos comunes para todos los badges dentro de .page-title */
.page-title .badge {
  font-size: 0.7em;
  font-weight: 400;
  color: white;
  padding: 0.6em;
  border-radius: 50px;
  display: inline-flex;
  align-items: center;
}

/* Estilos de color específicos para cada tipo de badge */
.page-title .title-ingresos.badge {
  background-color: var(--ingresos-color);
}
.page-title .title-egresos.badge {
  background-color: var(--egresos-color);
}
.page-title .title-registro.badge {
  background-color: var(--registro-color);
}
.page-title .title-reportes.badge {
  background-color: var(--reportes-color);
}

/* Estilos para todos los íconos dentro de los badges */
.page-title .badge i {
  transform: scale(1.50);
  margin: 0.05em 0.8em 0 0.3em; /* top | right | bottom | left */
}


/* =============================================================== */
/* CONTENEDOR FLEXIBLE PARA VENTA Y PAGO                           */
/* =============================================================== */
.form-historial-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
}

.form-container-flex {
    flex: 1;
    min-width: 300px;
}

.historial-container-flex {
    flex: 1;
    min-width: 350px;
}

.card {
    background-color: var(--surface-color);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
}

.form-control,
.form-select,
.ts-wrapper .ts-control {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    border-radius: var(--border-radius);
    font-size: 1rem;
    font-weight: 400;
    background-color: var(--bg-color);
}
.form-select .option.active {
    background-color: var(--primary-container-color);
    color: var(--primary-color);
}


/* Placeholders normales y TomSelect */
.form-control::placeholder,
.ts-wrapper .ts-control > input::placeholder {
    color: var(--on-surface-variant-color);
    font-weight: 300;
    font-size: 0.9rem;
    font-style: regular;
    opacity: 0.7;
}

/* Impedir que aparezcan "flechitas" en el campo numerico en Chrome, Safari, Edge */
.form-control[type="number"]::-webkit-inner-spin-button,
.form-control[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none; /* Para Chrome, Safari, Edge */
    margin: 0;
}

/* Impedir que aparezcan "flechitas" en el campo numerico  en Firefox*/
.form-control[type="number"] {
    -moz-appearance: textfield; /* Para Firefox */
    appearance: textfield;         /* Propiedad estándar */
}

/* Asegura que el campo de hora tenga la misma altura y padding que los demás */
input[type="time"].form-control {
    line-height: 1.5; /* Ajusta la altura de línea para centrar el texto verticalmente */
}

/* Estilo del icono del reloj en navegadores WebKit (Chrome, Edge, Safari) */
input[type="time"]::-webkit-calendar-picker-indicator {
    cursor: pointer;
    border-radius: 4px;
    padding: 3px;
    transition: background-color 0.2s ease;
}

input[type="time"]::-webkit-calendar-picker-indicator:hover {
    background-color: var(--primary-container-color);
}

.btn, .btn-icon {
    font-size: 0.9rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    padding-left: 1rem;
    padding-right: 1rem;
    transition: all 0.2s ease-in-out;
    -webkit-tap-highlight-color: transparent;
    white-space: nowrap;
}

.btn:hover, .btn-icon:hover {
    transform: translateY(-2px);
}

.btn-primary {
    background-color: var(--primary-color) !important;
    border: none !important;
}

.btn-primary:hover, .btn-primary:active, .btn-primary:focus {
    background-color: #0c48c0 !important;
    border: none;
}

.btn-outline-primary:hover, .btn-outline-primary:active, .btn-outline-primary:focus {
    background-color: var(--primary-container-color) !important;
    color: var(--primary-color) !important;
}

.btn-secondary {
    background-color: var(--secondary-color);
    border-color: var(--secondary-color);
}

.btn-secondary:hover {
    background-color: var(--on-secondary-container-color);
    border-color: var(--on-secondary-container-color);
}

.btn-outline-secondary {
    border-color: var(--secondary-color);
    color: var(--secondary-color);
}

.btn-outline-secondary:hover {
    background-color: var(--on-secondary-container-color);
}

.btn-tertiary {
    background: #e5e6ec;
    color: #515358;
    font-weight: 500;
    border: none;
}

.btn-tertiary:hover, .btn-tertiary:focus {
    background: var(--secondary-color);
    color: white;
}

.btn-danger {
    background: var(--danger-color);
    border: none;
}

.btn-danger:hover, .btn-danger:active, .btn-danger:focus {
    background: #c23333 !important;
    color: white !important;
}

.btn-success {
    background: var(--success-color);
    border: none;
    color: white;
}

.btn-success:hover, .btn-success:active, .btn-success:focus {
    background: #399218;
    color: white;
}

.btn-danger:hover {
    background: transparent;
    color: var(--danger-color);
}

.btn-icon {
    width: 48px;
    height: 48px;
    border: none;
    padding: 0;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    background: transparent;
    color: var(--on-surface-variant-color);
}

.btn-icon:disabled {
    background-color: transparent;
    color: #adb5bd;
    opacity: 0.75;
    cursor: not-allowed;
}

.btn-icon:disabled:hover {
    transform: none;
}

.btn-icon.btn-primary, .btn-icon.btn-danger {
    background: none !important;
    color: var(--secondary-color);
}

.btn-icon.btn-primary:hover, .btn-icon.btn-primary:active, .btn-icon.btn-primary:focus {
    background: none;
    color: var(--primary-color);
}

.btn-icon.btn-secondary:hover, .btn-icon.btn-secondary:active, .btn-icon.btn-secondary:focus {
    background: none;
    color: black;
}

.btn-icon.btn-danger:hover, .btn-icon.btn-danger:active, .btn-icon.btn-danger:focus{
    background: none;
    color: var(--danger-color) !important;
}

.btn-icon.btn-success:hover, .btn-icon.btn-success:active, .btn-icon.btn-success:focus{
    background: none;
    color: var(--success-color);
}

.form-label {
    font-weight: 600;
    font-size: 0.85rem;
    color: var(--on-surface-variant-color);
    margin-bottom: 0.20rem;
}

.text-ingreso {
    color: var(--ingresos-color) !important;
    font-weight: 600;
}

.text-egreso {
    color: var(--egresos-color) !important;
    font-weight: 600;
}

.text-ingreso-regular {
    color: var(--ingresos-color) !important;
    font-weight: 500;
}

.text-egreso-regular {
    color: var(--egresos-color) !important;
    font-weight: 500;
}

/*-- BADGES --*/

.importe-badge { font-size: 0.75rem; font-weight: 600; border-radius: 10px;
padding: 0.25em 0.6em; }
.importe-badge.ingreso { background-color: #dbffe7; color: #3d8154; }
.importe-badge.egreso { background-color: #ffdbdb; color: #975656;
}


/*-- Botones con lista desplegable --*/
.dropdown-menu .dropdown-item {
    font-family: 'Poppins', sans-serif;
    font-size: 1rem;
    font-weight: 500;
    color: var(--on-secondary-container-color);
    transition: all 0.2s ease-in-out;
}

.dropdown-menu .dropdown-item:hover {
    background-color: var(--primary-container-color);
    color: var(--primary-color);
}

.dropdown-menu .dropdown-item i {
    width: 20px;
}



#btn-eliminar-cliente:hover {
    color: var(--danger-color);
    background-color: #ffdcdc;
}

#importe-signo {
  font-size: 1.2rem;
  font-weight: 500;
  border-right: none;
  padding-right: 0.5rem;  /* derecha */
}

#importe {
  border-left: none;
}

#comentarios {
  resize: none;
  overflow-y: hidden;
  padding-right: 2.5rem;
}

.btn-clear-textarea {
    position: absolute;
    top: 8px;
    right: 8px;
    z-index: 10;
    padding: 0.5rem;
    box-sizing: content-box;
}

#cliente-search:disabled {
  background-color: var(--bg-color);
  opacity: 1;
    -webkit-text-fill-color: var(--on-surface-color);
}

.tooltip .tooltip-inner {
    background-color: rgba(0, 0, 0, 0.90);
    color: #ffffff;
}

.tooltip .tooltip-arrow::before {
    border-top-color: rgba(0, 0, 0, 0.85) !important;
}

.info-icon {
    cursor: pointer;
    color: var(--on-secondary-container-color);
    transition: color 0.2s ease-in-out;
}


.btn-link {
    text-decoration: none !important;
    font-weight: 500;
    color: var(--on-surface-variant-color);
    padding: 0.25rem 0.75rem;
    transition: all 0.2s ease;
}

.btn-link:hover, .btn-link:active, .btn-link:focus {
    text-decoration: underline !important;
}

.list-group-item-action:hover {
    background-color: var(--primary-container-color) !important;
    color: var(--primary-color) !important;
}

.list-group-item-action:hover .badge {
    background-color: var(--primary-color) !important;
    color: white !important;
}

.search-highlight {
    background-color: var(--primary-container-color);
    color: var(--primary-color);
    font-weight: 700;
}


.navbar {
    background-color: var(--surface-color);
    box-shadow: var(--shadow-sm);
    padding: 1rem;
    transition: transform 0.3s ease-in-out, left 0.3s ease-in-out, width 0.3s ease-in-out;
    z-index: 1020;
}

.navbar.navbar-hidden {
    transform: translateY(-100%);
}

.side-nav {
    position: fixed;
    top: 0;
    left: 0;
    width: 280px; /* Aumentado de 250px */
    height: 100vh;
    background-color: var(--surface-color);
    border-right: 1px solid var(--border-color);
    padding: 1.5rem 1rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    z-index: 1030;
    transform: translateX(-100%);
    transition: transform 0.3s ease-in-out;
}

/* Titulo de la app */
.navbar-brand-side {
    display: flex;
    align-items: center;
    gap: 0.5rem; /* Aumentado para dar más espacio */
    font-size: 1.6rem; /* Aumentado de 1.25rem */
    font-weight: 500;
    color: #212529;
    text-decoration: none;
    margin-bottom: 2rem;
    padding: 0 0.5rem;
}

.navbar-brand-side i {
    font-size: 1.65rem; /* Hacemos el icono un poco más grande que el texto */
}

.side-nav-links {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.side-nav-link {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem 1rem;
    border-radius: var(--border-radius);
    text-decoration: none;
    color: var(--on-surface-variant-color);
    font-weight: 500;
    transition: background-color 0.2s ease, color 0.2s ease;
}

.side-nav-link i {
    font-size: 1.1rem;
    width: 20px;
    text-align: center;
}

.side-nav-link:hover {
    background-color: var(--bg-color);
    color: var(--on-surface-color);
}

.side-nav-link.active {
    background-color: var(--primary-container-color);
    color: var(--primary-color);
    font-weight: 600;
}

.side-nav-footer {
    position: relative;
}

.side-nav-info {
    padding: 1rem 0.5rem;
    text-align: center;
    border-top: 1px solid var(--border-color);
    margin-bottom: 0.5rem;
    margin-top: 3rem;
}

.side-nav-info small {
    font-size: 0.75rem;
    color: var(--on-surface-variant-color);
    display: block;
    margin-bottom: 0.25rem;
}

.side-nav-info small:not(:first-of-type) {
    margin-top: 0.75rem;
}

.side-nav-info .user-data-badge {
    background-color: #e9ecef !important;
    font-weight: 600;
    font-size: 0.8rem;
    padding: 0.5em 0.8em;
    word-wrap: break-word;
    white-space: normal;
    text-align: center;
    max-width: 100%;
    display: inline-block;
    border-radius: 50px;
}

.settings-toggle-btn {
    display: flex;
    align-items: center;
    gap: 1rem;
    width: 100%;
    padding: 0.75rem 1rem;
    border-radius: var(--border-radius);
    background-color: transparent;
    border: none;
    color: var(--on-surface-variant-color);
    font-weight: 500;
    text-align: left;
}

.settings-toggle-btn:hover {
    background-color: var(--bg-color);
}

.settings-submenu {
    position: absolute;
    bottom: calc(100% + 8px);
    left: 0;
    width: 100%;
    background-color: var(--surface-color);
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
    box-shadow: var(--shadow-md);
    padding: 0.5rem;
    z-index: 1040;
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    transition: opacity 0.2s ease, transform 0.2s ease, visibility 0.2s ease;
}

.settings-submenu.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

.side-nav .side-nav-links,
.side-nav .navbar-brand-side {
    transition: filter 0.3s ease-in-out, opacity 0.3s ease-in-out;
}

.side-nav.submenu-active .side-nav-links,
.side-nav.submenu-active .navbar-brand-side {
    filter: blur(3px) brightness(1);
    opacity: 0.6;
    pointer-events: none; /* Evita que se pueda hacer clic en los elementos del fondo */
}

.submenu-link {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.5rem 1rem; /* Aumentado para más espacio */
    border-radius: var(--border-radius);
    text-decoration: none;
    color: #636366;
    font-size: 1rem; /* Aumentado de 0.9rem */
}

.submenu-link i {
    font-size: 1.1rem; /* Aumentado */
    width: 24px; /* Un poco más de espacio */
}

.submenu-link:hover {
    background-color: var(--bg-color);
    color: #28282b;
}

.submenu-divider {
    height: 1px;
    background-color: var(--border-color);
    margin: 0.5rem 0;
}

.bottom-nav {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 65px;
    background-color: var(--surface-color);
    display: flex;
    justify-content: space-around;
    align-items: center;
    box-shadow: 0 -2px 5px rgba(0,0,0,0.08);
    z-index: 1000;
}

.bottom-nav-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    color: var(--on-surface-variant-color);
    font-size: 0.75rem;
    transition: color 0.2s ease-in-out;
    flex-grow: 1;
    height: 100%;
}

.bottom-nav-link i {
    font-size: 1.25rem;
    margin-bottom: 4px;
}

.bottom-nav-link.active {
    color: var(--primary-color);
    font-weight: 600;
}

.bottom-nav-link:hover {
    color: var(--primary-color);
}

.suggestion-scroll-container {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
}

.suggestion-scroll-container::-webkit-scrollbar {
    display: none;
}

.suggestion-scroll-container .btn {
    white-space: nowrap;
    flex-shrink: 0;
}

/* =============================================================== */
/* NUEVA SECCIÓN RESPONSIVE                                        */
/* =============================================================== */

.btn-scroll-top {
    position: fixed;
    bottom: 80px; /* Espacio para la barra de navegación inferior en móviles */
    right: 20px;
    z-index: 1000;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    font-size: 1.2rem;
    box-shadow: var(--shadow-md);
    background-color: var(--primary-color);
    color: white;
    transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
}

.btn-scroll-top:hover {
    background-color: var(--on-primary-container-color);
    color: white;
    transform: translateY(-3px);
}

/* Estilos base (Mobile First) - Menos de 992px */
.navbar {
    display: flex;
}
.bottom-nav {
    display: flex;
}
.side-nav {
    transform: translateX(-100%);
}
.form-historial-container {
    flex-direction: column;
}
body {
    padding-left: 0;
}

/* Pantallas medianas y grandes (Tablets y Escritorio) */
@media (min-width: 916px) {
    .btn-scroll-top {
        bottom: 20px; /* Menos espacio en la parte inferior para la vista de escritorio */
    }
    .navbar, .bottom-nav {
        display: none;
    }
    .side-nav {
        transform: translateX(0);
    }
    body {
        padding-left: 280px; /* Aumentado de 240px */
        padding-top: 0;
        padding-bottom: 0;
    }
    .main-container {
        padding-top: 2rem;
    }
    .form-historial-container {
        flex-direction: column;
    }
}

/* Pantallas extra grandes - 1200px y más */
@media (min-width: 1200px) {
    .form-historial-container {
        flex-direction: row;
    }
}



----- C:\Users\Javier\Desktop\finanzas-app\public\css\tablero.css -----
/* --- Variables y Estilos Exclusivos para la Pantalla de Inicio --- */
:root {
    --bg-tablero: #f5f5f5;
}

body.tablero-page .main-container {
    max-width: 1200px;
}

.date-display { 
    font-size: 0.9rem; 
    color: var(--on-surface-variant-color);
}

.top-date-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    min-height: 22px; /* Evita que el diseño salte antes de que cargue el JS */
}

.time-placeholder {
    flex-basis: 100px; /* Asegura un espacio fijo para la hora */
    flex-shrink: 0;
}


/* --- Nuevo Selector de Período Dinámico --- */
.dynamic-period-selector-container {
    background-color: var(--surface-color);
    border-radius: var(--border-radius);
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    box-shadow: var(--shadow-sm);
}

.granularity-selector {
    display: flex;
    justify-content: center;
    background-color: #f5f5f5;
    border-radius: 50px;
    padding: 0.3rem;
    gap: 0.5rem; /* Separación entre botones */
    max-width: max-content;
    margin: 0 auto;
}

.granularity-selector .btn {
    border-radius: 50px;
    border: none;
    padding: 0.5rem 1.5rem;
    font-weight: 600;
    font-size: 1rem;
    background-color: transparent;
    color: var(--on-surface-variant-color);
    transition: all 0.3s ease;
    text-decoration: none;
    flex: 1; /* Ocupa el mismo espacio */
    text-align: center; /* Centra el texto */
    min-width: 120px; /* Ancho mínimo para consistencia */
}


.granularity-selector .btn.active {
    background-color: var(--primary-color);
    color: white;
    box-shadow: var(--shadow-md);
}

.period-navigator {
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
}

.nav-arrow {
    color: var(--on-surface-variant-color);
    font-size: 1.2rem;
    padding: 0.5rem 1rem;
    border-radius: 50%;
    text-decoration: none;
    transition: background-color 0.2s ease, opacity 0.2s ease;
    z-index: 3;
}

.nav-arrow:hover {
    background-color: var(--bg-color);
    color: var(--on-surface-color);
}

.nav-arrow.disabled {
    opacity: 0.3;
    pointer-events: none;
    cursor: default;
}

.period-ribbon-wrapper {
    flex-grow: 1;
    overflow: hidden;
    position: relative;
    cursor: grab;
}

.period-ribbon-wrapper::before,
.period-ribbon-wrapper::after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    width: 40px;
    pointer-events: none;
    z-index: 2;
}

.period-ribbon-wrapper::before {
    left: 0;
    background: linear-gradient(to right, var(--surface-color), transparent);
}

.period-ribbon-wrapper::after {
    right: 0;
    background: linear-gradient(to left, var(--surface-color), transparent);
}

.period-ribbon {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
}

.ribbon-item {
    border: none;
    background-color: transparent;
    color: var(--on-surface-variant-color);
    font-weight: 600;
    font-size: 1.1rem;
    padding: 0.5rem 1rem; /* Padding ajustado para dos líneas */
    border-radius: 8px;
    text-decoration: none;
    transition: all 0.3s ease;
    flex-shrink: 0;
    white-space: nowrap;
    display: flex;
    flex-direction: column;
    justify-content: center;
    line-height: 1.2; /* Mejora el espaciado entre líneas */
    min-height: 52px; /* Garantiza que todos los botones tengan la misma altura, evitando saltos en el layout */
    min-width: 120px;
}

.ribbon-item-label {
    font-size: 1.1rem; /* Mantiene el tamaño original */
}

.ribbon-item-sublabel {
    font-size: 0.7rem; /* Texto más pequeño */
    font-weight: 500;
    opacity: 0.8;
    margin-top: 2px;
    text-transform: none;
}


.ribbon-item.active {
    background-color: var(--primary-container-color);
    color: var(--primary-color);
    font-weight: 700;
    transform: scale(1.05);
}

.ribbon-item:not(.active):hover {
    background-color: var(--bg-color);
}

.period-ribbon .ribbon-item:nth-child(3),
.period-ribbon .ribbon-item:nth-child(5) {
    opacity: 0.6;
    transform: scale(0.95);
}

.period-ribbon .ribbon-item:nth-child(2),
.period-ribbon .ribbon-item:nth-child(6) {
    opacity: 0.4;
    transform: scale(0.9);
}

.period-ribbon .ribbon-item:nth-child(1),
.period-ribbon .ribbon-item:nth-child(7) {
    opacity: 0.2;
    transform: scale(0.85);
}

.ribbon-item.disabled {
    opacity: 0.2 !important;
    pointer-events: none;
    cursor: default;
    color: #999;
    background-color: transparent !important;
}


.balance-cards-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr); 
  gap: 1.5rem;
  margin: 0 auto;
  padding: 1rem 0;
}

.balance-card {
  background-color: var(--card-bg, #fff);
  border-radius: 0.5rem;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  padding: 1rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
}

.balance-card-ingresos { background: var(--ingresos-color); }
.balance-card-gastos { background: var(--egresos-color); }
.balance-card-resultado { background: var(--secondary-color); }

.balance-card .card-body { 
    padding: 0;
    display: flex;
    flex-wrap: wrap;
    flex-direction: column;
    height: 100%;
}
.balance-card .card-title-area { 
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem; 
}
.balance-card .card-title-area i {
    font-size: 1.2rem;
    color: rgba(255, 255, 255, 0.7);
}
.balance-card h5 { 
    margin: 0;
    font-weight: 600;
    font-size: 1.0rem;
    color: rgba(255, 255, 255, 0.7);
}
.balance-card .card-time-ago { 
    font-size: 0.8rem;
    opacity: 0.9;
    white-space: nowrap;
    color: white;
}
.balance-card .card-amount {
    margin-top: auto;
    margin-bottom: auto;
    text-align: right;
}
.balance-card .card-amount p.amount { 
    font-size: 2.0rem;
    font-weight: 700;
    margin-bottom: 0;
    letter-spacing: -0.5px;
    color: #fff
}
.balance-card .card-comparison {
    margin-top: auto;
    min-height: 21px;
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;
}

.badge-comparison {
    padding: 0.25rem 0.5rem;
    border-radius: 5px;
    font-weight: 600;
    font-size: 0.7rem;
    color: #ffffffde;
}

.balance-card-ingresos .badge-comparison { background-color: rgba(255, 255, 255, 0.3); }
.balance-card-gastos .badge-comparison { background-color: rgba(255, 255, 255, 0.3); }
.balance-card-resultado .badge-comparison { background-color: rgba(255, 255, 255, 0.3); }

.chart-container {
  display: grid;
  height: 400px !important;
  grid-template-columns: 1fr;
  gap: 1rem;
  padding: 2px;
  border-radius: var(--border-radius);
  align-items: center;
  justify-content: center;
}

.empty-chart-placeholder { text-align: center; color: var(--on-surface-variant-color); }
.empty-chart-placeholder i { font-size: 3rem; margin-bottom: 2rem; opacity: 0.5; }

.section-title { font-weight: 600; margin-bottom: 1rem; font-size: 1.25rem; }

/* Estilos para la nueva tarjeta de Ranking */
.ranking-card .card-body {
    display: flex;
    flex-direction: column;
}

.ranking-list {
    padding-left: 0;
    list-style: none;
    margin-bottom: 0;
    overflow-y: auto;
    flex-grow: 1;
}

.ranking-list .list-group-item {
    border: none;
    padding: 0.2rem 0.25rem;
}

.ranking-position {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    border-radius: 50%;
    background-color: #f0f0f0;
    color: var(--on-surface-variant-color);
    font-weight: 600;
    font-size: 0.9rem;
    flex-shrink: 0;
}

.ranking-item-name {
    font-weight: 500;
    color: var(--secondary-color);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.ranking-item-bar .progress {
    height: 6px;
    background-color: #e9ecef;
    border-radius: 3px;
}

.ranking-item-bar .progress-bar {
    background-color: var(--registro-soft-color);
}

.ranking-item-bar .progress-bar.progress-bar-ingresos, .progress-bar.progress-bar-clientes {
    background-color: var(--ingresos-soft-color);
}

.ranking-item-bar .progress-bar.progress-bar-egresos, .progress-bar.progress-bar-proveedores {
    background-color: var(--egresos-soft-color);
}

.ranking-item-details {
    font-size: 0.85rem;
    color: var(--on-surface-variant-color);
}

.ranking-total {
    border-top: 1px solid var(--border-color);
    padding-top: 0.75rem;
    margin-top: 0.75rem;
}

/* Estilos para los botones activos del Ranking */
.ranking-card .btn-group .btn {
    font-size: 0.8rem;
    padding: 0.4rem 0.5rem;
    text-transform: uppercase;
    font-weight: 500;
}

/*.ranking-card .btn-group-toggle-colors .btn-todos.active {
    background-color: var(--registro-soft-color);
    border-color: var(--registro-soft-color);
}*/
.ranking-card .btn-group-toggle-colors .btn-ingreso.active, .btn-clientes.active {
    background-color: var(--ingresos-soft-color);
    border-color: var(--ingresos-soft-color);
    color: white;
    font-weight: 600;
}
.ranking-card .btn-group-toggle-colors .btn-egreso.active, .btn-proveedores.active {
    background-color: var(--egresos-soft-color);
    border-color: var(--egresos-soft-color);
    color: white;
    font-weight: 600;
}


/* Responsive */
@media (max-width: 1000px) {
    .balance-cards-container {
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        max-width: 95%;
    }
}

@media (max-width: 767px) {
    .balance-cards-container {
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 0;
    }
    .balance-card {
        width: 100%;
        padding: 1rem;
        min-height: 120px;
    }
    .balance-card .card-amount p.amount { 
        font-size: 1.75rem;
    }
    .chart-container {
	    grid-template-columns: 1fr;
    } 
    .dynamic-period-selector-container {
        padding: 0.75rem;
    }
    .period-ribbon {
        gap: 0.2rem;
    }
    .ribbon-item {
        padding: 0.5rem;
        font-size: 0.8rem;
    }
    .period-ribbon-wrapper::before,
    .period-ribbon-wrapper::after {
        width: 20px;
    }
}

/* Contenedor para la nueva leyenda HTML */
.chart-legend-container {
    padding: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.chart-legend-container ul {
    display: flex;
    flex-direction: row;
    padding: 0;
    margin: 0;
    list-style: none;
}

/* Estilo de "Botón" para cada item de la leyenda */
.chart-legend-container ul li {
    background-color: var(--surface-color);
    border: 1px solid var(--border-color);
    border-radius: 50px; /* Bordes redondeados para forma de píldora */
    padding: 6px 16px;
    margin: 0 8px; /* Espaciado entre botones */
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    box-shadow: var(--shadow-sm);
    display: inline-flex;
    align-items: center;
}



----- C:\Users\Javier\Desktop\finanzas-app\public\js\database_management.client.js -----
document.addEventListener('DOMContentLoaded', function () {
    const dbPage = document.querySelector('.db-management-container');
    if (!dbPage) return;

    // --- Lógica para mostrar toasts de estado desde la URL ---
    const urlParams = new URLSearchParams(window.location.search);
    const status = urlParams.get('status');
    if (status) {
        const messages = {
            local_backup_success: { text: 'Respaldo local creado con éxito.', type: 'success' },
            local_backup_error: { text: 'Error al crear el respaldo local.', type: 'danger' },
            local_restore_error: { text: 'Error al restaurar desde la lista.', type: 'danger' },
            local_restore_error_no_file: { text: 'No se seleccionó ningún archivo para restaurar.', type: 'danger' },
            local_restore_error_invalid_file: { text: 'El archivo seleccionado no es válido. Debe ser .sqlite.', type: 'danger' },
            local_restore_error_db_close: { text: 'Error al preparar la base de datos para la restauración.', type: 'danger' },
            local_restore_error_generic: { text: 'Ocurrió un error inesperado durante la restauración.', type: 'danger' },
            reset_pin_error: { text: 'PIN incorrecto. La operación ha sido cancelada.', type: 'danger' }
        };
        if (messages[status]) {
            window.showToast(messages[status].text, messages[status].type);
            
            // Si el error fue por el PIN, reabrimos el modal de reseteo.
            if (status === 'reset_pin_error') {
                const resetModalEl = document.getElementById('modal-confirmar-reseteo');
                if (resetModalEl) {
                    const resetModal = new bootstrap.Modal(resetModalEl);
                    resetModal.show();
                }
            }
            
            // Limpiar la URL para que el mensaje no se muestre de nuevo al recargar
            urlParams.delete('status');
            const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');
            window.history.replaceState({}, document.title, newUrl);
        }
    }
    // --- Elementos del DOM ---
    const isLicensed = dbPage.dataset.isLicensed === 'true';
    if (!isLicensed) return; // No inicializar lógica si no hay licencia

    const formSettings = document.getElementById('local-settings-form');
    const btnSaveSettings = document.getElementById('btn-save-db-settings');
    const settingInputs = formSettings.querySelectorAll('.setting-input');
    const btnVerifyPath = document.getElementById('btn-verify-path');
    const pathTestResult = document.getElementById('path-test-result');
    const backupPathInput = document.getElementById('backupPath');
    const modeRadios = document.querySelectorAll('input[name="mode"]');
    const automaticSettingsContainer = document.getElementById('automatic-settings-local');
    const timeSettingsContainer = document.getElementById('automatic-time-settings');

    const modalConfirmarRestauracionEl = document.getElementById('modal-confirmar-restauracion');
    const btnConfirmarRestauracionFinal = document.getElementById('btn-confirmar-restauracion-final');
    let formToRestore = null;

    const modalConfirmarEliminarEl = document.getElementById('modal-confirmar-eliminacion-respaldo');
    const btnConfirmarEliminarFinal = document.getElementById('btn-confirmar-eliminacion-respaldo-final');
    let backupToDelete = { path: null, id: null };

    // --- Lógica para guardar configuración de respaldos ---
    settingInputs.forEach(input => {
        input.addEventListener('change', () => {
            btnSaveSettings.disabled = false;
        });
    });

    modeRadios.forEach(radio => {
        radio.addEventListener('change', (e) => {
            const showAutomatic = e.target.value !== 'manual';
            const showTime = ['daily', 'weekdays'].includes(e.target.value);
            automaticSettingsContainer.classList.toggle('d-none', !showAutomatic);
            timeSettingsContainer.classList.toggle('d-none', !showTime);
        });
    });

    btnSaveSettings.addEventListener('click', async () => {
        const formData = new FormData(formSettings);
        const data = Object.fromEntries(formData.entries());
        
        try {
            const response = await fetch('/settings/database/local/update-settings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await response.json();
            if (!response.ok) throw new Error(result.message);
            
            window.showToast(result.message, 'success');
            btnSaveSettings.disabled = true;

            if (result.message.toLowerCase().includes('reinicie')) {
                showRestartToast();
            }

        } catch (error) {
            window.showToast(error.message, 'danger');
        }
    });

    // --- Función para mostrar toast con botón de reinicio ---
    function showRestartToast() {
        const toastContainer = document.querySelector('.toast-container');
        const toastId = 'restart-toast';
        
        if (document.getElementById(toastId)) return;

        const toastHtml = `
            <div id="${toastId}" class="toast bg-info text-white" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
                <div class="toast-header bg-info text-white border-bottom border-light">
                    <strong class="me-auto">Reinicio Requerido</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    Para aplicar los cambios en la programación, es necesario reiniciar.
                    <div class="d-grid mt-2">
                        <button class="btn btn-light btn-sm" id="btn-restart-from-toast">Reiniciar Ahora</button>
                    </div>
                </div>
            </div>`;
        
        toastContainer.insertAdjacentHTML('beforeend', toastHtml);
        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement);

        toastElement.querySelector('#btn-restart-from-toast').addEventListener('click', async () => {
            try {
                await fetch('/settings/restart-app', { method: 'POST' });
                window.showToast('Reiniciando la aplicación...', 'info');
                toast.hide();
                setTimeout(() => window.location.href = '/login', 5000);
            } catch (e) {
                window.showToast('No se pudo comunicar con el servidor para reiniciar.', 'danger');
            }
        });

        toast.show();
    }

    // --- Lógica para verificar ruta ---
    btnVerifyPath.addEventListener('click', async () => {
        const path = backupPathInput.value;
        pathTestResult.textContent = 'Verificando...';
        pathTestResult.className = 'form-text mt-2';
        try {
            const response = await fetch('/settings/database/local/test-path', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ backupPath: path })
            });
            const result = await response.json();
            if (!response.ok) throw new Error(result.message);
            
            pathTestResult.textContent = result.message;
            pathTestResult.classList.add('text-success');
        } catch (error) {
            pathTestResult.textContent = error.message;
            pathTestResult.classList.add('text-danger');
        }
    });

    // --- Lógica para restaurar respaldo ---
    if (modalConfirmarRestauracionEl) {
        modalConfirmarRestauracionEl.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget;
            const formId = button.getAttribute('data-form-id');
            formToRestore = document.getElementById(formId);
        });

        btnConfirmarRestauracionFinal.addEventListener('click', () => {
            if (formToRestore) {
                btnConfirmarRestauracionFinal.disabled = true;
                btnConfirmarRestauracionFinal.innerHTML = `
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Restaurando...
                `;
                formToRestore.submit();
            }
        });
    }

    // --- Lógica para eliminar respaldo ---
    if (modalConfirmarEliminarEl) {
        modalConfirmarEliminarEl.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget;
            backupToDelete.path = button.getAttribute('data-backup-path');
            backupToDelete.id = button.getAttribute('data-backup-id');
        });

        btnConfirmarEliminarFinal.addEventListener('click', async () => {
            if (!backupToDelete.path) return;
            
            try {
                const response = await fetch('/settings/database/local/delete-backup', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ backupFilePath: backupToDelete.path })
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message);
                
                window.showToast(result.message, 'success');
                const itemToRemove = document.getElementById(backupToDelete.id);
                if (itemToRemove) itemToRemove.remove();

            } catch (error) {
                window.showToast(error.message, 'danger');
            } finally {
                const modal = bootstrap.Modal.getInstance(modalConfirmarEliminarEl);
                modal.hide();
                backupToDelete = { path: null, id: null };
            }
        });
    }

    // --- Lógica para Restaurar desde archivo subido ---
    const formUploadRestore = document.getElementById('form-upload-restore');
    if (formUploadRestore) {
        const backupFileInput = document.getElementById('backupFile');
        const btnUploadRestore = document.getElementById('btn-upload-restore');
        const fileFeedback = document.getElementById('file-selection-feedback');

        backupFileInput.addEventListener('change', () => {
            if (backupFileInput.files.length > 0) {
                const file = backupFileInput.files[0];
                const fileName = file.name;
                const fileExtension = fileName.split('.').pop().toLowerCase();

                if (fileExtension === 'sqlite') {
                    fileFeedback.textContent = `Archivo seleccionado: ${fileName}`;
                    fileFeedback.className = 'form-text mt-1 text-success';
                    btnUploadRestore.disabled = false;
                } else {
                    fileFeedback.textContent = 'Por favor, seleccione un archivo .sqlite válido.';
                    fileFeedback.className = 'form-text mt-1 text-danger';
                    btnUploadRestore.disabled = true;
                }
            } else {
                fileFeedback.textContent = '';
                btnUploadRestore.disabled = true;
            }
        });
    }

    // --- Lógica para el nuevo modal de reseteo ---
    const modalConfirmarReseteoEl = document.getElementById('modal-confirmar-reseteo');
    if (modalConfirmarReseteoEl) {
        const pinInput = modalConfirmarReseteoEl.querySelector('#pin-reset');
        const form = modalConfirmarReseteoEl.querySelector('#form-reset-database');
        const submitBtn = modalConfirmarReseteoEl.querySelector('#btn-confirmar-reseteo-final');

        modalConfirmarReseteoEl.addEventListener('shown.bs.modal', () => {
            if(pinInput) pinInput.focus();
        });

        modalConfirmarReseteoEl.addEventListener('hidden.bs.modal', () => {
            if(pinInput) pinInput.value = '';
        });

        if (form) {
            form.addEventListener('submit', () => {
                if (submitBtn) {
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = `
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Procesando...
                    `;
                }
            });
        }
    }
});


----- C:\Users\Javier\Desktop\finanzas-app\public\js\main.client.js -----
// public/js/main.client.js

document.addEventListener('DOMContentLoaded', function () {
    // 1. Función Global para Toasts (Notificaciones)
    // Se ajusta para que cada tipo de notificación tenga un color representativo.
    window.showToast = function(message, type = 'info') {
        const toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            console.error('Toast container not found!');
            return;
        }

        const toastId = 'toast-' + Math.random().toString(36).substring(2, 9);
        
        const toastIconClasses = {
            success: 'fa-solid fa-check-circle',
            danger: 'fa-solid fa-triangle-exclamation',
            warning: 'fa-solid fa-circle-exclamation',
            info: 'fa-solid fa-circle-info'
        };

        const toastColorClasses = {
            success: 'bg-success text-white',
            danger: 'bg-danger text-white',
            warning: 'bg-warning text-dark',
            info: 'bg-dark text-white'
        };

        const colorClass = toastColorClasses[type] || toastColorClasses['info'];
        const closeButtonClass = type === 'warning' ? '' : 'btn-close-white';

        const toastHtml = `
            <div id="${toastId}" class="toast align-items-center ${colorClass} border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
              <div class="d-flex">
                <div class="toast-body">
                  <i class="${toastIconClasses[type] || toastIconClasses['info']} me-2"></i>
                  ${message}
                </div>
                <button type="button" class="btn-close ${closeButtonClass} me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
              </div>
            </div>`;

        toastContainer.insertAdjacentHTML('beforeend', toastHtml);
        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement);
        toastElement.addEventListener('hidden.bs.toast', () => toastElement.remove());
        toast.show();
    };

    // 2. Lógica para el menú lateral y superior (Side Nav / Top Nav)
    const sideNav = document.querySelector('.side-nav');
    const settingsToggleBtn = document.getElementById('settings-toggle-btn');
    const settingsSubmenu = document.getElementById('settings-submenu');
    if (settingsToggleBtn && settingsSubmenu && sideNav) {
        settingsToggleBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            settingsSubmenu.classList.toggle('show');
            sideNav.classList.toggle('submenu-active'); // Activa/desactiva la clase en el contenedor principal
        });
        document.addEventListener('click', (e) => {
            if (!settingsSubmenu.contains(e.target) && !settingsToggleBtn.contains(e.target)) {
                settingsSubmenu.classList.remove('show');
                sideNav.classList.remove('submenu-active'); // Siempre quita la clase al cerrar
            }
        });
    }

    // 3. Lógica del modal de licencia
    const modalLicenciaEl = document.getElementById('modal-licencia');
    if (modalLicenciaEl) {
        const licenseActiveView = document.getElementById('license-active-view');
        const licenseActivationView = document.getElementById('license-activation-view');
        const activeLicenseUsername = document.getElementById('active-license-username');
        const btnActivarLicencia = document.getElementById('btn-activar-licencia');
        const btnDeleteLicense = document.getElementById('btn-delete-license');
        const licenseStatusMessage = document.getElementById('license-status-message');
        const modalEliminarLicencia = new bootstrap.Modal(document.getElementById('modal-confirmar-eliminar-licencia'));

        const updateLicenseView = async () => {
            try {
                const response = await fetch('/settings/api/license-status');
                const data = await response.json();
                if (data.activated) {
                    licenseActiveView.classList.remove('d-none');
                    licenseActivationView.classList.add('d-none');
                    activeLicenseUsername.textContent = data.username;
                } else {
                    licenseActiveView.classList.add('d-none');
                    licenseActivationView.classList.remove('d-none');
                }
            } catch (error) {
                console.error("Error fetching license status:", error);
            }
        };

        modalLicenciaEl.addEventListener('show.bs.modal', updateLicenseView);

        btnActivarLicencia.addEventListener('click', async () => {
            const licenseKey = document.getElementById('license-key-input').value;
            const username = document.getElementById('license-username-input').value;
            const cuit = document.getElementById('license-cuit-input').value;
            licenseStatusMessage.innerHTML = '';

            try {
                const response = await fetch('/settings/api/activate-license', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ licenseKey, username, cuit })
                });
                const result = await response.json();
                if (response.ok) {
                    licenseStatusMessage.innerHTML = `<div class="alert alert-success">${result.message}</div>`;
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    licenseStatusMessage.innerHTML = `<div class="alert alert-danger">${result.message}</div>`;
                }
            } catch (error) {
                licenseStatusMessage.innerHTML = `<div class="alert alert-danger">Error de conexión.</div>`;
            }
        });

        btnDeleteLicense.addEventListener('click', () => {
            const palabras = ['eliminar', 'borrar', 'quitar'];
            const palabra = palabras[Math.floor(Math.random() * palabras.length)];
            document.getElementById('palabra-confirmacion-licencia').textContent = palabra;
            document.getElementById('input-confirmacion-licencia').value = '';
            document.getElementById('btn-confirmar-eliminacion-final-licencia').disabled = true;
            modalEliminarLicencia.show();
        });

        document.getElementById('input-confirmacion-licencia').addEventListener('input', function() {
            const palabra = document.getElementById('palabra-confirmacion-licencia').textContent;
            document.getElementById('btn-confirmar-eliminacion-final-licencia').disabled = this.value.toLowerCase() !== palabra;
        });

        document.getElementById('btn-confirmar-eliminacion-final-licencia').addEventListener('click', async () => {
             try {
                const response = await fetch('/settings/api/delete-license', { method: 'POST' });
                const result = await response.json();
                if (response.ok) {
                    modalEliminarLicencia.hide();
                    window.showToast(result.message + ' Reiniciando...');
                    setTimeout(() => window.location.href = '/login', 2000);
                } else {
                    throw new Error(result.message);
                }
            } catch(error) {
                window.showToast(error.message, 'danger');
            }
        });
    }

    // 4. Lógica para cambiar PIN
    const modalCambiarPinEl = document.getElementById('modal-cambiar-pin');
    if (modalCambiarPinEl) {
        const form = document.getElementById('form-cambiar-pin');
        const errorDiv = document.getElementById('cambiar-pin-error');
        const forcePinChangeInput = document.getElementById('forcePinChange');
        const currentPinContainer = document.getElementById('current-pin-container');
        const modal = new bootstrap.Modal(modalCambiarPinEl);
        
        // --- MODIFICACIÓN ---
        // Función para mostrar el modal de cambio de PIN en modo forzado.
        const showForcedPinChange = () => {
            forcePinChangeInput.value = 'true';
            currentPinContainer.style.display = 'none';
            form.querySelector('#current_pin').required = false;
            // Se previene la reapertura si ya está visible.
            if (!modal._isShown) {
                modal.show();
            }
        };

        // Se comprueba si la URL contiene el parámetro para forzar el cambio.
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('forcePinChange') === 'true') {
            showForcedPinChange();
        }

        // Se agrega un event listener al botón del toast para abrir el modal.
        document.body.addEventListener('click', function(e) {
            if (e.target.id === 'btn-change-pin-toast') {
                showForcedPinChange();
            }
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            errorDiv.classList.add('d-none');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch('/settings/cambiar-pin', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (response.ok) {
                    modal.hide();
                    window.showToast(result.message, 'success');
                    // Limpiar la URL de parámetros y luego redirigir a logout.
                    setTimeout(() => { 
                        window.history.replaceState({}, document.title, window.location.pathname);
                        window.location.href = '/logout';
                    }, 2000);
                } else {
                    errorDiv.textContent = result.message;
                    errorDiv.classList.remove('d-none');
                }
            } catch (error) {
                 errorDiv.textContent = 'Error de conexión.';
                 errorDiv.classList.remove('d-none');
            }
        });
    }

});


----- C:\Users\Javier\Desktop\finanzas-app\public\js\pago.client.js -----
document.addEventListener('DOMContentLoaded', function () {
    const pagoPage = document.getElementById('form-cargar-pago');
    if (pagoPage) {
        // --- INYECCIÓN DE ESTILOS PARA LA BARRA DE DESPLAZAMIENTO ---
        const style = document.createElement('style');
        style.textContent = `.scrollable-results-pago { max-height: 300px; overflow-y: auto; }`;
        document.head.appendChild(style);

        // --- ELEMENTOS DEL DOM ---
        const searchInput = document.getElementById('proveedor-search');
     
           const searchResults = document.getElementById('search-results-pago');
        const proveedorIdInput = document.getElementById('proveedor_id');
        const categoriaSelect = document.getElementById('categoria_id_pago');
        const fechaInput = document.getElementById('fecha');
        const importeInput = document.getElementById('importe');
        const btnConfirmarMovimiento = document.getElementById('btn-confirmar-movimiento-pago');
        const btnConfirmarWrapper = document.getElementById('btn-confirmar-wrapper-pago');
        const confirmarTooltip = new bootstrap.Tooltip(btnConfirmarWrapper);
        const historialContainer = document.getElementById('historial-proveedor-container');
        const checkAjuste = document.getElementById('es_ajuste_pago');
        const btnClearProveedorSelection = document.getElementById('btn-clear-proveedor-selection');
        
        // --- MODALES ---
        const modalAgregarProveedor = new bootstrap.Modal(document.getElementById('modal-agregar-proveedor'));
        const modalConfirmarEliminarProveedor = new bootstrap.Modal(document.getElementById('modal-confirmar-eliminar-proveedor'));
        const modalConfirmarEliminarMovimiento = new bootstrap.Modal(document.getElementById('modal-confirmar-eliminar-movimiento-pago'));
        const modalConfirmarAjuste = new bootstrap.Modal(document.getElementById('modal-confirmar-ajuste-pago'));
        const modalConfirmarGestion = new bootstrap.Modal(document.getElementById('modal-confirmar-gestion-pago'));
        const modalConfirmarRestablecer = new bootstrap.Modal(document.getElementById('modal-confirmar-restablecer-pago'));
        const modalConfirmarGestionBody = document.getElementById('modal-confirmar-gestion-body-pago');
        const btnConfirmarGestionFinal = document.getElementById('btn-confirmar-gestion-final-pago');

        const btnEliminarProveedorModal = document.getElementById('btn-eliminar-proveedor-modal');
        if (btnEliminarProveedorModal) {
            btnEliminarProveedorModal.addEventListener('click', () => {
                modalAgregarProveedor.hide();

                const palabras = ['eliminar', 'borrar', 'quitar'];
                const palabra = palabras[Math.floor(Math.random() * palabras.length)];
                document.getElementById('palabra-confirmacion-pago').textContent = palabra;
                document.getElementById('input-confirmacion-pago').value = '';
                document.getElementById('btn-confirmar-eliminacion-final-pago').disabled = true;
                modalConfirmarEliminarProveedor.show();
        
            });
        }

        document.getElementById('input-confirmacion-pago').addEventListener('input', function() {
            const palabra = document.getElementById('palabra-confirmacion-pago').textContent;
            document.getElementById('btn-confirmar-eliminacion-final-pago').disabled = this.value.toLowerCase() !== palabra;
        });
        document.getElementById('btn-confirmar-eliminacion-final-pago').addEventListener('click', async () => {
            const id = document.getElementById('modal-proveedor-id').value;
            if (!id) return;
            try {
                const response = await fetch(`/pago/api/proveedores/${id}`, { method: 'DELETE' });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Error al eliminar.');
                
                window.showToast(result.message, 'success');
                modalConfirmarEliminarProveedor.hide();

                if (proveedorIdInput.value === id) {
                    resetearSeleccionProveedor();
                }
            } catch(error) {
                window.showToast(error.message, 'danger');
            }
        });
        
        const modalConfirmarGestionEl = document.getElementById('modal-confirmar-gestion-pago');
        if (modalConfirmarGestionEl) {
            modalConfirmarGestionEl.addEventListener('shown.bs.modal', () => {
                const backdrops = document.querySelectorAll('.modal-backdrop.fade.show');
                if (backdrops.length > 1) backdrops[backdrops.length - 1].style.zIndex = 1056;
            });
        }
        
        const checkAjustePago = document.getElementById('es_ajuste_pago');
        if (checkAjustePago && importeInput) {
            const labelAjustePago = document.querySelector('label[for="es_ajuste_pago"]');
            const infoIcon = checkAjustePago.closest('.d-flex').querySelector('.info-icon');

            const actualizarEstiloImporte = () => {
                if (checkAjustePago.checked) {
                    if (labelAjustePago) labelAjustePago.classList.remove('text-muted');
                    if (infoIcon) infoIcon.classList.remove('text-muted');
                    importeInput.classList.add('text-ingreso-regular');
                } else {
                    if (labelAjustePago) labelAjustePago.classList.add('text-muted');
                    if (infoIcon) infoIcon.classList.add('text-muted');
                    importeInput.classList.remove('text-ingreso-regular');
                }
            };
            checkAjustePago.addEventListener('change', actualizarEstiloImporte);
            actualizarEstiloImporte();
        }

        function checkFormValidity() {
            const isFormValid = proveedorIdInput.value.trim() !== '' && fechaInput.value.trim() !== '' && importeInput.value.trim() !== '' && parseFloat(importeInput.value) > 0 && categoriaSelect.value.trim() !== '';
            btnConfirmarMovimiento.disabled = !isFormValid;
            if (isFormValid) {
                confirmarTooltip.disable();
            } else {
                confirmarTooltip.enable();
            }
        }

        const comentarioTextarea = document.getElementById('comentarios');
        const charCounter = document.getElementById('char-counter-pago');
        const btnClearComentario = document.getElementById('btn-clear-comentario-pago');

        if (comentarioTextarea && charCounter && btnClearComentario) {
            const autoGrow = () => {
                comentarioTextarea.style.height = 'auto';
                comentarioTextarea.style.height = (comentarioTextarea.scrollHeight) + 'px';
            };

            const updateCounter = () => {
                const count = comentarioTextarea.value.length;
                charCounter.textContent = `${count} / 140`;
                btnClearComentario.classList.toggle('d-none', count === 0);
                charCounter.classList.toggle('d-none', count === 0);
            };
            comentarioTextarea.addEventListener('input', () => {
                updateCounter();
                autoGrow();
            });
            btnClearComentario.addEventListener('click', () => {
                comentarioTextarea.value = '';
                updateCounter();
                autoGrow();
                comentarioTextarea.focus();
            });
            updateCounter();
            autoGrow();
        }

        const modalidadSelect = document.getElementById('modalidad-select-pago');
        const modalGestionModalidadesEl = document.getElementById('modal-gestion-modalidades-pago');
        if (modalidadSelect && modalGestionModalidadesEl) {
            const modalOtraModalidad = new bootstrap.Modal(document.getElementById('modal-otra-modalidad-pago'));
            const nuevaModalidadInput = document.getElementById('input-nueva-modalidad-pago');
            let previousModalidadValue = modalidadSelect.value;

            modalidadSelect.addEventListener('focus', function() { previousModalidadValue = this.value; });
            modalidadSelect.addEventListener('change', function() {
                if (this.value === 'Otra...') {
                    nuevaModalidadInput.value = '';
                    modalOtraModalidad.show();
                }
            });
            document.getElementById('btn-guardar-nueva-modalidad-pago').addEventListener('click', function() {
                const nuevaModalidad = nuevaModalidadInput.value.trim();
                
                if (!nuevaModalidad) {
                    modalidadSelect.value = previousModalidadValue;
                    modalOtraModalidad.hide();
                    return;
                }

                const existingOptions = Array.from(modalidadSelect.options).map(opt => opt.text.toLowerCase());
                if (existingOptions.includes(nuevaModalidad.toLowerCase())) {
                    window.showToast('Esa modalidad ya existe.', 'danger');
                    return;
                }
                
                const existingCustomOption = modalidadSelect.querySelector('.custom-modalidad');
                if (existingCustomOption) existingCustomOption.remove();
               
                const newOption = new Option(nuevaModalidad, nuevaModalidad, true, true);
                newOption.classList.add('custom-modalidad');
                modalidadSelect.insertBefore(newOption, modalidadSelect.querySelector('option[value="Otra..."]'));
                
                modalOtraModalidad.hide();
            });

            modalGestionModalidadesEl.addEventListener('show.bs.modal', populateModalidadesGestion);
            modalGestionModalidadesEl.addEventListener('hidden.bs.modal', () => refreshModalidadSelect());
        }

        async function refreshModalidadSelect(selectedValue) {
            try {
                const response = await fetch('/pago/api/modalidades');
                if (!response.ok) throw new Error('No se pudieron cargar las modalidades.');
                const modalidades = await response.json();
                
                const customOption = modalidadSelect.querySelector('.custom-modalidad');
                const currentValue = selectedValue || (customOption ? customOption.value : modalidadSelect.value);
                
                modalidadSelect.innerHTML = '';
                modalidades.forEach(mod => modalidadSelect.add(new Option(mod.nombre, mod.nombre)));
                if (customOption) modalidadSelect.add(customOption);
                modalidadSelect.add(new Option('Otra...', 'Otra...'));

                if (Array.from(modalidadSelect.options).some(opt => opt.value === currentValue)) {
                    modalidadSelect.value = currentValue;
                } else if (modalidades.length > 0) {
                    modalidadSelect.value = modalidades[0].nombre;
                }
            } catch (error) {
                window.showToast(error.message, 'danger');
            }
        }

        async function populateModalidadesGestion() {
            try {
                const response = await fetch('/pago/api/modalidades');
                if (!response.ok) throw new Error('No se pudieron cargar las modalidades.');
                const modalidades = await response.json();
                const listaModalidadesGestion = document.getElementById('lista-modalidades-gestion-pago');
                listaModalidadesGestion.innerHTML = '';

                modalidades.forEach(mod => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item d-flex justify-content-between align-items-center';
                    
                    const nameSpan = document.createElement('span');
                    nameSpan.className = `flex-grow-1 ${mod.es_editable ? '' : 'text-muted'}`;
                    nameSpan.textContent = mod.nombre;
                    li.appendChild(nameSpan);
                   
                    if (mod.es_editable) {
                        const actionsDiv = document.createElement('div');
                        actionsDiv.className = 'd-flex gap-1';
                    
                        const editBtn = document.createElement('button');
                        editBtn.className = 'btn btn-sm btn-icon btn-primary';
                        editBtn.innerHTML = '<i class="fa-solid fa-pencil"></i>';
                        editBtn.title = 'Editar modalidad';

                        const deleteBtn = document.createElement('button');
                        deleteBtn.className = 'btn btn-sm btn-icon btn-danger';
                        deleteBtn.innerHTML = '<i class="fa-solid fa-trash"></i>';
                        deleteBtn.title = 'Eliminar modalidad';

                        actionsDiv.appendChild(editBtn);
                        actionsDiv.appendChild(deleteBtn);
                        li.appendChild(actionsDiv);
      
                        editBtn.addEventListener('click', () => {
                            if (li.querySelector('input.form-control-sm')) return;

                            editBtn.disabled = true;
                            deleteBtn.disabled = true;
                            nameSpan.style.display = 'none';
                            actionsDiv.style.display = 'none';

                            const editContainer = document.createElement('div');
                            editContainer.className = 'd-flex align-items-center gap-2 flex-grow-1';
                            
                            const input = document.createElement('input');
                            input.type = 'text';
                            input.value = mod.nombre;
                            input.className = 'form-control form-control-sm';
                 
                            const saveBtn = document.createElement('button');
                            saveBtn.className = 'btn btn-sm btn-icon btn-primary';
                            saveBtn.innerHTML = '<i class="fa-solid fa-circle-check"></i>';
                            saveBtn.title = 'Guardar cambios';
        
                            const cancelBtn = document.createElement('button');
                            cancelBtn.className = 'btn btn-sm btn-icon btn-primary';
                            cancelBtn.innerHTML = '<i class="fa-solid fa-circle-xmark"></i>';
                            cancelBtn.title = 'Cancelar edición';
        
                            editContainer.appendChild(input);
                            editContainer.appendChild(saveBtn);
                            editContainer.appendChild(cancelBtn);
                            li.prepend(editContainer);
                            input.focus();

                            const cancelEdit = () => {
                                editContainer.remove();
                                nameSpan.style.display = 'block';
                                actionsDiv.style.display = 'flex';
                                editBtn.disabled = false;
                                deleteBtn.disabled = false;
                            };
        
                            cancelBtn.addEventListener('click', cancelEdit);
                            saveBtn.addEventListener('click', async () => {
                                const newValue = input.value.trim();
                                if (newValue && newValue !== mod.nombre) {
                                     try {
                                        const saveResponse = await fetch(`/pago/api/modalidades/${mod.id}`, {
                                            method: 'PUT',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({ nombre: newValue })
                                        });
                                        const result = await saveResponse.json();
                                         if (!saveResponse.ok) throw new Error(result.message);
                                         mod.nombre = newValue;
                                        nameSpan.textContent = newValue;
                                        window.showToast('Modalidad actualizada.', 'success');
                                        cancelEdit();
                                    } catch (error) {
                                        window.showToast(error.message, 'danger');
                                    }
                                } else {
                                    cancelEdit();
                                }
                            });
                        });

                        deleteBtn.addEventListener('click', () => {
                             modalConfirmarGestionBody.innerHTML = `¿Seguro que desea eliminar la modalidad <strong>${mod.nombre}</strong>? Los movimientos asociados se cambiarán a <strong>Efectivo</strong>.`;
                             modalConfirmarGestion.show();
                             btnConfirmarGestionFinal.onclick = async () => {
                                 try {
                                     const delResponse = await fetch(`/pago/api/modalidades/${mod.id}`, { method: 'DELETE' });
                                     const result = await delResponse.json();
                                     if (!delResponse.ok) throw new Error(result.message);
                                     window.showToast(result.message, 'success');
                                     populateModalidadesGestion();
                                 } catch (error) { window.showToast(error.message, 'danger');
                                 }
                                 finally { modalConfirmarGestion.hide();
                                 }
                             };
                        });
                    }
                    listaModalidadesGestion.appendChild(li);
                });
            } catch (error) { window.showToast(error.message, 'danger'); }
        }

        document.getElementById('form-agregar-modalidad-pago').addEventListener('submit', async (e) => {
            e.preventDefault();
            const input = document.getElementById('input-nueva-modalidad-gestion-pago');
            const nombre = input.value.trim();
            if (!nombre) return;

            const listaModalidadesGestion = document.getElementById('lista-modalidades-gestion-pago');
           const existingNames = Array.from(listaModalidadesGestion.querySelectorAll('li span.flex-grow-1'))
                                    .map(span => span.textContent.trim().toLowerCase());
            
            if (existingNames.includes(nombre.toLowerCase())) {
                window.showToast('Esa modalidad ya existe.', 'danger');
                return;
            }

            try {
                 const response = await fetch('/pago/api/modalidades', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ nombre }) });
                 const result = await response.json();
                if (!response.ok) throw new Error(result.message);
                input.value = '';
                 populateModalidadesGestion();
                window.showToast('Modalidad agregada.', 'success');
            } catch (error) { window.showToast(error.message, 'danger'); }
        });

        const modalGestionCategoriasEl = document.getElementById('modal-gestion-categorias-pago');
        if (modalGestionCategoriasEl) {
            modalGestionCategoriasEl.addEventListener('show.bs.modal', populateCategoriasGestion);
            modalGestionCategoriasEl.addEventListener('hidden.bs.modal', () => refreshAllCategorySelects(categoriaSelect.value));
        }

        async function refreshAllCategorySelects(newValueToSelect) {
            try {
                const response = await fetch(`/pago/api/categorias?tipo=proveedor`);
                if (!response.ok) throw new Error('No se pudieron cargar las categorías.');
                const categories = await response.json();
                document.querySelectorAll(`select[id*="categoria"]`).forEach(select => {
                    const currentValue = select.value;
                    select.innerHTML = '<option value="">-- Seleccione --</option>';
                    categories.forEach(cat => {
                        const option = new Option(cat.nombre, cat.id);
                        option.dataset.editable = cat.es_editable;
                        select.add(option);
                    });
                    select.value = (select.id === 'categoria_id_pago') ? newValueToSelect : currentValue;
                 });
                if (newValueToSelect) categoriaSelect.value = newValueToSelect;
            } catch (error) { window.showToast(error.message, 'danger');
            }
        }

        async function populateCategoriasGestion() {
            try {
                const response = await fetch(`/pago/api/categorias?tipo=proveedor`);
                if (!response.ok) throw new Error('No se pudieron cargar las categorías.');
                const categorias = await response.json();
                const listaCategoriasGestion = document.getElementById('lista-categorias-gestion-pago');
                listaCategoriasGestion.innerHTML = '';
        
                const categoriasEditables = categorias.filter(cat => cat.es_editable === 1);
        
                categoriasEditables.forEach(cat => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item d-flex justify-content-between align-items-center';
                    
                    const nameSpan = document.createElement('span');
                    nameSpan.className = 'flex-grow-1';
                    nameSpan.textContent = cat.nombre;
                    li.appendChild(nameSpan);
        
                    if (cat.es_editable) {
                        const actionsDiv = document.createElement('div');
                        actionsDiv.className = 'd-flex gap-1';
        
                        const editBtn = document.createElement('button');
                        editBtn.className = 'btn btn-sm btn-icon btn-primary';
                        editBtn.innerHTML = '<i class="fa-solid fa-pencil"></i>';
                        editBtn.title = 'Editar categoría';
        
                        const deleteBtn = document.createElement('button');
                        deleteBtn.className = 'btn btn-sm btn-icon btn-danger';
                        deleteBtn.innerHTML = '<i class="fa-solid fa-trash"></i>';
                        deleteBtn.title = 'Eliminar categoría';
        
                        actionsDiv.appendChild(editBtn);
                        actionsDiv.appendChild(deleteBtn);
                        li.appendChild(actionsDiv);
                        editBtn.addEventListener('click', () => {
                            if (li.querySelector('input.form-control-sm')) return;
        
                            editBtn.disabled = true;
                            deleteBtn.disabled = true;
                            nameSpan.style.display = 'none';
                            actionsDiv.style.display = 'none';
        
                            const editContainer = document.createElement('div');
                            editContainer.className = 'd-flex align-items-center gap-2 flex-grow-1';
                            
                            const input = document.createElement('input');
                            input.type = 'text';
                            input.value = cat.nombre;
                            input.className = 'form-control form-control-sm';
                 
                            const saveBtn = document.createElement('button');
                            saveBtn.className = 'btn btn-sm btn-icon btn-primary';
                            saveBtn.innerHTML = '<i class="fa-solid fa-circle-check"></i>';
                            saveBtn.title = 'Guardar cambios';
        
                            const cancelBtn = document.createElement('button');
                            cancelBtn.className = 'btn btn-sm btn-icon btn-primary';
                            cancelBtn.innerHTML = '<i class="fa-solid fa-circle-xmark"></i>';
                            cancelBtn.title = 'Cancelar edición';
        
                            editContainer.appendChild(input);
                            editContainer.appendChild(saveBtn);
                            editContainer.appendChild(cancelBtn);
                            li.prepend(editContainer);
                            input.focus();
                            const cancelEdit = () => {
                                editContainer.remove();
                                nameSpan.style.display = 'block';
                                actionsDiv.style.display = 'flex';
                                editBtn.disabled = false;
                                deleteBtn.disabled = false;
                            };
        
                            cancelBtn.addEventListener('click', cancelEdit);
                            saveBtn.addEventListener('click', async () => {
                                const newValue = input.value.trim();
                                if (newValue && newValue !== cat.nombre) {
                                     try {
                                        const saveResponse = await fetch(`/pago/api/categorias/${cat.id}`, {
                                            method: 'PUT',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({ nombre: newValue })
                                        });
                                        const result = await saveResponse.json();
                                         if (!saveResponse.ok) throw new Error(result.message);
                                         cat.nombre = newValue;
                                        nameSpan.textContent = newValue;
                                        window.showToast('Categoría actualizada.', 'success');
                                        cancelEdit();
                                    } catch (error) {
                                        window.showToast(error.message, 'danger');
                                    }
                                } else {
                                    cancelEdit();
                                }
                            });
                        });
        
                        deleteBtn.addEventListener('click', () => {
                            modalConfirmarGestionBody.innerHTML = `¿Seguro que desea eliminar la categoría <strong>${cat.nombre}</strong>? Los movimientos asociados pasarán a <strong>Egresos sin categoría</strong>.`;
                            modalConfirmarGestion.show();
                        
                            btnConfirmarGestionFinal.onclick = async () => {
                                try {
                                    const delResponse = await fetch(`/pago/api/categorias/${cat.id}`, { method: 'DELETE' });
                                     const result = await delResponse.json();
                                    if (!delResponse.ok) throw new Error(result.message);
                                     window.showToast(result.message, 'success');
                                    populateCategoriasGestion();
                                } catch (error) {
                                     window.showToast(error.message, 'danger');
                                } finally {
                                    modalConfirmarGestion.hide();
                                }
                            };
                        });
                    } else {
                        nameSpan.classList.add('text-muted');
                    }
                    listaCategoriasGestion.appendChild(li);
                });
            } catch (error) {
                window.showToast(error.message, 'danger');
            }
        }

        document.getElementById('form-agregar-categoria-pago').addEventListener('submit', async (e) => {
            e.preventDefault();
            const input = document.getElementById('input-nueva-categoria-gestion-pago');
            const nombre = input.value.trim();
            if (!nombre) return;

            const listaCategoriasGestion = document.getElementById('lista-categorias-gestion-pago');
           const existingNames = Array.from(listaCategoriasGestion.querySelectorAll('li span.flex-grow-1'))
                                    .map(span => span.textContent.trim().toLowerCase());

            if (existingNames.includes(nombre.toLowerCase())) {
                window.showToast('Esa categoría ya existe.', 'danger');
                return;
            }

            try {
                 const response = await fetch('/pago/api/categorias', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ nombre, tipo: 'proveedor' }) });
                 const result = await response.json();
                if (!response.ok) throw new Error(result.message);
                input.value = '';
                 populateCategoriasGestion();
                window.showToast('Categoría agregada.', 'success');
            } catch (error) { window.showToast(error.message, 'danger'); }
        });

        async function cargarHistorialProveedor(proveedorId) {
            try {
                const response = await fetch(`/pago/api/proveedores/${proveedorId}/movimientos`);
                const data = await response.json();
                if (!response.ok) throw new Error(data.message || 'No se pudo cargar el historial.');
                historialContainer.innerHTML = data.html;
                const tooltipTriggerList = historialContainer.querySelectorAll('[data-bs-toggle="tooltip"]');
                [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
            } catch (error) {
                window.showToast(error.message, 'danger');
                historialContainer.innerHTML = '<p class="text-center text-danger">Error al cargar el historial.</p>';
            }
        }

        function seleccionarProveedor(proveedor) {
            proveedorIdInput.value = proveedor.id;
            searchInput.value = `${proveedor.nombre} (${proveedor.id})`;
            searchInput.disabled = true;
            searchResults.innerHTML = '';
            
            btnClearProveedorSelection.classList.remove('d-none');
            
            const defaultOption = Array.from(categoriaSelect.options).find(opt => opt.dataset.editable === '0');
            categoriaSelect.value = proveedor.categoria_id || (defaultOption ? defaultOption.value : "");
            cargarHistorialProveedor(proveedor.id);
            checkFormValidity();
        }

        function resetearSeleccionProveedor() {
            proveedorIdInput.value = '';
            const defaultOption = Array.from(categoriaSelect.options).find(opt => opt.dataset.editable === '0');
            categoriaSelect.value = defaultOption ? defaultOption.value : categoriaSelect.options[0].value;
            searchInput.value = '';
            searchInput.disabled = false;
            searchInput.focus();
            historialContainer.innerHTML = '';
            
            btnClearProveedorSelection.classList.add('d-none');
            
            checkFormValidity();
        }

        function restablecerFormularioCompleto() {
            resetearSeleccionProveedor();
            pagoPage.reset();
            fechaInput.value = new Date().toISOString().slice(0, 10);
            if (checkAjustePago) {
                checkAjustePago.checked = false;
                checkAjustePago.dispatchEvent(new Event('change'));
            }
            if (comentarioTextarea) {
                comentarioTextarea.value = '';
                comentarioTextarea.dispatchEvent(new Event('input'));
            }
            checkFormValidity();
            window.showToast('Formulario restablecido.', 'success');
        }
        
        function checkAndApplyScroll() {
            const itemCount = searchResults.children.length;
            searchResults.classList.toggle('scrollable-results-pago', itemCount > 5);
        }

        async function mostrarProveedoresRecientes() {
            if (proveedorIdInput.value) { searchResults.innerHTML = '';
                return; }
            try {
                const response = await fetch('/pago/api/proveedores/recientes');
                const proveedoresRecientes = await response.json();
                if (!response.ok) throw new Error('No se pudieron cargar los proveedores recientes.');
                
                searchResults.innerHTML = '';
                if (proveedoresRecientes.length > 0) {
                    const header = document.createElement('li');
                    header.className = 'list-group-item border-start border-end border-bottom small bg-light text-muted fw-semibold';
                    header.textContent = 'Últimos utilizados';
                    searchResults.appendChild(header);
                    proveedoresRecientes.forEach(p => {
                        const item = document.createElement('a');
                        item.href = '#';
                        item.className = 'list-group-item list-group-item-action bg-light d-flex align-items-center';
               
                          item.innerHTML = `<span class="badge rounded-pill me-2" style="background-color: #cecbd1ff; color: #48536b">${p.id}</span>${p.nombre}`;
                        item.addEventListener('click', (e) => { e.preventDefault(); seleccionarProveedor(p); });
                        searchResults.appendChild(item);
                    });
                }
                checkAndApplyScroll();
            } catch (error) {
                window.showToast(error.message, 'danger');
            }
        }
        
        async function buscarTodosLosProveedores() {
            try {
                const response = await fetch('/pago/api/proveedores/todos');
                const proveedores = await response.json();
                if (!response.ok) throw new Error('No se pudo cargar el listado completo de proveedores.');
                searchResults.innerHTML = '';
                if (proveedores.length > 0) {
                    const header = document.createElement('li');
                    header.className = 'list-group-item list-group-item-secondary small bg-light text-muted fw-semibold';
                    header.textContent = `Mostrando ${proveedores.length} proveedores`;
                    searchResults.appendChild(header);
                    proveedores.forEach(p => {
                        const item = document.createElement('a');
                        item.href = '#';
                        item.className = 'list-group-item list-group-item-action bg-light d-flex align-items-center';
               
                          item.innerHTML = `<span class="badge rounded-pill me-2" style="background-color: #cecbd1ff; color: #48536b">${p.id}</span>${p.nombre}`;
                        item.addEventListener('click', (e) => { e.preventDefault(); seleccionarProveedor(p); });
                        searchResults.appendChild(item);
                    });
                } else {
                     const noResultsItem = document.createElement('li');
                     noResultsItem.className = 'list-group-item text-muted';
                     noResultsItem.textContent = 'No hay proveedores registrados.';
                     searchResults.appendChild(noResultsItem);
                }
                checkAndApplyScroll();
            } catch (error) {
                window.showToast(error.message, 'danger');
            }
        }

        searchInput.addEventListener('focus', () => {
            if (searchInput.value.trim() === '') mostrarProveedoresRecientes();
        });
        searchInput.addEventListener('blur', () => {
            setTimeout(() => { searchResults.innerHTML = ''; }, 200);
        });
        searchInput.addEventListener('input', async () => {
            const query = searchInput.value;
            if (query === '*') { buscarTodosLosProveedores(); return; }
            if (query.length === 0) { mostrarProveedoresRecientes(); return; }
            if (query.length < 2) { searchResults.innerHTML = ''; return; }

            try {
                const response = await fetch(`/pago/api/proveedores?q=${query}`);
                const proveedores = await response.json();
                if (!response.ok) throw new Error('Error al buscar.');
                
                searchResults.innerHTML = '';
                const regex = new RegExp(query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');

                proveedores.forEach(p => {
                const item = document.createElement('a');
                item.href = '#';
                  item.className = 'list-group-item list-group-item-action bg-light d-flex justify-content-between align-items-center';
                const nombreResaltado = p.nombre.replace(regex, `<strong class="search-highlight">$&</strong>`);
                const idResaltado = p.id.toString().replace(regex, `<strong class="search-highlight">$&</strong>`);
                let htmlPrincipal = `<div><span class="badge bg-secondary rounded-pill me-2">${idResaltado}</span>${nombreResaltado}</div>`;
                let htmlCuit = '';
                if (p.cuit && p.cuit.match(regex)) {
                    const cuitResaltado = p.cuit.replace(regex, `<strong class="search-highlight">$&</strong>`);
                    htmlCuit = `<div class="text-muted small">CUIT: ${cuitResaltado}</div>`;
                }
                item.innerHTML = htmlPrincipal + htmlCuit;
                item.addEventListener('click', (e) => { e.preventDefault(); seleccionarProveedor(p); });
                searchResults.appendChild(item);
            });
                checkAndApplyScroll();
            } catch (error) {
                window.showToast(error.message, 'danger');
            }
        });

        btnClearProveedorSelection.addEventListener('click', resetearSeleccionProveedor);
        document.getElementById('btn-guardar-proveedor').addEventListener('click', async () => {
            const id = document.getElementById('modal-proveedor-id').value;
            const data = {
                nombre: document.getElementById('modal-proveedor-nombre').value,
                cuit: document.getElementById('modal-proveedor-cuit').value,
                telefono: document.getElementById('modal-proveedor-telefono').value,
                email: document.getElementById('modal-proveedor-email').value,
                categoria_id: document.getElementById('modal-proveedor-categoria').value,
                comentarios: document.getElementById('modal-proveedor-comentarios').value,
            };
            if (!data.nombre || !data.cuit) { window.showToast('Nombre y CUIT son obligatorios.', 'danger'); return; }
            
             try {
                const response = await fetch(id ? `/pago/api/proveedores/${id}` : '/pago/api/proveedores', {
                    method: id ? 'PUT' : 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Error al guardar.');
                
                modalAgregarProveedor.hide();
                window.showToast(`Proveedor ${id ? 'actualizado' : 'creado'} con éxito.`, 'success');
                seleccionarProveedor(result.newProveedor || result.updatedProveedor);
            } catch(error) {
                window.showToast(error.message, 'danger');
            }
        });
        
        async function procesarEnvioFormulario() {
            const formData = new FormData(pagoPage);
            const data = Object.fromEntries(formData.entries());
            if (!data.proveedor_id || !data.categoria_id || !data.importe || data.importe <= 0) {
                window.showToast('Complete todos los campos obligatorios.', 'danger');
                return;
            }
            try {
                const response = await fetch(pagoPage.action, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Error al procesar el egreso.');
                if (result.redirectTo) {
                    window.location.href = result.redirectTo;
                } else {
                    window.showToast(result.message, 'success');
                    importeInput.value = '';
                    if (comentarioTextarea) {
                        comentarioTextarea.value = '';
                        comentarioTextarea.dispatchEvent(new Event('input'));
                    }
                    cargarHistorialProveedor(data.proveedor_id);
                    checkFormValidity();
                }
            } catch (error) {
                window.showToast(error.message, 'danger');
            }
        }

        pagoPage.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (checkAjuste.checked) {
                modalConfirmarAjuste.show();
            } else {
                procesarEnvioFormulario();
             }
        });
        document.getElementById('btn-continuar-ajuste-pago').addEventListener('click', () => {
            modalConfirmarAjuste.hide();
            procesarEnvioFormulario();
        });
        document.getElementById('btn-volver-ajuste-pago').addEventListener('click', () => {
            checkAjuste.checked = false;
            checkAjuste.dispatchEvent(new Event('change'));
        });

        // --- LÓGICA PARA ELIMINAR MOVIMIENTO DESDE HISTORIAL ---
        historialContainer.addEventListener('click', function(event) {
            const deleteButton = event.target.closest('.btn-eliminar-movimiento-historial');
            if (deleteButton) {
                const movId = deleteButton.dataset.id;
                const modalConfirmBtn = document.getElementById('btn-confirmar-eliminacion-movimiento-final-pago');
                if (modalConfirmBtn) {
                    modalConfirmBtn.dataset.id = movId;
                    modalConfirmarEliminarMovimiento.show();
                }
            }
        });
        
        document.getElementById('btn-confirmar-eliminacion-movimiento-final-pago').addEventListener('click', async function() {
            const movId = this.dataset.id;
            if (!movId) return;
            try {
                const response = await fetch(`/venta/api/movimientos/${movId}`, { method: 'DELETE' });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Error al eliminar.');
                window.showToast(result.message, 'success');
                // Vuelve a cargar el historial del proveedor para reflejar el cambio.
                if (proveedorIdInput.value) {
                    cargarHistorialProveedor(proveedorIdInput.value);
                }
            } catch(error) {
                window.showToast(error.message, 'danger');
            } finally {
                modalConfirmarEliminarMovimiento.hide();
            }
        });


        const modalGestionarProveedoresEl = document.getElementById('modal-gestionar-proveedores');
        if (modalGestionarProveedoresEl) {
            const modalGestionarProveedores = new bootstrap.Modal(modalGestionarProveedoresEl);
            const listaGestionProveedores = document.getElementById('lista-gestion-proveedores');
            const inputBuscarGestion = document.getElementById('input-buscar-gestion-proveedor');
            const btnNuevoProveedorGestion = document.getElementById('btn-nuevo-proveedor-gestion');
            async function populateProveedoresGestion() {
            try {
                const response = await fetch('/pago/api/proveedores/todos');
                if (!response.ok) throw new Error('No se pudo cargar la lista de proveedores.');
                const proveedores = await response.json();
                
                listaGestionProveedores.innerHTML = '';
                if (proveedores.length === 0) {
                    listaGestionProveedores.innerHTML = '<li class="list-group-item text-muted">No hay proveedores registrados.</li>';
                    return;
                }

                proveedores.forEach(proveedor => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item d-flex justify-content-between align-items-center';
                
                    li.dataset.nombre = proveedor.nombre.toLowerCase();
                    li.dataset.id = proveedor.id.toString();

                    const nombreSpan = document.createElement('span');
                    nombreSpan.innerHTML = `${proveedor.nombre}  <span class="text-muted small me-2">(${proveedor.id})</span>`;
                    li.appendChild(nombreSpan);

                    const editBtn = document.createElement('button');
                    editBtn.className = 'btn btn-sm btn-icon btn-primary';
                    editBtn.innerHTML = '<i class="fa-solid fa-user-gear"></i>';
                    editBtn.title = 'Editar Proveedor';
                    editBtn.addEventListener('click', async () => {
                        modalGestionarProveedores.hide();
                        const response = await fetch(`/pago/api/proveedores/${proveedor.id}`);
                        const proveedorData = await response.json();
                
                        if (response.ok) {
                            document.getElementById('modal-proveedor-label').textContent = 'Editar Proveedor';
                            document.getElementById('modal-proveedor-id').value = proveedorData.id;
                            document.getElementById('modal-proveedor-nombre').value = proveedorData.nombre;
                            document.getElementById('modal-proveedor-cuit').value = proveedorData.cuit;
                            document.getElementById('modal-proveedor-telefono').value = proveedorData.telefono;
                            document.getElementById('modal-proveedor-email').value = proveedorData.email;
                            document.getElementById('modal-proveedor-categoria').value = proveedorData.categoria_id || '';
                            document.getElementById('modal-proveedor-comentarios').value = proveedorData.observaciones;
                            document.getElementById('btn-eliminar-proveedor-modal').classList.remove('d-none');
                            modalAgregarProveedor.show();
                        } else {
                            window.showToast('No se pudo cargar la información del proveedor.', 'danger');
                        }
                    });
                    li.appendChild(editBtn);
                    listaGestionProveedores.appendChild(li);
                });

            } catch (error) {
                window.showToast(error.message, 'danger');
                listaGestionProveedores.innerHTML = '<li class="list-group-item text-danger">Error al cargar proveedores.</li>';
            }
         }

            modalGestionarProveedoresEl.addEventListener('show.bs.modal', populateProveedoresGestion);
          inputBuscarGestion.addEventListener('input', function() {
            const normalizeText = (text) => {
                return text.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase();
             };

            const filtro = this.value.toLowerCase();
            const filtroNormalizado = normalizeText(filtro);
            const items = listaGestionProveedores.querySelectorAll('li[data-nombre]');
    
            items.forEach(item => {
                const nombre = item.dataset.nombre;
                const id = item.dataset.id;
              
                const nombreNormalizado = normalizeText(nombre);
                const coincide = nombreNormalizado.includes(filtroNormalizado) || id.includes(filtro);
                
                item.classList.toggle('d-none', !coincide);
            });
              });


                btnNuevoProveedorGestion.addEventListener('click', () => {
                modalGestionarProveedores.hide();
                const form = document.getElementById('form-agregar-proveedor');
                if (form) form.reset();
                document.getElementById('modal-proveedor-label').textContent = 'Agregar Nuevo Proveedor';
                document.getElementById('btn-eliminar-proveedor-modal').classList.add('d-none');
                 document.getElementById('modal-proveedor-id').value = '';

                modalAgregarProveedor.show();
            });
        }

        // --- INICIALIZACIÓN FINAL ---
        [fechaInput, importeInput, categoriaSelect].forEach(el => {
            el.addEventListener('input', checkFormValidity);
            el.addEventListener('change', checkFormValidity);
        });
        if (proveedorIdInput.value) {
            cargarHistorialProveedor(proveedorIdInput.value);
        }
        
        checkFormValidity();
        const btnConfirmarRestablecerFinal = document.getElementById('btn-confirmar-restablecer-final-pago');
        if (btnConfirmarRestablecerFinal) {
            btnConfirmarRestablecerFinal.addEventListener('click', () => {
                restablecerFormularioCompleto();
                modalConfirmarRestablecer.hide();
            });
        }
    }
});


----- C:\Users\Javier\Desktop\finanzas-app\public\js\registro.client.js -----
document.addEventListener('DOMContentLoaded', function () {
    // --- INICIO CORRECCIÓN: LÓGICA PARA MENSAJE DE CONFIRMACIÓN DE ACTUALIZACIÓN ---
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('update') && urlParams.get('update') === 'success') {
        window.showToast('Movimiento actualizado con éxito.', 'success');
        // Limpiar el parámetro de la URL para evitar que el mensaje se muestre de nuevo al recargar
        urlParams.delete('update');
        const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');
        window.history.replaceState({}, document.title, newUrl);
    }
    // --- FIN CORRECCIÓN ---

    // Inicializar Tooltips de Bootstrap
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));

    // --- LÓGICA PARA LOS BOTONES DE FILTRO DE TIPO ---
    const form = document.getElementById('registro-filtros-form');
    const tipoInput = document.getElementById('filtro_tipo');
    const tipoButtons = document.querySelectorAll('.tipo-btn');

    if (form && tipoInput && tipoButtons.length) {
        tipoButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Actualiza el valor del input oculto con el tipo seleccionado
                tipoInput.value = this.dataset.tipo;
                // Envía el formulario para aplicar el filtro
                form.submit();
            });
        });
    }

    // --- LÓGICA PARA EL BOTÓN DE ELIMINAR MOVIMIENTO ---
    const deleteModalEl = document.getElementById('modal-confirmar-eliminar-movimiento-registro');
    if (deleteModalEl) {
        const deleteModal = new bootstrap.Modal(deleteModalEl);
        const confirmDeleteBtn = document.getElementById('btn-confirmar-eliminacion-final-registro');
        let movementIdToDelete = null;

        // Escucha clics en todo el documento para delegar el evento
        document.body.addEventListener('click', function(event) {
            const deleteButton = event.target.closest('.btn-eliminar-movimiento-registro');
            if (deleteButton) {
                movementIdToDelete = deleteButton.dataset.id;
            }
        });

        // Cuando se confirma la eliminación en el modal
        confirmDeleteBtn.addEventListener('click', async () => {
            if (!movementIdToDelete) return;
            try {
                const response = await fetch(`/venta/api/movimientos/${movementIdToDelete}`, { method: 'DELETE' });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Error al eliminar.');
                
                const row = document.getElementById(`movimiento-row-${movementIdToDelete}`);
                if (row) row.remove();
                
                window.showToast(result.message, 'success');
            } catch (error) {
                window.showToast(error.message, 'danger');
            } finally {
                deleteModal.hide();
                movementIdToDelete = null;
            }
        });
    }

    // --- LÓGICA PARA EL DATE RANGE PICKER ---
    const fechaDesdeInput = document.getElementById('fecha_desde');
    const fechaHastaInput = document.getElementById('fecha_hasta');
    const dateRangePicker = $('#daterange'); // Se necesita jQuery para daterangepicker

    if (fechaDesdeInput && fechaHastaInput && dateRangePicker.length) {
        const start = fechaDesdeInput.value ? moment(fechaDesdeInput.value) : null;
        const end = fechaHastaInput.value ? moment(fechaHastaInput.value) : null;

        dateRangePicker.daterangepicker({
            linkedCalendars: false,
            autoUpdateInput: false,
            autoApply: true,
            locale: {
                format: 'DD/MM/YYYY',
                applyLabel: 'Aplicar',
                cancelLabel: 'Limpiar',
                fromLabel: 'Desde',
                toLabel: 'Hasta',
                customRangeLabel: 'Personalizado',
                weekLabel: 'S',
                daysOfWeek: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sá'],
                monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                firstDay: 1
            },
            ranges: {
               'Hoy': [moment(), moment()],
               'Ayer': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
               'Últimos 7 Días': [moment().subtract(6, 'days'), moment()],
               'Este Mes': [moment().startOf('month'), moment().endOf('month')],
               'Este Año': [moment().startOf('year'), moment()]
            }
        });

        if (start && end) {
            dateRangePicker.val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
        }

        dateRangePicker.on('apply.daterangepicker', function(ev, picker) {
            $(this).val(picker.startDate.format('DD/MM/YYYY') + ' - ' + picker.endDate.format('DD/MM/YYYY'));
            fechaDesdeInput.value = picker.startDate.format('YYYY-MM-DD');
            fechaHastaInput.value = picker.endDate.format('YYYY-MM-DD');
        });

        dateRangePicker.on('cancel.daterangepicker', function(ev, picker) {
            $(this).val('');
            fechaDesdeInput.value = '';
            fechaHastaInput.value = '';
        });

        // --- INICIO DE LA CORRECCIÓN ---
        // Se agrega un evento para manejar la entrada manual de fechas en el campo.
        dateRangePicker.on('change', function() {
            const value = $(this).val();
            const dates = value.split(' - ');
            if (dates.length === 2) {
                const startDate = moment(dates[0], 'DD/MM/YYYY', true);
                const endDate = moment(dates[1], 'DD/MM/YYYY', true);
        
                if (startDate.isValid() && endDate.isValid()) {
                    // Actualiza los campos ocultos que se envían al servidor
                    fechaDesdeInput.value = startDate.format('YYYY-MM-DD');
                    fechaHastaInput.value = endDate.format('YYYY-MM-DD');
        
                    // Actualiza el estado interno del daterangepicker para que el calendario refleje la fecha escrita
                    const picker = $(this).data('daterangepicker');
                    picker.setStartDate(startDate);
                    picker.setEndDate(endDate);
                }
            }
        });
        // --- FIN DE LA CORRECCIÓN ---
    }
    
    // --- LÓGICA DEL BOTÓN RESTABLECER ---
    const btnRestablecer = document.getElementById('btn-restablecer-filtros');
    if (btnRestablecer) {
        btnRestablecer.addEventListener('click', () => {
            window.location.href = '/registro';
        });
    }
    
    // Función para habilitar/deshabilitar el botón de restablecer
    function checkResetButtonState() {
        const busquedaInput = document.getElementById('busqueda');
        if (!btnRestablecer || !tipoInput || !fechaDesdeInput || !fechaHastaInput || !busquedaInput) return;

        const hasBusqueda = busquedaInput.value.trim() !== '';
        const hasFecha = fechaDesdeInput.value.trim() !== '' && fechaHastaInput.value.trim() !== '';
        const hasTipo = tipoInput.value !== 'todos';
        
        // El botón se habilita si hay al menos un filtro aplicado
        if (hasBusqueda || hasFecha || hasTipo) {
            btnRestablecer.removeAttribute('disabled');
        } else {
            btnRestablecer.setAttribute('disabled', 'disabled');
        }
    }

    // Verificar el estado del botón al cargar la página
    checkResetButtonState();
});


----- C:\Users\Javier\Desktop\finanzas-app\public\js\reportes.client.js -----
// public/js/reportes.client.js

document.addEventListener('DOMContentLoaded', function () {
    const reportesPage = document.getElementById('form-reportes');
    if (reportesPage) {

        // --- INICIO CORRECCIÓN: LÓGICA PARA MENSAJE DE CONFIRMACIÓN DE ACTUALIZACIÓN ---
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('update') && urlParams.get('update') === 'success') {
            window.showToast('Movimiento actualizado con éxito.', 'success');
            // Limpiar el parámetro de la URL para evitar que el mensaje se muestre de nuevo al recargar
            urlParams.delete('update');
            const newUrl = window.location.pathname + '?' + urlParams.toString();
            window.history.replaceState({}, document.title, newUrl);
        }
        // --- FIN CORRECCIÓN ---

        function initializeTomSelect(selector, placeholder) {
            new TomSelect(selector, {
                plugins: ['remove_button'],
                create: false,
                maxItems: 10,
                placeholder: placeholder,
                render:{
                    item: function(data, escape) {
                        return `<div class="item">${escape(data.text)}</div>`;
                    },
                    option: function(data, escape) {
                        return `<div class="option">${escape(data.text)}</div>`;
                    }
                },
                onInitialize: function() {
                    if (this.items.length > 0) this.wrapper.classList.add('has-items');
                },
                onItemAdd: function() {
                    this.wrapper.classList.add('has-items');
                },
                onItemRemove: function() {
                    if (this.items.length === 0) this.wrapper.classList.remove('has-items');
                }
            });
        }

        initializeTomSelect('#categoria_id', 'Seleccione una o más categorías...');
        initializeTomSelect('#modalidad', 'Seleccione una o más modalidades...');
        initializeTomSelect('#clientes', 'Seleccione uno o más clientes...');
        initializeTomSelect('#proveedores', 'Seleccione uno o más proveedores...');
        
        const fechaDesdeInput = document.getElementById('fecha_desde');
        const fechaHastaInput = document.getElementById('fecha_hasta');
        const dateRangePicker = $('#daterange');
        const btnGenerarReporte = document.getElementById('btn-generar-reporte');
        
        function checkGenerarButtonState() {
            if (fechaDesdeInput.value && fechaHastaInput.value) {
                btnGenerarReporte.disabled = false;
            } else {
                btnGenerarReporte.disabled = true;
            }
        }

        if (fechaDesdeInput && fechaHastaInput && dateRangePicker.length) {
            const start = fechaDesdeInput.value ? moment(fechaDesdeInput.value) : null;
            const end = fechaHastaInput.value ? moment(fechaHastaInput.value) : null;

            dateRangePicker.daterangepicker({
                startDate: start || moment().startOf('year'),
                endDate: end || moment(),
                linkedCalendars: false,
                autoUpdateInput: false,
                autoApply: true,
                locale: {
                    format: 'DD/MM/YYYY',
                    applyLabel: 'Aplicar',
                    cancelLabel: 'Limpiar',
                    fromLabel: 'Desde',
                    toLabel: 'Hasta',
                    customRangeLabel: 'Personalizado',
                    weekLabel: 'S',
                    daysOfWeek: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sá'],
                    monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                    firstDay: 1
                },
                ranges: {
                   'Este Mes': [moment().startOf('month'), moment().endOf('month')],
                   'Mes Pasado': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                   'Últimos 3 Meses': [moment().subtract(2, 'month').startOf('month'), moment()],
                   'Este Año': [moment().startOf('year'), moment()],
                   'Año Pasado': [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year').endOf('year')]
                }
            });

            if (fechaDesdeInput.value && fechaHastaInput.value) {
                dateRangePicker.val(moment(start).format('DD/MM/YYYY') + ' - ' + moment(end).format('DD/MM/YYYY'));
            }

            dateRangePicker.on('apply.daterangepicker', function(ev, picker) {
                $(this).val(picker.startDate.format('DD/MM/YYYY') + ' - ' + picker.endDate.format('DD/MM/YYYY'));
                fechaDesdeInput.value = picker.startDate.format('YYYY-MM-DD');
                fechaHastaInput.value = picker.endDate.format('YYYY-MM-DD');
                checkGenerarButtonState();
            });

            dateRangePicker.on('cancel.daterangepicker', function(ev, picker) {
                $(this).val('');
                fechaDesdeInput.value = '';
                fechaHastaInput.value = '';
                checkGenerarButtonState();
            });

            // --- INICIO DE LA CORRECCIÓN ---
            // Se agrega un evento para manejar la entrada manual de fechas en el campo.
            dateRangePicker.on('change', function() {
                const value = $(this).val();
                const dates = value.split(' - ');
                if (dates.length === 2) {
                    const startDate = moment(dates[0], 'DD/MM/YYYY', true);
                    const endDate = moment(dates[1], 'DD/MM/YYYY', true);
            
                    if (startDate.isValid() && endDate.isValid()) {
                        // Actualiza los campos ocultos que se envían al servidor
                        fechaDesdeInput.value = startDate.format('YYYY-MM-DD');
                        fechaHastaInput.value = endDate.format('YYYY-MM-DD');
            
                        // Actualiza el estado interno del daterangepicker para que el calendario refleje la fecha escrita
                        const picker = $(this).data('daterangepicker');
                        picker.setStartDate(startDate);
                        picker.setEndDate(endDate);
            
                        checkGenerarButtonState();
                    }
                }
            });
            // --- FIN DE LA CORRECCIÓN ---

            // --- INICIO DE LA CORRECCIÓN ---
            // Se asegura que los valores de fecha iniciales solo se establezcan
            // si no vienen ya definidos desde el servidor (para mantener el estado tras generar un reporte).
            if (!fechaDesdeInput.value || !fechaHastaInput.value) {
                const picker = dateRangePicker.data('daterangepicker');
                fechaDesdeInput.value = picker.startDate.format('YYYY-MM-DD');
                fechaHastaInput.value = picker.endDate.format('YYYY-MM-DD');
            }
            checkGenerarButtonState();
            // --- FIN DE LA CORRECCIÓN ---
        }

        const tipoInput = document.getElementById('tipo');
        const tipoButtonGroup = document.querySelector('.btn-group-reportes');

        if (tipoButtonGroup && tipoInput) {
            tipoButtonGroup.addEventListener('click', function(e) {
                const button = e.target.closest('button');
                if (button) {
                    const selectedValue = button.dataset.value;
                    tipoInput.value = selectedValue;
                    this.querySelectorAll('.btn').forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                    tipoInput.dispatchEvent(new Event('change'));
                }
            });
        }

        const resumenNivel1 = document.getElementById('resumen_nivel_1');
        const resumenNivel2 = document.getElementById('resumen_nivel_2');
        const resumenNivel3 = document.getElementById('resumen_nivel_3');
        const container2 = document.getElementById('resumen_nivel_2_container');
        const container3 = document.getElementById('resumen_nivel_3_container');
        
        const visualizacionContainer = document.getElementById('opciones-visualizacion-container');

        function toggleDisplayOptions() {
            const isResumenActive = resumenNivel1.value || resumenNivel2.value || resumenNivel3.value;
            if (visualizacionContainer) {
                visualizacionContainer.classList.toggle('d-none', isResumenActive);
            }
        }

        const allOptions = [
            { value: "", text: "-- Sin resumen --" },
            { value: "mensual", text: "Por Mes" },
            { value: "semanal", text: "Por Semana" },
            { value: "categoria", text: "Por Categoría" },
            { value: "entidad", text: "Por Cliente/Proveedor" },
            { value: "modalidad", text: "Por Modalidad" }
        ];

        const timeOptions = allOptions.filter(opt => opt.value === "" || opt.value === "mensual" || opt.value === "semanal");

        function populateSelect(select, options) {
            select.innerHTML = '';
            options.forEach(optData => {
                const option = new Option(optData.text, optData.value);
                select.add(option);
            });
        }

        function updateSummaryOptions() {
            const tipo = tipoInput.value;
            const optionsForLevel1 = (tipo === 'todos') ? timeOptions : allOptions;
            populateSelect(resumenNivel1, optionsForLevel1);
            resumenNivel1.dispatchEvent(new Event('change'));
            toggleDisplayOptions();
        }

        function updateSublevels() {
            const tipo = tipoInput.value;
            const val1 = resumenNivel1.value;
            const val2 = resumenNivel2.value;
            container2.style.display = 'none';
            container3.style.display = 'none';

            if (tipo === 'todos') {
                if (val1 === 'mensual') {
                    const options2 = allOptions.filter(opt => opt.value === '' || opt.value === 'semanal');
                    populateSelect(resumenNivel2, options2);
                    resumenNivel2.value = val2;
                    container2.style.display = 'block';
                }
            } else {
                if (val1) {
                    const options2 = allOptions.filter(opt => opt.value !== val1);
                    populateSelect(resumenNivel2, options2);
                    resumenNivel2.value = val2;
                    container2.style.display = 'block';
                }
                if (val1 && val2) {
                    const options3 = allOptions.filter(opt => opt.value !== val1 && opt.value !== val2);
                    populateSelect(resumenNivel3, options3);
                    container3.style.display = 'block';
                }
            }
            toggleDisplayOptions();
        }
        
        tipoInput.addEventListener('change', updateSummaryOptions);
        resumenNivel1.addEventListener('change', updateSublevels);
        resumenNivel2.addEventListener('change', updateSublevels);
        resumenNivel3.addEventListener('change', toggleDisplayOptions);

        function restoreSummaryState() {
            const urlParams = new URLSearchParams(window.location.search);
            updateSummaryOptions();
            
            const queryVal1 = urlParams.get('resumen_nivel_1');
            if (queryVal1) {
                resumenNivel1.value = queryVal1;
                updateSublevels();
                
                const queryVal2 = urlParams.get('resumen_nivel_2');
                if (queryVal2) {
                    resumenNivel2.value = queryVal2;
                    updateSublevels();
                    
                    const queryVal3 = urlParams.get('resumen_nivel_3');
                    if (queryVal3) {
                        resumenNivel3.value = queryVal3;
                    }
                }
            }
        }
        
        restoreSummaryState();

        const reporteGenerado = document.getElementById('reporte-generado');
        const btnVolverArriba = document.getElementById('btn-volver-arriba-reporte');

        if (reporteGenerado && btnVolverArriba) {
            
            const tooltipVolverArriba = bootstrap.Tooltip.getInstance(btnVolverArriba) || new bootstrap.Tooltip(btnVolverArriba);

            reporteGenerado.scrollIntoView({ behavior: 'smooth', block: 'start' });

            const scrollThreshold = reporteGenerado.offsetTop + 200;

            window.addEventListener('scroll', () => {
                if (window.scrollY > scrollThreshold) {
                    btnVolverArriba.classList.remove('d-none');
                } else {
                    btnVolverArriba.classList.add('d-none');
                    if (tooltipVolverArriba) {
                        tooltipVolverArriba.hide();
                    }
                }
            });

            btnVolverArriba.addEventListener('click', () => {
                if (tooltipVolverArriba) {
                    tooltipVolverArriba.hide();
                }
                reporteGenerado.scrollIntoView({ behavior: 'smooth', block: 'start' });
            });
        }

        const modalConfirmarAccionEl = document.getElementById('modal-confirmar-accion');
        if (modalConfirmarAccionEl) {
            const modalConfirmarAccion = new bootstrap.Modal(modalConfirmarAccionEl);
            const btnConfirmarFinal = document.getElementById('btn-confirmar-accion-final');
            let accionPendiente = null;

            document.body.addEventListener('click', function(event) {
                const button = event.target.closest('[data-bs-toggle="modal"][data-bs-target="#modal-confirmar-accion"]');
                if (button) {
                    accionPendiente = { type: button.dataset.action };
                    let msg = '¿Está seguro que desea continuar?';
                    if (accionPendiente.type.startsWith('pdf')) msg = '¿Desea generar el reporte en formato PDF?';
                    if (accionPendiente.type.startsWith('excel')) msg = '¿Desea generar el reporte en formato Excel?';
                    document.getElementById('confirmar-accion-body').textContent = msg;
                    modalConfirmarAccion.show();
                }
            });

            btnConfirmarFinal.addEventListener('click', async () => {
                if (!accionPendiente) return;

                const { type } = accionPendiente;
                const form = document.getElementById('form-reportes');
                const formData = new FormData(form);
                const params = new URLSearchParams();

                const multiSelects = ['categoria_id', 'modalidad', 'clientes', 'proveedores'];
                
                formData.forEach((value, key) => {
                    if (!multiSelects.includes(key)) params.append(key, value);
                });
                
                multiSelects.forEach(name => {
                    const select = form.querySelector(`select[name="${name}"]`);
                    if (select) Array.from(select.selectedOptions).forEach(option => params.append(name, option.value));
                });
                
                if (type.startsWith('pdf') || type.startsWith('excel')) {
                    const [formato] = type.split('-');                  
                    const resumenNivel1Value = params.get('resumen_nivel_1');
                    const route = resumenNivel1Value ? 'resumen' : 'detalle';
                    const finalParams = new URLSearchParams();
                    finalParams.append('desde', params.get('fecha_desde'));
                    finalParams.append('hasta', params.get('fecha_hasta'));
                    params.forEach((value, key) => {
                        if (key !== 'fecha_desde' && key !== 'fecha_hasta') finalParams.append(key, value);
                    });
                    
                    window.location.href = `/reportes/exportar/${route}/${formato}?${finalParams.toString()}`;
                }
                
                modalConfirmarAccion.hide();
                accionPendiente = null;
            });
        }

        const btnRestablecer = document.getElementById('btn-restablecer-filtros');
        if (btnRestablecer) {
            const comentariosSwitch = document.getElementById('mostrar_comentarios');
            const ordenSwitch = document.getElementById('invertir_orden');
            
            const tomSelects = ['#categoria_id', '#modalidad', '#clientes', '#proveedores']
                .map(selector => document.querySelector(selector)?.tomselect)
                .filter(Boolean);

            const checkResetButtonState = () => {
                const isReportGenerated = window.location.pathname.includes('/generar');
                const hasUserChanges = 
                    tipoInput.value !== 'todos' ||
                    comentariosSwitch.checked ||
                    ordenSwitch.checked ||
                    tomSelects.some(ts => ts.items.length > 0) ||
                    fechaDesdeInput.value !== '' ||
                    resumenNivel1.value !== '';
                btnRestablecer.disabled = !(isReportGenerated || hasUserChanges);
            };

            tipoInput.addEventListener('change', checkResetButtonState);
            comentariosSwitch.addEventListener('change', checkResetButtonState);
            ordenSwitch.addEventListener('change', checkResetButtonState);
            tomSelects.forEach(ts => ts.on('change', checkResetButtonState));
            dateRangePicker.on('apply.daterangepicker', checkResetButtonState);
            dateRangePicker.on('cancel.daterangepicker', checkResetButtonState);
            resumenNivel1.addEventListener('change', checkResetButtonState);
            resumenNivel2.addEventListener('change', checkResetButtonState);
            resumenNivel3.addEventListener('change', checkResetButtonState);

            btnRestablecer.addEventListener('click', () => {
                window.location.href = '/reportes';
            });

            checkResetButtonState();
        }
    }
});


----- C:\Users\Javier\Desktop\finanzas-app\public\js\venta.client.js -----
document.addEventListener('DOMContentLoaded', function () {
    const ventaPage = document.getElementById('form-cargar-venta');
    if (ventaPage) {
        // --- INYECCIÓN DE ESTILOS PARA LA BARRA DE DESPLAZAMIENTO ---
        const style = document.createElement('style');
        style.textContent = `.scrollable-results { max-height: 300px; overflow-y: auto; }`;
        document.head.appendChild(style);

        // Elementos del formulario
        const searchInput = document.getElementById('cliente-search');
        const searchResults = document.getElementById('search-results');
        const clienteIdInput = document.getElementById('cliente_id');
        const categoriaSelect = document.getElementById('categoria_id');
        const fechaInput = document.getElementById('fecha');
        const importeInput = document.getElementById('importe');
        const btnConfirmarMovimiento = document.getElementById('btn-confirmar-movimiento');
        const btnConfirmarWrapper = document.getElementById('btn-confirmar-wrapper');
        const confirmarTooltip = new bootstrap.Tooltip(btnConfirmarWrapper);
        // Elementos de la UI
        const historialContainer = document.getElementById('historial-cliente-container');
        const checkAjuste = document.getElementById('es_ajuste_venta');
        const btnClearClienteSelection = document.getElementById('btn-clear-cliente-selection');
        
        // Modales
        const modalAgregarCliente = new bootstrap.Modal(document.getElementById('modal-agregar-cliente'));
        const modalEditarCliente = new bootstrap.Modal(document.getElementById('modal-editar-cliente'));
        const modalConfirmarEliminarCliente = new bootstrap.Modal(document.getElementById('modal-confirmar-eliminar'));
        const modalConfirmarEliminarMovimiento = new bootstrap.Modal(document.getElementById('modal-confirmar-eliminar-movimiento'));
        const modalConfirmarAjuste = new bootstrap.Modal(document.getElementById('modal-confirmar-ajuste'));
        const modalConfirmarGestion = new bootstrap.Modal(document.getElementById('modal-confirmar-gestion'));
        const modalConfirmarRestablecer = new bootstrap.Modal(document.getElementById('modal-confirmar-restablecer'));
        const modalConfirmarGestionBody = document.getElementById('modal-confirmar-gestion-body');
        const btnConfirmarGestionFinal = document.getElementById('btn-confirmar-gestion-final');
        const modalConfirmarGestionEl = document.getElementById('modal-confirmar-gestion');
        const modalAgregarClienteEl = document.getElementById('modal-agregar-cliente');
        
        if (modalAgregarClienteEl) {
            modalAgregarClienteEl.addEventListener('show.bs.modal', () => {
                const form = modalAgregarClienteEl.querySelector('#form-agregar-cliente');
                if (form) {
                    form.reset();
                }
            });
        }

        if (modalConfirmarGestionEl) {
            modalConfirmarGestionEl.addEventListener('shown.bs.modal', () => {
                const backdrops = document.querySelectorAll('.modal-backdrop.fade.show');
                if (backdrops.length > 1) {
                    backdrops[backdrops.length - 1].style.zIndex = 1056;
                 }
            });
        }
        
        const btnEliminarClienteModal = document.getElementById('btn-eliminar-cliente-modal');
        if (btnEliminarClienteModal) {
            btnEliminarClienteModal.addEventListener('click', () => {
                const idClienteAEliminar = document.getElementById('modal-editar-cliente-id').value;
                if (!idClienteAEliminar) {
                    window.showToast('No se pudo identificar al cliente a eliminar.', 'danger');
                    return;
                }
                modalEditarCliente.hide();
                
                const btnConfirmacionFinal = document.getElementById('btn-confirmar-eliminacion-final');
                btnConfirmacionFinal.dataset.idCliente = idClienteAEliminar;

                const palabras = ['eliminar', 'borrar', 'quitar'];
                const palabra = palabras[Math.floor(Math.random() * palabras.length)];
                document.getElementById('palabra-confirmacion').textContent = palabra;
                document.getElementById('input-confirmacion').value = '';
                btnConfirmacionFinal.disabled = true;
                modalConfirmarEliminarCliente.show();
            });
        }

        // --- LÓGICA DEL SWITCH "INVERTIR" ---
        const checkAjusteVenta = document.getElementById('es_ajuste_venta');
        if (checkAjusteVenta && importeInput) {
            const labelAjusteVenta = document.querySelector('label[for="es_ajuste_venta"]');
            const infoIcon = checkAjusteVenta.closest('.d-flex').querySelector('.info-icon');

            const actualizarEstiloImporte = () => {
                if (checkAjusteVenta.checked) {
                    if (labelAjusteVenta) labelAjusteVenta.classList.remove('text-muted');
                    if (infoIcon) infoIcon.classList.remove('text-muted');
                    importeInput.classList.add('text-egreso-regular');
                } else {
                    if (labelAjusteVenta) labelAjusteVenta.classList.add('text-muted');
                    if (infoIcon) infoIcon.classList.add('text-muted');
                    importeInput.classList.remove('text-egreso-regular');
                }
            };
            checkAjusteVenta.addEventListener('change', actualizarEstiloImporte);
            actualizarEstiloImporte();
        }

        function checkFormValidity() {
            const isClienteSelected = clienteIdInput.value.trim() !== '';
            const isFechaFilled = fechaInput.value.trim() !== '';
            const isImporteValid = importeInput.value.trim() !== '' && parseFloat(importeInput.value) > 0;
            const isCategoriaSelected = categoriaSelect.value.trim() !== '';
            const isFormValid = isClienteSelected && isFechaFilled && isImporteValid && isCategoriaSelected;

            btnConfirmarMovimiento.disabled = !isFormValid;
            if (isFormValid) {
                btnConfirmarMovimiento.style.pointerEvents = 'auto';
                confirmarTooltip.disable();
            } else {
                btnConfirmarMovimiento.style.pointerEvents = 'none';
                confirmarTooltip.enable();
            }
        }
        
        // --- LÓGICA PARA EL CAMPO DE COMENTARIO CON AUTOGROW ---
        const comentarioTextarea = document.getElementById('comentarios');
        const charCounter = document.getElementById('char-counter');
        const btnClearComentario = document.getElementById('btn-clear-comentario');

        if (comentarioTextarea && charCounter && btnClearComentario) {
            const autoGrow = () => {
                comentarioTextarea.style.height = 'auto';
                comentarioTextarea.style.height = (comentarioTextarea.scrollHeight) + 'px';
            };
            const updateCounter = () => {
                const count = comentarioTextarea.value.length;
                charCounter.textContent = `${count} / 140`;
                btnClearComentario.classList.toggle('d-none', count === 0);
                charCounter.classList.toggle('d-none', count === 0);
            };
            comentarioTextarea.addEventListener('input', () => {
                updateCounter();
                autoGrow();
            });
            btnClearComentario.addEventListener('click', () => {
                comentarioTextarea.value = '';
                updateCounter();
                autoGrow();
                comentarioTextarea.focus();
            });
            updateCounter();
            autoGrow();
        }

        // --- LÓGICA PARA GESTIÓN DE COMENTARIOS (MODAL CLIENTE) ---
        const modalEditarComentarios = document.getElementById('modal-editar-cliente-comentarios');
        if(modalEditarComentarios) {
            const modalEditarCharCounter = document.getElementById('modal-editar-char-counter');
            const modalEditarClienteEl = document.getElementById('modal-editar-cliente');
            const updateClienteCharCounter = () => {
                const count = modalEditarComentarios.value.length;
                if(modalEditarCharCounter) modalEditarCharCounter.textContent = `${count} / 140`;
            };

            modalEditarComentarios.addEventListener('input', updateClienteCharCounter);
            
            if (modalEditarClienteEl) {
                modalEditarClienteEl.addEventListener('show.bs.modal', () => {
                    updateClienteCharCounter();
                });
            }
        }

        // --- LÓGICA PARA MODALIDAD (Opción "Otra...") ---
        const modalidadSelect = document.getElementById('modalidad-select');
        const modalOtraModalidadEl = document.getElementById('modal-otra-modalidad');

        if (modalidadSelect && modalOtraModalidadEl) {
            const otraModalidadModal = new bootstrap.Modal(modalOtraModalidadEl);
            const nuevaModalidadInput = document.getElementById('input-nueva-modalidad');
            const guardarModalidadBtn = document.getElementById('btn-guardar-nueva-modalidad');
            let previousModalidadValue = modalidadSelect.value;
            modalidadSelect.addEventListener('focus', function() {
                previousModalidadValue = this.value;
            });
            modalidadSelect.addEventListener('change', function() {
                const existingCustomOption = this.querySelector('.custom-modalidad');
                if (existingCustomOption && this.value !== existingCustomOption.value) {
                    existingCustomOption.remove();
                }
                if (this.value === 'Otra...') {
                     nuevaModalidadInput.value = '';
                    otraModalidadModal.show();
                }
            });
            
            guardarModalidadBtn.addEventListener('click', function() {
                const nuevaModalidad = nuevaModalidadInput.value.trim();
                
                if (!nuevaModalidad) {
                    modalidadSelect.value = previousModalidadValue;
                    otraModalidadModal.hide();
                    return;
                }

                const existingOptions = Array.from(modalidadSelect.options).map(opt => opt.text.toLowerCase());
                if (existingOptions.includes(nuevaModalidad.toLowerCase())) {
                    window.showToast('Esa modalidad ya existe.', 'danger');
                    return;
                }

                const existingCustomOption = modalidadSelect.querySelector('.custom-modalidad');
                if (existingCustomOption) {
                    existingCustomOption.remove();
                }

                const newOption = document.createElement('option');
                newOption.value = nuevaModalidad;
                newOption.textContent = nuevaModalidad;
                newOption.selected = true;
                newOption.classList.add('custom-modalidad');
                const otraOption = modalidadSelect.querySelector('option[value="Otra..."]');
                modalidadSelect.insertBefore(newOption, otraOption);
                otraModalidadModal.hide();
            });

            modalOtraModalidadEl.addEventListener('hidden.bs.modal', function () {
                if (modalidadSelect.value === 'Otra...') {
                    modalidadSelect.value = previousModalidadValue;
                }
            });
        }

        // --- LÓGICA PARA GESTIÓN DE MODALIDADES ---
        const modalGestionModalidadesEl = document.getElementById('modal-gestion-modalidades');
        if (modalGestionModalidadesEl) {
            const listaModalidadesGestion = document.getElementById('lista-modalidades-gestion');
            const formAgregarModalidad = document.getElementById('form-agregar-modalidad');
            const inputNuevaModalidad = document.getElementById('input-nueva-modalidad-gestion');

            async function refreshModalidadSelect(selectedValue) {
                try {
                    const response = await fetch('/venta/api/modalidades');
                    if (!response.ok) throw new Error('No se pudieron cargar las modalidades.');
                    const modalidades = await response.json();
                    
                    const customOption = modalidadSelect.querySelector('.custom-modalidad');
                    const currentValue = selectedValue || (customOption ? customOption.value : modalidadSelect.value);
                    
                    modalidadSelect.innerHTML = '';
                    modalidades.forEach(mod => {
                        const option = new Option(mod.nombre, mod.nombre);
                        modalidadSelect.add(option);
                    });
                    if (customOption) {
                         modalidadSelect.add(customOption);
                    }
                    
                    const otraOption = new Option('Otra...', 'Otra...');
                    modalidadSelect.add(otraOption);

                    if (Array.from(modalidadSelect.options).some(opt => opt.value === currentValue)) {
                        modalidadSelect.value = currentValue;
                    } else if (modalidades.length > 0) {
                        modalidadSelect.value = modalidades[0].nombre;
                    }
                } catch (error) {
                    window.showToast(error.message, 'danger');
                }
            }

            async function populateModalidadesGestion() {
                try {
                    const response = await fetch('/venta/api/modalidades');
                    if (!response.ok) throw new Error('No se pudieron cargar las modalidades para gestionar.');
                    const modalidades = await response.json();

                    listaModalidadesGestion.innerHTML = '';
                    modalidades.forEach(mod => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        
                         const nameSpan = document.createElement('span');
                        nameSpan.textContent = mod.nombre;
                        nameSpan.className = 'flex-grow-1';
                        li.appendChild(nameSpan);

                         if (mod.es_editable) {
                            const actionsDiv = document.createElement('div');
                            actionsDiv.className = 'd-flex gap-1';

                             const editBtn = document.createElement('button');
                            editBtn.className = 'btn btn-sm btn-icon btn-primary';
                            editBtn.innerHTML = '<i class="fa-solid fa-pencil"></i>';
                            editBtn.title = 'Editar modalidad';

                            const deleteBtn = document.createElement('button');
                            deleteBtn.className = 'btn btn-sm btn-icon btn-danger';
                            deleteBtn.innerHTML = '<i class="fa-solid fa-trash"></i>';
                            deleteBtn.title = 'Eliminar modalidad';

                            actionsDiv.appendChild(editBtn);
                            actionsDiv.appendChild(deleteBtn);
                            li.appendChild(actionsDiv);
                            editBtn.addEventListener('click', () => {
                                if (li.querySelector('input.form-control-sm')) return;

                                editBtn.disabled = true;
                                 deleteBtn.disabled = true;

                                nameSpan.style.display = 'none';
                                actionsDiv.style.display = 'none';

                                  const editContainer = document.createElement('div');
                                 editContainer.className = 'd-flex align-items-center gap-2 flex-grow-1';
                                
                                    const input = document.createElement('input');
                                 input.type = 'text';
                                input.value = mod.nombre;
                                     input.className = 'form-control form-control-sm';
                                 
                                const saveBtn = document.createElement('button');
                                saveBtn.className = 'btn btn-sm btn-icon btn-primary';
                                saveBtn.innerHTML = '<i class="fa-solid fa-circle-check"></i>';
                                saveBtn.setAttribute('data-bs-toggle', 'tooltip');
                                saveBtn.title = 'Guardar cambios';
                                const cancelBtn = document.createElement('button');
                                cancelBtn.className = 'btn btn-sm btn-icon btn-primary';
                                cancelBtn.innerHTML = '<i class="fa-solid fa-circle-xmark"></i>';
                                cancelBtn.setAttribute('data-bs-toggle', 'tooltip');
                                cancelBtn.title = 'Cancelar edición';

                                editContainer.appendChild(input);
                                editContainer.appendChild(saveBtn);
                                editContainer.appendChild(cancelBtn);
                                li.prepend(editContainer);
                                input.focus();

                                const saveTooltip = new bootstrap.Tooltip(saveBtn);
                                const cancelTooltip = new bootstrap.Tooltip(cancelBtn);
                                const cancelEdit = () => {
                                    saveTooltip.dispose();
                                    cancelTooltip.dispose();
                                    editContainer.remove();
                                    nameSpan.style.display = 'block';
                                    actionsDiv.style.display = 'flex';
                                    editBtn.disabled = false;
                                    deleteBtn.disabled = false;
                                };

                                cancelBtn.addEventListener('click', cancelEdit);
                                saveBtn.addEventListener('click', async () => {
                                    const newValue = input.value.trim();
                                    if (newValue && newValue !== mod.nombre) {
                                         try {
                                            const saveResponse = await fetch(`/venta/api/modalidades/${mod.id}`, {
                                                 method: 'PUT',
                                                headers: { 'Content-Type': 'application/json' },
                                                  body: JSON.stringify({ nombre: newValue })
                                            });
                                             const result = await saveResponse.json();
                                            if (!saveResponse.ok) throw new Error(result.message);
                                             
                                            mod.nombre = newValue;
                                             nameSpan.textContent = newValue;
                                             window.showToast('Modalidad actualizada.', 'success');
                                            cancelEdit();
                                        } catch (error) {
                                            window.showToast(error.message, 'danger');
                                        }
                                    } else {
                                        cancelEdit();
                                    }
                                });
                            });

                            deleteBtn.addEventListener('click', () => {
                                modalConfirmarGestionBody.innerHTML = `¿Está seguro que desea eliminar la modalidad <strong>${mod.nombre}</strong>? Los movimientos asociados se cambiarán a <strong>Efectivo</strong>.`;
                                modalConfirmarGestion.show();

                                 btnConfirmarGestionFinal.onclick = async () => {
                                    try {
                                        const deleteResponse = await fetch(`/venta/api/modalidades/${mod.id}`, { method: 'DELETE' });
                                        const result = await deleteResponse.json();
                                         if(!deleteResponse.ok) throw new Error(result.message || 'Error al eliminar');
                                          window.showToast(result.message || 'Modalidad eliminada.', 'success');
                                        populateModalidadesGestion();
                                     } catch (error) {
                                        window.showToast(error.message, 'danger');
                                    } finally {
                                        modalConfirmarGestion.hide();
                                    }
                                };
                            });
                        } else {
                            nameSpan.classList.add('text-muted');
                        }
                        
                        listaModalidadesGestion.appendChild(li);
                    });
                } catch (error) {
                    window.showToast(error.message, 'danger');
                }
            }
            
            formAgregarModalidad.addEventListener('submit', async (e) => {
                e.preventDefault();
                const nombre = inputNuevaModalidad.value.trim();
                if (!nombre) return;

                const existingNames = Array.from(listaModalidadesGestion.querySelectorAll('li span.flex-grow-1'))
                                        .map(span => span.textContent.trim().toLowerCase());
                
                if (existingNames.includes(nombre.toLowerCase())) {
                    window.showToast('Esa modalidad ya existe.', 'danger');
                    return;
                }

                try {
                     const response = await fetch('/venta/api/modalidades', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ nombre })
                    });
                    const result = await response.json();
                     if (!response.ok) throw new Error(result.message);
                    inputNuevaModalidad.value = '';
                     populateModalidadesGestion();
                    window.showToast('Modalidad agregada.', 'success');
                } catch (error) {
                     window.showToast(error.message, 'danger');
                }
            });

            modalGestionModalidadesEl.addEventListener('show.bs.modal', populateModalidadesGestion);
            modalGestionModalidadesEl.addEventListener('hidden.bs.modal', () => {
                refreshModalidadSelect();
            });
        }

        // --- LÓGICA PARA GESTIÓN DE CATEGORÍAS ---
        const modalGestionCategoriasEl = document.getElementById('modal-gestion-categorias-venta');
        if (modalGestionCategoriasEl) {
            let allCategories = [];
            const listaCategoriasGestion = document.getElementById('lista-categorias-gestion-venta');
            const formAgregarCategoria = document.getElementById('form-agregar-categoria-venta');
            const inputNuevaCategoria = document.getElementById('input-nueva-categoria-gestion-venta');
            const API_BASE_URL = '/venta/api/categorias';
            
            async function refreshAllCategorySelects(newValueToSelect) {
                try {
                    const response = await fetch(`${API_BASE_URL}?tipo=cliente`);
                    const categories = await response.json();
                    if (!response.ok) throw new Error('No se pudieron cargar las categorías.');

                    const allSelects = document.querySelectorAll(`select[id*="categoria"]`);
                    allSelects.forEach(select => {
                        const currentValue = select.value;
                        select.innerHTML = '<option value="">-- Seleccione una categoría --</option>';
                        categories.forEach(cat => {
                             const option = new Option(cat.nombre, cat.id);
                            option.dataset.editable = cat.es_editable;
                            select.add(option);
                         });
                        select.value = (select.id === 'categoria_id') ? newValueToSelect : currentValue;
                    });
                    if (newValueToSelect) {
                        categoriaSelect.value = newValueToSelect;
                    }
                } catch (error) {
                    console.error('Error refrescando categorías:', error);
                    window.showToast(error.message, 'danger');
                }
            }

            async function populateCategoriasGestion() {
                try {
                    const response = await fetch(`${API_BASE_URL}/all`);
                    if (!response.ok) throw new Error('No se pudieron cargar las categorías para gestionar.');
                    allCategories = await response.json();
                    
                    const categoriasParaMostrar = allCategories.filter(cat => cat.tipo === 'cliente' && cat.es_editable === 1);

                    listaCategoriasGestion.innerHTML = '';
                    categoriasParaMostrar.forEach(cat => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        
                         const nameSpan = document.createElement('span');
                        nameSpan.textContent = cat.nombre;
                        nameSpan.className = 'flex-grow-1';
                        li.appendChild(nameSpan);

                         if (cat.es_editable) {
                            const actionsDiv = document.createElement('div');
                            actionsDiv.className = 'd-flex gap-1';

                             const editBtn = document.createElement('button');
                            editBtn.className = 'btn btn-sm btn-icon btn-primary';
                            editBtn.innerHTML = '<i class="fa-solid fa-pencil"></i>';
                            editBtn.title = 'Editar categoría';
                            editBtn.setAttribute('data-bs-toggle', 'tooltip');
                            const deleteBtn = document.createElement('button');
                            deleteBtn.className = 'btn btn-sm btn-icon btn-danger';
                            deleteBtn.innerHTML = '<i class="fa-solid fa-trash"></i>';
                            deleteBtn.title = 'Eliminar categoría';
                            deleteBtn.setAttribute('data-bs-toggle', 'tooltip');


                            actionsDiv.appendChild(editBtn);
                            actionsDiv.appendChild(deleteBtn);
                            li.appendChild(actionsDiv);

                            editBtn.addEventListener('click', () => {
                                if (li.querySelector('input.form-control-sm')) return;

                                editBtn.disabled = true;
                                 deleteBtn.disabled = true;

                                 nameSpan.style.display = 'none';
                                actionsDiv.style.display = 'none';

                                   const editContainer = document.createElement('div');
                                 editContainer.className = 'd-flex align-items-center gap-2 flex-grow-1';
                                
                                    const input = document.createElement('input');
                                 input.type = 'text';
                                input.value = cat.nombre;
                                     input.className = 'form-control form-control-sm';
                                 
                                const saveBtn = document.createElement('button');
                                saveBtn.className = 'btn btn-sm btn-icon btn-primary';
                                saveBtn.innerHTML = '<i class="fa-solid fa-circle-check"></i>';
                                saveBtn.setAttribute('data-bs-toggle', 'tooltip');
                                saveBtn.title = 'Guardar cambios';
                                const cancelBtn = document.createElement('button');
                                cancelBtn.className = 'btn btn-sm btn-icon btn-primary';
                                cancelBtn.innerHTML = '<i class="fa-solid fa-circle-xmark"></i>';
                                cancelBtn.setAttribute('data-bs-toggle', 'tooltip');
                                cancelBtn.title = 'Cancelar edición';

                                editContainer.appendChild(input);
                                editContainer.appendChild(saveBtn);
                                editContainer.appendChild(cancelBtn);
                                li.prepend(editContainer);
                                input.focus();

                                const saveTooltip = new bootstrap.Tooltip(saveBtn);
                                const cancelTooltip = new bootstrap.Tooltip(cancelBtn);
                                const cancelEdit = () => {
                                    saveTooltip.dispose();
                                    cancelTooltip.dispose();
                                    editContainer.remove();
                                    nameSpan.style.display = 'block';
                                    actionsDiv.style.display = 'flex';
                                    editBtn.disabled = false;
                                    deleteBtn.disabled = false;
                                };

                                cancelBtn.addEventListener('click', cancelEdit);
                                saveBtn.addEventListener('click', async () => {
                                    const newValue = input.value.trim();
                                    if (newValue && newValue !== cat.nombre) {
                                        if (allCategories.some(c => c.nombre.toLowerCase() === newValue.toLowerCase() && c.id !== cat.id)) {
                                            window.showToast('Ya existe una categoría con ese nombre.', 'danger');
                                            return;
                                        }
                                         try {
                                            const saveResponse = await fetch(`${API_BASE_URL}/${cat.id}`, {
                                                 method: 'PUT',
                                                headers: { 'Content-Type': 'application/json' },
                                                  body: JSON.stringify({ nombre: newValue })
                                            });
                                             const result = await saveResponse.json();
                                            if (!saveResponse.ok) throw new Error(result.message);
                                             
                                            window.showToast('Categoría actualizada.', 'success');
                                            populateCategoriasGestion();
                                        } catch (error) {
                                            window.showToast(error.message, 'danger');
                                        }
                                    } else {
                                        cancelEdit();
                                    }
                                });
                            });

                            deleteBtn.addEventListener('click', () => {
                                modalConfirmarGestionBody.innerHTML = `¿Está seguro que desea eliminar la categoría <strong>${cat.nombre}</strong>? Los movimientos asociados pasarán a estar <strong>Ingresos sin categoría</strong>.`;
                                modalConfirmarGestion.show();
                                  
                                btnConfirmarGestionFinal.onclick = async () => {
                                    try {
                                         const deleteResponse = await fetch(`${API_BASE_URL}/${cat.id}`, { method: 'DELETE' });
                                        const result = await deleteResponse.json();
                                         if(!deleteResponse.ok) throw new Error(result.message || 'Error al eliminar');
                                         window.showToast(result.message || 'Categoría eliminada.', 'success');
                                         populateCategoriasGestion();
                                    } catch (error) {
                                        window.showToast(error.message, 'danger');
                                    } finally {
                                        modalConfirmarGestion.hide();
                                    }
                                };
                            });
                        } else {
                            nameSpan.classList.add('text-muted');
                        }
                        
                        listaCategoriasGestion.appendChild(li);
                    });

                    const tooltipTriggerList = listaCategoriasGestion.querySelectorAll('[data-bs-toggle="tooltip"]');
                    [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
                    
                } catch (error) {
                    window.showToast(error.message, 'danger');
                }
            }

            formAgregarCategoria.addEventListener('submit', async (e) => {
                e.preventDefault();
                const nombre = inputNuevaCategoria.value.trim();
                if (!nombre) return;

                if (allCategories.some(cat => cat.nombre.toLowerCase() === nombre.toLowerCase())) {
                    window.showToast('Ya existe una categoría con ese nombre.', 'danger');
                    return;
                }

                try {
                     const response = await fetch(API_BASE_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ nombre, tipo: 'cliente' })
                    });
                    const result = await response.json();
                    if (!response.ok) throw new Error(result.message);
                    inputNuevaCategoria.value = '';
                     populateCategoriasGestion();
                    window.showToast('Categoría agregada.', 'success');
                } catch (error) {
                      window.showToast(error.message, 'danger');
                }
             });

            modalGestionCategoriasEl.addEventListener('show.bs.modal', populateCategoriasGestion);
            modalGestionCategoriasEl.addEventListener('hidden.bs.modal', () => {
                refreshAllCategorySelects(categoriaSelect.value);
            });
        }
        
        async function cargarHistorialCliente(clienteId) {
            try {
                const response = await fetch(`/venta/api/clientes/${clienteId}/movimientos`);
                const data = await response.json();
                if (!response.ok) throw new Error(data.message || 'No se pudo cargar el historial.');
                
                historialContainer.innerHTML = data.html;
                const tooltipTriggerList = historialContainer.querySelectorAll('[data-bs-toggle="tooltip"]');
                [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));

            } catch (error) {
                console.error('Error al cargar historial:', error);
                window.showToast(error.message, 'danger');
                historialContainer.innerHTML = '<p class="text-center text-danger">Error al cargar el historial.</p>';
            }
        }

        function seleccionarCliente(cliente) {
            clienteIdInput.value = cliente.id;
            searchInput.value = `${cliente.nombre} (${cliente.id})`;
            searchInput.disabled = true;
            searchResults.innerHTML = '';
            searchResults.classList.remove('scrollable-results');
            
            btnClearClienteSelection.classList.remove('d-none');
            
            const defaultOption = Array.from(categoriaSelect.options).find(opt => opt.dataset.editable === '0');
            categoriaSelect.value = cliente.categoria_id || (defaultOption ? defaultOption.value : "");
            
            categoriaSelect.dispatchEvent(new Event('change'));
            cargarHistorialCliente(cliente.id);
            checkFormValidity();
        }

        function resetearSeleccionCliente() {
            clienteIdInput.value = '';
            const defaultOption = Array.from(categoriaSelect.options).find(opt => opt.dataset.editable === '0');
            if (defaultOption) {
                categoriaSelect.value = defaultOption.value;
            } else {
                categoriaSelect.selectedIndex = 0;
            }
            categoriaSelect.dispatchEvent(new Event('change'));
            searchInput.value = '';
            searchInput.disabled = false;
            searchInput.focus();
            historialContainer.innerHTML = '';
            
            btnClearClienteSelection.classList.add('d-none');
            
            checkFormValidity();
        }

        function restablecerFormularioCompleto() {
            resetearSeleccionCliente();
            ventaPage.reset();
            fechaInput.value = new Date().toISOString().slice(0, 10);
            
            const checkAjusteVenta = document.getElementById('es_ajuste_venta');
            if (checkAjusteVenta) {
                checkAjusteVenta.checked = false;
                checkAjusteVenta.dispatchEvent(new Event('change'));
            }

            if (comentarioTextarea) {
                comentarioTextarea.value = '';
                comentarioTextarea.dispatchEvent(new Event('input'));
            }

            checkFormValidity();
            window.showToast('Formulario restablecido.', 'success');
        }
        
        function checkAndApplyScroll() {
            const itemCount = searchResults.children.length;
            if (itemCount > 5) {
                searchResults.classList.add('scrollable-results');
            } else {
                searchResults.classList.remove('scrollable-results');
            }
        }

        async function mostrarClientesRecientes() {
            if (clienteIdInput.value) {
                searchResults.innerHTML = '';
                return;
            }
            try {
                const response = await fetch('/venta/api/clientes/recientes');
                const clientesRecientes = await response.json();
                if (!response.ok) throw new Error('No se pudieron cargar los clientes recientes.');
                
                searchResults.innerHTML = '';
                if (clientesRecientes.length > 0) {
                    const header = document.createElement('li');
                    header.classList.add('list-group-item', 'border-start', 'border-end', 'border-bottom', 'small', 'bg-light', 'text-muted', 'fw-semibold');
                    header.textContent = 'Últimos utilizados';
                    searchResults.appendChild(header);
                    clientesRecientes.forEach(cliente => {
                        const item = document.createElement('a');
                        item.href = '#';
                        item.classList.add('list-group-item', 'list-group-item-action', 'bg-light', 'd-flex', 'align-items-center');
                         item.innerHTML = `<span class="badge rounded-pill me-2" style="background-color: #cecbd1ff; color: #48536b">${cliente.id}</span>${cliente.nombre}`;
                        item.addEventListener('click', (e) => { e.preventDefault(); seleccionarCliente(cliente); });
                        searchResults.appendChild(item);
                    });
                }
                checkAndApplyScroll();
            } catch (error) {
                console.error("Error al buscar clientes recientes:", error);
                window.showToast(error.message, 'danger');
            }
        }

        async function buscarTodosLosClientes() {
            try {
                const response = await fetch('/venta/api/clientes/todos');
                const clientes = await response.json();
                if (!response.ok) throw new Error('No se pudo cargar el listado completo de clientes.');
                searchResults.innerHTML = '';
                if (clientes.length > 0) {
                    const header = document.createElement('li');
                    header.classList.add('list-group-item', 'list-group-item-secondary', 'small', 'bg-light', 'text-muted', 'fw-semibold');
                    header.textContent = `Mostrando ${clientes.length} clientes`;
                    searchResults.appendChild(header);
                clientes.forEach(cliente => {
                    const item = document.createElement('a');
                    item.href = '#';
                    item.className = 'list-group-item list-group-item-action bg-light d-flex align-items-center';
                    item.innerHTML = `<span class="badge rounded-pill me-2" style="background-color: #cecbd1ff; color: #48536b">${cliente.id}</span>${cliente.nombre}`;
                    item.addEventListener('click', (e) => {
                        e.preventDefault();
                        seleccionarCliente(cliente);
                    });
                    searchResults.appendChild(item);
                });
                } else {
                     const noResultsItem = document.createElement('li');
                     noResultsItem.classList.add('list-group-item', 'text-muted');
                     noResultsItem.textContent = 'No hay clientes registrados.';
                     searchResults.appendChild(noResultsItem);
                }
                checkAndApplyScroll();
            } catch (error) {
                console.error("Error al buscar todos los clientes:", error);
                window.showToast(error.message, 'danger');
            }
        }

        searchInput.addEventListener('focus', () => {
            if (searchInput.value.trim() === '') {
                mostrarClientesRecientes();
            }
        });
        searchInput.addEventListener('blur', () => {
            setTimeout(() => {
                searchResults.innerHTML = '';
                searchResults.classList.remove('scrollable-results');
            }, 200);
        });
        searchInput.addEventListener('input', async () => {
            const query = searchInput.value;

            if (query === '*') {
                buscarTodosLosClientes();
                return;
            }

            if (query.length === 0) {
                 mostrarClientesRecientes();
                return;
            }

            if (query.length < 2) {
                searchResults.innerHTML = '';
                searchResults.classList.remove('scrollable-results');
                 return;
            }

            try {
                const response = await fetch(`/venta/api/clientes?q=${query}`);

                const responseData = await response.json();
                if (!response.ok) throw new Error(responseData.message || 'Error desconocido del servidor.');
                 const clientes = responseData;
                searchResults.innerHTML = '';
                const escapedQuery = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                const regex = new RegExp(escapedQuery, 'gi');
                clientes.forEach(cliente => {
                    const item = document.createElement('a');
                    item.href = '#';
                    item.classList.add('list-group-item', 'list-group-item-action', 'bg-light', 'd-flex', 'justify-content-between', 'align-items-center', 'cliente-resultado-item');
                    
                     const nombreResaltado = cliente.nombre.replace(regex, `<strong class="search-highlight">$&</strong>`);
                    const idResaltado = cliente.id.toString().replace(regex, `<strong class="search-highlight">$&</strong>`);
                    let htmlPrincipal = `<div><span class="badge bg-secondary rounded-pill me-2">${idResaltado}</span>${nombreResaltado}</div>`;

                    let htmlCuit = '';
                     if (cliente.cuit && cliente.cuit.match(regex)) {
                        const cuitResaltado = cliente.cuit.replace(regex, `<strong class="search-highlight">$&</strong>`);
                        htmlCuit = `<div class="text-muted small">CUIT: ${cuitResaltado}</div>`;
                    }
                    
                    item.innerHTML = htmlPrincipal + htmlCuit;
                    item.addEventListener('click', (e) => { e.preventDefault(); seleccionarCliente(cliente); });
                    searchResults.appendChild(item);
                });
                checkAndApplyScroll();
            } catch (error) {
                console.error("Error al buscar clientes:", error);
                window.showToast(error.message, 'danger');
            }
        });

        btnClearClienteSelection.addEventListener('click', resetearSeleccionCliente);

        document.getElementById('btn-guardar-nuevo-cliente').addEventListener('click', async () => {
            const clienteData = {
                nombre: document.getElementById('modal-agregar-cliente-nombre').value,
                cuit: document.getElementById('modal-agregar-cliente-cuit').value,
                telefono: document.getElementById('modal-agregar-cliente-telefono').value,
                email: document.getElementById('modal-agregar-cliente-email').value,
                 categoria_id: document.getElementById('modal-agregar-cliente-categoria').value,
                comentarios: document.getElementById('modal-agregar-cliente-comentarios').value,
            };
            if (!clienteData.nombre || !clienteData.cuit) { window.showToast('Nombre y CUIT son obligatorios.', 'danger'); return; }
            try {
                const response = await fetch('/venta/api/clientes', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(clienteData)
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Error al guardar el cliente.');
                modalAgregarCliente.hide();
                window.showToast(`Cliente creado con éxito.`, 'success');
                seleccionarCliente(result.newCliente);
            } catch(error) {
                window.showToast(error.message, 'danger');
            }
        });

        document.getElementById('btn-actualizar-cliente').addEventListener('click', async () => {
            const id = document.getElementById('modal-editar-cliente-id').value;
            const clienteData = {
                nombre: document.getElementById('modal-editar-cliente-nombre').value,
                cuit: document.getElementById('modal-editar-cliente-cuit').value,
                telefono: document.getElementById('modal-editar-cliente-telefono').value,
                 email: document.getElementById('modal-editar-cliente-email').value,
                categoria_id: document.getElementById('modal-editar-cliente-categoria').value,
                comentarios: document.getElementById('modal-editar-cliente-comentarios').value,
            };
            if (!clienteData.nombre || !clienteData.cuit) { window.showToast('Nombre y CUIT son obligatorios.', 'danger'); return; }
            try {
                 const response = await fetch(`/venta/api/clientes/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(clienteData)
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Error al guardar el cliente.');
                modalEditarCliente.hide();
                window.showToast(`Cliente actualizado con éxito.`, 'success');
                searchInput.value = `${result.updatedCliente.nombre} (${result.updatedCliente.id})`;
            } catch(error) {
                window.showToast(error.message, 'danger');
            }
        });

        document.getElementById('input-confirmacion').addEventListener('input', function() {
            const palabra = document.getElementById('palabra-confirmacion').textContent;
            document.getElementById('btn-confirmar-eliminacion-final').disabled = this.value.toLowerCase() !== palabra;
        });

        document.getElementById('btn-confirmar-eliminacion-final').addEventListener('click', async function() {
            const id = this.dataset.idCliente;
            if (!id) return;
            try {
                const response = await fetch(`/venta/api/clientes/${id}`, { method: 'DELETE' });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Error al eliminar.');
                
                window.showToast(result.message, 'success');
                modalConfirmarEliminarCliente.hide();

                if (clienteIdInput.value === id) {
                    resetearSeleccionCliente();
                }
            } catch(error) {
                window.showToast(error.message, 'danger');
            }
        });

        async function procesarEnvioFormulario() {
            const formData = new FormData(ventaPage);
            const data = Object.fromEntries(formData.entries());
            if (!data.cliente_id || !data.categoria_id || !data.importe || data.importe <= 0) {
                window.showToast('Complete todos los campos obligatorios.', 'danger');
                return;
            }
            try {
                const response = await fetch(ventaPage.action, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                     body: JSON.stringify(data)
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Error al procesar la venta.');
                if (result.redirectTo) {
                    window.location.href = result.redirectTo;
                } else {
                    window.showToast(result.message, 'success');
                    ventaPage.querySelector('#importe').value = '';
                    if (comentarioTextarea) {
                        comentarioTextarea.value = '';
                        comentarioTextarea.dispatchEvent(new Event('input'));
                    }
                    cargarHistorialCliente(data.cliente_id);
                    checkFormValidity();
                }
            } catch (error) {
                window.showToast(error.message, 'danger');
            }
        }

        ventaPage.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (checkAjuste.checked) {
                modalConfirmarAjuste.show();
            } else {
                procesarEnvioFormulario();
             }
        });

        const btnContinuarAjuste = document.getElementById('btn-continuar-ajuste');
        const btnVolverAjuste = document.getElementById('btn-volver-ajuste');
        btnContinuarAjuste.addEventListener('click', () => {
            modalConfirmarAjuste.hide();
            procesarEnvioFormulario();
        });
        btnVolverAjuste.addEventListener('click', () => {
            checkAjuste.checked = false;
        });
        document.getElementById('btn-confirmar-eliminacion-movimiento-final').addEventListener('click', async function() {
            const movId = this.dataset.id;
            if (!movId) return;
            try {
                const response = await fetch(`/venta/api/movimientos/${movId}`, { method: 'DELETE' });
                const result = await response.json();
                 if (!response.ok) throw new Error(result.message || 'Error al eliminar.');
                window.showToast(result.message, 'success');
                cargarHistorialCliente(clienteIdInput.value);
            } catch(error) {
                window.showToast(error.message, 'danger');
            }
             modalConfirmarEliminarMovimiento.hide();
        });

        const modalGestionarClientesEl = document.getElementById('modal-gestionar-clientes');
        if (modalGestionarClientesEl) {
            const modalGestionarClientes = new bootstrap.Modal(modalGestionarClientesEl);
            const listaGestionClientes = document.getElementById('lista-gestion-clientes');
            const inputBuscarGestion = document.getElementById('input-buscar-gestion-cliente');
            const btnNuevoClienteGestion = document.getElementById('btn-nuevo-cliente-gestion');

            async function populateClientesGestion() {
                try {
                    const response = await fetch('/venta/api/clientes/todos');
                    if (!response.ok) throw new Error('No se pudo cargar la lista de clientes.');
                    const clientes = await response.json();
                    
                    listaGestionClientes.innerHTML = '';
                    if (clientes.length === 0) {
                        listaGestionClientes.innerHTML = '<li class="list-group-item text-muted">No hay clientes registrados.</li>';
                        return;
                    }

                    clientes.forEach(cliente => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        
                        li.dataset.nombre = cliente.nombre.toLowerCase();
                        li.dataset.id = cliente.id.toString();

                        const nombreSpan = document.createElement('span');
                        nombreSpan.innerHTML = `${cliente.nombre}  <span class="text-muted small me-2">(${cliente.id})</span>`;
                        li.appendChild(nombreSpan);

                        const editBtn = document.createElement('button');
                        editBtn.className = 'btn btn-sm btn-icon btn-primary';
                        editBtn.innerHTML = '<i class="fa-solid fa-user-gear"></i>';
                        editBtn.title = 'Editar Cliente';
                        editBtn.addEventListener('click', async () => {
                            modalGestionarClientes.hide();
                            const response = await fetch(`/venta/api/clientes/${cliente.id}`);
                            const clienteData = await response.json();
                            if (response.ok) {
                                document.getElementById('modal-editar-cliente-id').value = clienteData.id;
                                document.getElementById('modal-editar-cliente-nombre').value = clienteData.nombre;
                                document.getElementById('modal-editar-cliente-cuit').value = clienteData.cuit;
                                document.getElementById('modal-editar-cliente-telefono').value = clienteData.telefono;
                                document.getElementById('modal-editar-cliente-email').value = clienteData.email;
                                document.getElementById('modal-editar-cliente-categoria').value = clienteData.categoria_id || '';
                                document.getElementById('modal-editar-cliente-comentarios').value = clienteData.observaciones;
                                modalEditarCliente.show();
                            } else {
                                window.showToast('No se pudo cargar la información del cliente.', 'danger');
                            }
                        });
                        li.appendChild(editBtn);
                        listaGestionClientes.appendChild(li);
                    });

                } catch (error) {
                    console.error('DEBUG: Error en populateClientesGestion:', error);
                    window.showToast(error.message, 'danger');
                    listaGestionClientes.innerHTML = '<li class="list-group-item text-danger">Error al cargar clientes.</li>';
                }
            }

            modalGestionarClientesEl.addEventListener('show.bs.modal', populateClientesGestion);

            inputBuscarGestion.addEventListener('input', function() {
                const normalizeText = (text) => {
                    return text.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase();
                };

                const filtro = this.value.toLowerCase();
                const filtroNormalizado = normalizeText(filtro);
                const items = listaGestionClientes.querySelectorAll('li[data-nombre]');
                
                items.forEach(item => {
                    const nombre = item.dataset.nombre;
                    const id = item.dataset.id;
                    const nombreNormalizado = normalizeText(nombre);
                    const coincide = nombreNormalizado.includes(filtroNormalizado) || id.includes(filtro);
                    item.classList.toggle('d-none', !coincide);
                });
            });
            
            btnNuevoClienteGestion.addEventListener('click', () => {
                modalGestionarClientes.hide();
                modalAgregarCliente.show();
            });
        }

        [fechaInput, importeInput, categoriaSelect].forEach(el => {
            el.addEventListener('input', checkFormValidity);
            el.addEventListener('change', checkFormValidity);
        });
        if (clienteIdInput.value) {
            cargarHistorialCliente(clienteIdInput.value);
        }
        
        checkFormValidity();
        const btnConfirmarRestablecerFinal = document.getElementById('btn-confirmar-restablecer-final');
        if (btnConfirmarRestablecerFinal) {
            btnConfirmarRestablecerFinal.addEventListener('click', () => {
                restablecerFormularioCompleto();
                modalConfirmarRestablecer.hide();
            });
        }
    }
});


----- C:\Users\Javier\Desktop\finanzas-app\routes\auth.js -----
// routes/auth.js
const express = require('express');
const router = express.Router();
const fs = require('fs');
const path = require('path');
const os = require('os');
const crypto = require('crypto');
const configPath = path.resolve(__dirname, '../config.json');

// --- INICIO DE MODIFICACIÓN ---
// Se añade la clave secreta y la función para generar la clave de licencia,
// asegurando que sea idéntica a la utilizada en otras partes de la aplicación.
const SECRET_KEY = 'tu-clave-secreta-para-generar-licencias'; 

function generateCorrectLicenseKey(username, cuit) {
    if (!username || !cuit) return null;
    return crypto.createHash('sha256').update(username + cuit + SECRET_KEY).digest('hex').substring(0, 32);
}
// --- FIN DE MODIFICACIÓN ---

function getConfig() {
  if (process.env.APP_PIN) {
    return {
      APP_PIN: process.env.APP_PIN,
      PIN_HINT: process.env.PIN_HINT || ""
    };
  }
  try {
    const rawdata = fs.readFileSync(configPath);
    return JSON.parse(rawdata);
  } catch (error) {
    console.warn("WARN: config.json not found. Using default PIN 1234 for local dev.");
    if (process.env.NODE_ENV !== 'production') {
        fs.writeFileSync(configPath, JSON.stringify({ APP_PIN: "1234", PIN_HINT: "" }, null, 2));
    }
    return { APP_PIN: "1234", PIN_HINT: "" };
  }
}

function saveConfig(config) {
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
}

function getLocalIpAddress() {
    const nets = os.networkInterfaces();
    for (const name of Object.keys(nets)) {
        for (const net of nets[name]) {
            if (net.family === 'IPv4' && !net.internal) {
                return net.address;
            }
        }
    }
    return 'localhost';
}

router.get('/login', (req, res) => {
    const successMessage = req.query.success;
    const ip = getLocalIpAddress();
    const port = process.env.PORT || 3000;
    const config = getConfig();
    res.render('login', {
        error: null,
        success: successMessage,
        ip: ip,
        port: port,
        pinHint: res.locals.isLicensed ? config.PIN_HINT : null
    });
});

router.post('/login', (req, res) => {
    const { pin } = req.body;
    const config = getConfig();
    const pendingChange = req.session.pendingChange;
    const APP_PIN = config.APP_PIN;

    if (pendingChange && pendingChange.type === 'pin_recovery') {
        delete req.session.pendingChange;
        req.session.loggedin = true;
        return res.redirect('/inicio?forcePinChange=true');
    }
    
    if (pin === APP_PIN) {
        req.session.loggedin = true;
        req.session.forcePinChange = false;
        res.redirect('/inicio');
    } else {
        const ip = getLocalIpAddress();
        const port = process.env.PORT || 3000;
        res.render('login', {
            error: 'PIN incorrecto. Intente de nuevo.',
            success: null,
            ip: ip,
            port: port,
            pinHint: res.locals.isLicensed ? config.PIN_HINT : null
        });
    }
});

// --- INICIO DE MODIFICACIÓN ---
// Nueva ruta para gestionar la recuperación del PIN mediante la validación de la licencia.
router.post('/recover-by-license', (req, res) => {
    // Primero, se verifica si la aplicación tiene una licencia activa.
    if (!res.locals.isLicensed) {
        return res.status(403).json({ success: false, message: 'Esta función requiere una licencia activa en la aplicación.' });
    }

    const { username, cuit, licenseKey } = req.body;
    if (!username || !cuit || !licenseKey) {
        return res.status(400).json({ success: false, message: 'Todos los campos son obligatorios.' });
    }

    const correctKey = generateCorrectLicenseKey(username.trim(), cuit.trim());

    if (licenseKey.trim() === correctKey) {
        // Si la clave es correcta, se realiza el mismo proceso que en la recuperación de emergencia.
        console.log("Acceso de emergencia por licencia activado. Restableciendo PIN a '1234'.");
        const config = getConfig();
        config.APP_PIN = "1234";
        config.PIN_HINT = "PIN restablecido por emergencia";
        saveConfig(config);
        
        req.session.loggedin = true;
        req.session.pinReset = true;
        res.json({ success: true });
    } else {
        // Si los datos no coinciden, se devuelve un error.
        res.status(400).json({ success: false, message: 'Los datos de la licencia son incorrectos.' });
    }
});
// --- FIN DE MODIFICACIÓN ---


router.get('/emergency-recovery', (req, res, next) => {
    try {
        console.log("Acceso de emergencia activado. Restableciendo PIN a '1234'.");
        const config = getConfig();
        config.APP_PIN = "1234";
        config.PIN_HINT = "PIN restablecido por emergencia";
        saveConfig(config);
        
        req.session.loggedin = true;
        req.session.pinReset = true;
        res.redirect('/inicio');
    } catch (error) {
        console.error("Error durante la recuperación de emergencia:", error);
        next(error);
    }
});

router.get('/reset-pin-1234', (req, res, next) => {
    if (!res.locals.isLicensed) {
        return res.status(403).send('<h1>Acción no permitida</h1><p>Se requiere una licencia activa para realizar esta operación.</p><a href="/login">Volver</a>');
    }
    try {
        const config = getConfig();
        config.APP_PIN = "1234";
        saveConfig(config);
        res.status(200).send('<h1>El PIN ha sido restablecido con éxito.</h1><a href="/login">Volver al Login</a>');
    } catch (error) {
        next(error);
    }
});

router.post('/settings/cambiar-pin', (req, res) => {
    if (!req.session.loggedin) {
        return res.status(401).json({ success: false, message: 'No ha iniciado sesión.' });
    }
    if (!res.locals.isLicensed) {
        return res.status(403).json({ success: false, message: 'Se requiere una licencia activa para cambiar el PIN.' });
    }
    const { current_pin, new_pin, confirm_new_pin, pin_hint } = req.body;
    const config = getConfig();
    const APP_PIN = config.APP_PIN;
    const fromRecovery = req.body.forcePinChange === 'true';

    if (!fromRecovery && current_pin !== APP_PIN) {
        return res.status(400).json({ success: false, message: 'El PIN actual ingresado es incorrecto.' });
    }
    if (!/^\d{4}$/.test(new_pin)) {
        return res.status(400).json({ success: false, message: 'El nuevo PIN debe tener 4 dígitos numéricos.' });
    }
    if (new_pin !== confirm_new_pin) {
        return res.status(400).json({ success: false, message: 'Los nuevos PINs no coinciden.' });
    }

    config.APP_PIN = new_pin;
    config.PIN_HINT = pin_hint || "";
    saveConfig(config);
    
    res.json({ success: true, message: 'PIN actualizado correctamente. Se cerrará la sesión.' });
});

router.get('/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error("Error al cerrar sesión:", err);
            return res.redirect('/inicio');
        }
        res.redirect('/login');
    });
});

module.exports = router;



----- C:\Users\Javier\Desktop\finanzas-app\routes\gestionApi.js -----


----- C:\Users\Javier\Desktop\finanzas-app\routes\index.js -----
// routes/index.js
const express = require('express');
const router = express.Router();

// Importar todas las rutas
const authRoutes = require('./auth');
const inicioRoutes = require('./inicio');
const registroRoutes = require('./registro');

// Las rutas que dependen de `requireLicense` necesitan ser inicializadas con esa función
const ventaRoutes = require('./venta');
const pagoRoutes = require('./pago');
const reportesRoutes = require('./reportes');
const settingsRoutes = require('./settings');

/**
 * Centraliza el registro de todas las rutas de la aplicación.
 * @param {object} app - La instancia de la aplicación Express.
 * @param {Function} requireLogin - Middleware para verificar que el usuario ha iniciado sesión.
 * @param {Function} requireLicense - Middleware para verificar que hay una licencia activa.
 */
module.exports = function(app, requireLogin, requireLicense) {
    // Rutas públicas o con su propia lógica de autenticación
    app.use('/', authRoutes);

    // Rutas que requieren que el usuario esté logueado
    app.use('/inicio', requireLogin, inicioRoutes);
    app.use('/registro', requireLogin, registroRoutes);

    // Rutas que requieren login y licencia activa
    app.use('/venta', requireLogin, ventaRoutes(requireLicense));
    app.use('/pago', requireLogin, pagoRoutes(requireLicense));
    app.use('/reportes', requireLogin, reportesRoutes(requireLicense));
    app.use('/settings', requireLogin, settingsRoutes(requireLicense));

    // Ruta raíz para redirigir según el estado de la sesión
    app.get('/', (req, res) => {
        if (req.session.loggedin) {
            res.redirect('/inicio');
        } else {
            res.redirect('/login');
        }
    });
};


----- C:\Users\Javier\Desktop\finanzas-app\routes\inicio.js -----
// routes/inicio.js

const express = require('express');
const router = express.Router();
const Consultas = require('../db/consultas');
const { getISOWeek, getYear, isFuture, startOfMonth, startOfWeek, startOfYear, getWeekYear, subYears, subMonths, subWeeks, setISOWeek, setYear, startOfISOWeek } = require('date-fns');

/**
 * Devuelve el número de semana ISO estándar.
 * @param {Date} date - La fecha a evaluar.
 * @returns {number} - El número de semana ISO.
 */
const getWeekNumber = (date) => getISOWeek(date);

/**
 * Calcula toda la información necesaria para un período de tiempo específico,
 * incluyendo fechas, etiquetas y enlaces de navegación.
 * @param {object} query - El objeto de consulta de la solicitud (req.query).
 * @returns {object} - Un objeto con toda la información del período.
 */
const getPeriodInfo = (query) => {
    const view = query.view || 'mensual';
    const now = new Date();
    let year = parseInt(query.year) || getYear(now);
    let month = query.month ? parseInt(query.month) - 1 : now.getMonth();
    let week = parseInt(query.week) || getWeekNumber(now);

    let startDate, endDate, displayTitle, nav, ribbon = [];
    const currentYear = getYear(now);
    const currentMonth = now.getMonth();

    switch (view) {
        case 'anual':
            startDate = new Date(year, 0, 1);
            endDate = new Date(year, 11, 31);
            displayTitle = `Año ${year}`;
            
            const isNextYearDisabled = isFuture(startOfYear(new Date(year + 1, 0, 1)));
            nav = {
                prevLink: `/inicio?view=anual&year=${year - 1}`,
                nextLink: isNextYearDisabled ? '#' : `/inicio?view=anual&year=${year + 1}`,
                isNextDisabled: isNextYearDisabled
            };
            for (let i = -3; i <= 3; i++) {
                const y = year + i;
                const isItemFuture = isFuture(startOfYear(new Date(y, 0, 1)));
                const isCurrent = (y === currentYear);
                ribbon.push({
                    label: y.toString(),
                    subLabel: (isCurrent && i === 0) ? 'en curso' : null,
                    link: isItemFuture ? '#' : `/inicio?view=anual&year=${y}`,
                    isActive: i === 0,
                    isFuture: isItemFuture
                });
            }
            break;
        case 'mensual':
            startDate = new Date(year, month, 1);
            endDate = new Date(year, month + 1, 0);
            displayTitle = startDate.toLocaleString('es-AR', { month: 'long', year: 'numeric' }).replace(' de ', ' ').replace(/^\w/, c => c.toUpperCase());
            const prevMonth = new Date(year, month - 1, 1);
            const nextMonth = new Date(year, month + 1, 1);
            const isNextMonthDisabled = isFuture(startOfMonth(nextMonth));
            nav = {
                prevLink: `/inicio?view=mensual&year=${prevMonth.getFullYear()}&month=${prevMonth.getMonth() + 1}`,
                nextLink: isNextMonthDisabled ? '#' : `/inicio?view=mensual&year=${nextMonth.getFullYear()}&month=${nextMonth.getMonth() + 1}`,
                isNextDisabled: isNextMonthDisabled
            };
            for (let i = -3; i <= 3; i++) {
                const d = new Date(year, month + i, 1);
                const isItemFuture = isFuture(startOfMonth(d));
                const isCurrent = (d.getFullYear() === currentYear && d.getMonth() === currentMonth);
                ribbon.push({
                    label: d.toLocaleString('es-AR', { month: 'short', year: '2-digit' }).replace('.', ''),
                    subLabel: (isCurrent && i === 0) ? 'en curso' : null,
                    link: isItemFuture ? '#' : `/inicio?view=mensual&year=${d.getFullYear()}&month=${d.getMonth() + 1}`,
                    isActive: i === 0,
                    isFuture: isItemFuture
                });
            }
            break;
        case 'semanal':
            const dateInWeek = setISOWeek(setYear(new Date(), year), week);
            startDate = startOfISOWeek(dateInWeek);
            
            endDate = new Date(startDate);
            endDate.setDate(startDate.getDate() + 6);
            const displayWeek = getWeekNumber(startDate);
            const displayYear = getWeekYear(startDate, { weekStartsOn: 1 });
            displayTitle = `Semana ${displayWeek}, ${displayYear}`;
            const prevWeekDate = new Date(startDate);
            prevWeekDate.setDate(startDate.getDate() - 7);
            const nextWeekDate = new Date(startDate);
            nextWeekDate.setDate(startDate.getDate() + 7);
            const isNextWeekDisabled = isFuture(startOfWeek(nextWeekDate, { weekStartsOn: 1 }));
            nav = {
                prevLink: `/inicio?view=semanal&year=${getWeekYear(prevWeekDate, { weekStartsOn: 1 })}&week=${getWeekNumber(prevWeekDate)}`,
                nextLink: isNextWeekDisabled ? '#' : `/inicio?view=semanal&year=${getWeekYear(nextWeekDate, { weekStartsOn: 1 })}&week=${getWeekNumber(nextWeekDate)}`,
                isNextDisabled: isNextWeekDisabled
            };
            for (let i = -3; i <= 3; i++) {
                const d = new Date(startDate);
                d.setDate(startDate.getDate() + (i * 7));
                const weekStart = startOfISOWeek(d);
                const weekEnd = new Date(weekStart);
                weekEnd.setDate(weekStart.getDate() + 6);
                const formatoFecha = { day: 'numeric', month: 'short' };
                const subLabel = `${weekStart.toLocaleDateString('es-AR', formatoFecha).replace('.', '')} - ${weekEnd.toLocaleDateString('es-AR', formatoFecha).replace('.', '')}`;
                const w = getWeekNumber(d);
                const y = getWeekYear(d, { weekStartsOn: 1 });
                const isItemFuture = isFuture(startOfWeek(d, { weekStartsOn: 1 }));
                ribbon.push({
                    label: `Sem ${w}`,
                    subLabel: subLabel,
                    link: isItemFuture ? '#' : `/inicio?view=semanal&year=${y}&week=${w}`,
                    isActive: i === 0,
                    isFuture: isItemFuture
                });
            }
            break;
    }

    return { view, startDate: startDate.toISOString().slice(0, 10), endDate: endDate.toISOString().slice(0, 10), displayTitle, nav, ribbon };
};

/**
 * Genera la información de los períodos para el gráfico histórico (actual y 11 anteriores).
 * @param {object} periodInfo - El objeto con la información del período actual.
 * @returns {Array} - Un array de objetos, cada uno representando un período para el gráfico.
 */
const getChartPeriods = (periodInfo) => {
    const { view, startDate } = periodInfo;
    const chartPeriods = [];
    const currentPeriodDate = new Date(startDate + 'T00:00:00');

    for (let i = 0; i >= -11; i--) {
        let periodDate;
        let link;
        let label;
        let isPeriodFuture = false;

        switch (view) {
            case 'anual':
                periodDate = subYears(currentPeriodDate, -i);
                const year = getYear(periodDate);
                label = year.toString();
                link = `/inicio?view=anual&year=${year}`;
                isPeriodFuture = isFuture(startOfYear(periodDate));
                break;
            case 'mensual':
                periodDate = subMonths(currentPeriodDate, -i);
                const month = periodDate.getMonth() + 1;
                const monthYear = periodDate.getFullYear();
                label = periodDate.toLocaleString('es-AR', { month: 'short', year: '2-digit' }).replace('.', '');
                link = `/inicio?view=mensual&year=${monthYear}&month=${month}`;
                isPeriodFuture = isFuture(startOfMonth(periodDate));
                break;
            case 'semanal':
                periodDate = subWeeks(currentPeriodDate, -i);
                const week = getWeekNumber(periodDate);
                const weekYear = getWeekYear(periodDate, { weekStartsOn: 1 });
                label = `Sem ${week}`;
                link = `/inicio?view=semanal&year=${weekYear}&week=${week}`;
                isPeriodFuture = isFuture(startOfWeek(periodDate, { weekStartsOn: 1 }));
                break;
        }

        chartPeriods.push({
            label: label,
            link: isPeriodFuture ? '#' : link,
            isFuture: isPeriodFuture
        });
    }

    return chartPeriods.reverse();
};

/**
 * Obtiene los datos detallados por categoría para el gráfico de barras.
 * @param {Array} ribbon - El array con la información de los períodos del gráfico.
 * @returns {Array} - Un array con los datos desglosados para el gráfico.
 */
const getHistoryData = async (chartRibbon) => {
    const getRangeFromRibbonItem = (item) => {
        const params = new URLSearchParams(item.link.split('?')[1]);
        const view = params.get('view');
        const year = parseInt(params.get('year'));
        let startDate, endDate;
        switch (view) {
            case 'anual':
                startDate = new Date(year, 0, 1);
                endDate = new Date(year, 11, 31);
                break;
            case 'mensual':
                const month = parseInt(params.get('month')) - 1;
                startDate = new Date(year, month, 1);
                endDate = new Date(year, month + 1, 0);
                break;
            case 'semanal':
                const week = parseInt(params.get('week'));
                const dateInWeek = setISOWeek(setYear(new Date(), year), week);
                startDate = startOfISOWeek(dateInWeek);
                endDate = new Date(startDate);
                endDate.setDate(startDate.getDate() + 6);
                break;
        }
        return {
            startDate: startDate.toISOString().slice(0, 10),
            endDate: endDate.toISOString().slice(0, 10)
        };
    };

    const promises = chartRibbon.map(async (item) => {
        if (item.isFuture) {
            return { label: item.label, details: [] };
        }
        
        const { startDate, endDate } = getRangeFromRibbonItem(item);
        const sql = `
            SELECT 
                COALESCE(cat.nombre, 'Sin Categoría') as categoria, 
                m.tipo, 
                SUM(m.monto) as total 
            FROM movimientos m 
            LEFT JOIN categorias cat ON m.categoria_id = cat.id 
            WHERE m.fecha BETWEEN ? AND ? 
            GROUP BY categoria, m.tipo
        `;
        const details = await Consultas.dbAllAsync(sql, [startDate, endDate]);
        
        return {
            label: item.label,
            details: details
        };
    });

    return Promise.all(promises);
};


/**
 * Obtiene los datos del período anterior para comparación.
 * @param {object} periodInfo - Información del período actual.
 * @returns {object} - Objeto con los totales y la etiqueta del período anterior.
 */
const getComparisonData = async (periodInfo) => {
    const { view, startDate } = periodInfo;
    let prevStartDate, prevEndDate, previousPeriodLabel;

    const start = new Date(startDate + 'T00:00:00');
    switch (view) {
        case 'anual':
            prevStartDate = subYears(start, 1);
            prevEndDate = new Date(prevStartDate.getFullYear(), 11, 31);
            previousPeriodLabel = prevStartDate.getFullYear().toString();
            break;
        case 'mensual':
            prevStartDate = subMonths(start, 1);
            prevEndDate = new Date(prevStartDate.getFullYear(), prevStartDate.getMonth() + 1, 0);
            previousPeriodLabel = prevStartDate.toLocaleString('es-AR', { month: 'short', year: '2-digit' }).replace('.', '');
            break;
        case 'semanal':
            prevStartDate = subWeeks(start, 1);
            prevEndDate = new Date(prevStartDate);
            prevEndDate.setDate(prevStartDate.getDate() + 6);
            previousPeriodLabel = `Sem ${getWeekNumber(prevStartDate)}`;
            break;
    }
    
    const prevStartDateStr = prevStartDate.toISOString().slice(0, 10);
    const prevEndDateStr = prevEndDate.toISOString().slice(0, 10);
    const sql = `SELECT tipo, SUM(monto) as total FROM movimientos WHERE fecha BETWEEN ? AND ? GROUP BY tipo`;
    const prevTotalsRows = await Consultas.dbAllAsync(sql, [prevStartDateStr, prevEndDateStr]);

    const previous = {
        ingresos: prevTotalsRows.find(r => r.tipo === 'ingreso')?.total || 0,
        egresos: prevTotalsRows.find(r => r.tipo === 'egreso')?.total || 0,
        label: previousPeriodLabel
    };
    previous.resultado = previous.ingresos - previous.egresos;
    return previous;
};


// RUTA PRINCIPAL DEL TABLERO
router.get('/', async (req, res, next) => {
    try {
        // --- MODIFICACIÓN ---
        // Se verifica si la bandera de reseteo de PIN existe en la sesión.
        const pinWasReset = req.session.pinReset || false;
        if (pinWasReset) {
            delete req.session.pinReset; // Se limpia la bandera para que no se muestre de nuevo.
        }

        const periodInfo = getPeriodInfo(req.query);
        const { startDate, endDate } = periodInfo;

        const sqlTotal = `SELECT tipo, SUM(monto) as total FROM movimientos WHERE fecha BETWEEN ? AND ? GROUP BY tipo`;
        
        const [currentTotals, previousTotals] = await Promise.all([
            Consultas.dbAllAsync(sqlTotal, [startDate, endDate]),
            getComparisonData(periodInfo),
        ]);

        const chartRibbon = getChartPeriods(periodInfo);
        const historyData = await getHistoryData(chartRibbon);
        
        const parseTotals = (rows) => ({
            ingresos: rows.find(r => r.tipo === 'ingreso')?.total || 0,
            egresos: rows.find(r => r.tipo === 'egreso')?.total || 0
        });
        const current = parseTotals(currentTotals);
        const resultado = current.ingresos - current.egresos;
        const calculateChange = (current, previous) => {
            if (previous === 0) return null;
            return ((current - previous) / Math.abs(previous)) * 100;
        };

        const comparisonData = {
            ingresos: { change: calculateChange(current.ingresos, previousTotals.ingresos) },
            gastos: { change: calculateChange(current.egresos, previousTotals.egresos) },
            resultado: { change: calculateChange(resultado, previousTotals.resultado) },
            rentabilidad: current.ingresos > 0 ? (resultado / current.ingresos) * 100 : null,
            previousPeriodLabel: previousTotals.label
        };

        const chartData = {
            history: {
                periods: historyData,
            }
        };

        res.render('inicio', {
            title: 'Tablero', 
            active_link: 'inicio',
            periodInfo,
            ingresos: { total: current.ingresos },
            gastos: { total: current.egresos },
            resultado: { total: resultado },
            chartData,
            comparisonData,
            now: new Date(),
            pinWasReset: pinWasReset // Se pasa la variable a la plantilla.
        });
    } catch (err) {
        next(err);
    }
});


// ===============================================================
// INICIO DE RUTAS API PARA GRÁFICO PERSONALIZADO
// ===============================================================

// API para buscar entidades (clientes, proveedores, categorías)
router.get('/api/search-entities', async (req, res, next) => {
    try {
        const query = (req.query.q || '').trim();
        let results = [];
        
        if (query === '' || query === '*') {
            results = await Consultas.getAllEntitiesForSearch();
        } else {
            results = await Consultas.searchEntities(query);
        }
        res.json(results);
    } catch (err) {
        next(err);
    }
});

// API para obtener datos para el gráfico personalizado
router.get('/api/custom-chart-data', async (req, res, next) => {
    try {
        const periodInfo = getPeriodInfo(req.query);
        let chartRibbon = getChartPeriods(periodInfo);
        chartRibbon = chartRibbon.slice(-7);

        const selectedEntities = JSON.parse(req.query.entities || '[]');
        if (selectedEntities.length === 0) {
            return res.json({ labels: [], totals: [] });
        }

        const dataPromises = chartRibbon.map(item => {
            if (item.isFuture) {
                return Promise.resolve({ label: item.label, total: 0 });
            }
            const params = new URLSearchParams(item.link.split('?')[1]);
            const queryObj = Object.fromEntries(params.entries());
            const { startDate, endDate } = getPeriodInfo(queryObj);
            return Consultas.getTotalsForEntities(startDate, endDate, selectedEntities);
        });

        const results = await Promise.all(dataPromises);

        res.json({
            labels: chartRibbon.map(item => item.label),
            totals: results.map(r => Math.abs(r.total || 0))
        });

    } catch (err) {
        next(err);
    }
});
// ===============================================================
// FIN DE RUTAS API
// ===============================================================

// ===============================================================
// INICIO DE NUEVA RUTA API PARA RANKING
// ===============================================================
router.get('/api/ranking-data', async (req, res, next) => {
    try {
        const periodInfo = getPeriodInfo(req.query);
        const { startDate, endDate } = periodInfo;
        const type = req.query.type || 'clientes';

        let sql, params;

        switch (type) {
            case 'clientes':
                sql = `SELECT c.nombre as name, SUM(ABS(m.monto)) as total 
                       FROM movimientos m 
                       JOIN clientes c ON m.entidad_id = c.id 
                       WHERE m.entidad_tipo = 'cliente' AND m.tipo = 'ingreso' AND m.fecha BETWEEN ? AND ? 
                       GROUP BY m.entidad_id, c.nombre 
                       ORDER BY total DESC`;
                params = [startDate, endDate];
                break;
            case 'proveedores':
                sql = `SELECT p.nombre as name, SUM(ABS(m.monto)) as total 
                       FROM movimientos m 
                       JOIN proveedores p ON m.entidad_id = p.id 
                       WHERE m.entidad_tipo = 'proveedor' AND m.tipo = 'egreso' AND m.fecha BETWEEN ? AND ? 
                       GROUP BY m.entidad_id, p.nombre 
                       ORDER BY total DESC`;
                params = [startDate, endDate];
                break;
            case 'ingresos':
                sql = `SELECT c.nombre as name, SUM(ABS(m.monto)) as total 
                       FROM movimientos m 
                       JOIN categorias c ON m.categoria_id = c.id 
                       WHERE m.tipo = 'ingreso' AND m.fecha BETWEEN ? AND ? 
                       GROUP BY m.categoria_id, c.nombre 
                       ORDER BY total DESC`;
                params = [startDate, endDate];
                break;
            case 'egresos':
                sql = `SELECT c.nombre as name, SUM(ABS(m.monto)) as total 
                       FROM movimientos m 
                       JOIN categorias c ON m.categoria_id = c.id 
                       WHERE m.tipo = 'egreso' AND m.fecha BETWEEN ? AND ? 
                       GROUP BY m.categoria_id, c.nombre 
                       ORDER BY total DESC`;
                params = [startDate, endDate];
                break;
            default:
                return res.status(400).json({ error: 'Invalid ranking type' });
        }
        
        const results = await Consultas.dbAllAsync(sql, params);

        if (!results || results.length === 0) {
            return res.json({ top: [], rest: { total: 0, percentage: 0 }, grandTotal: 0 });
        }

        const grandTotal = results.reduce((sum, item) => sum + item.total, 0);

        const top5 = results.slice(0, 5).map(item => ({
            name: item.name,
            total: item.total,
            percentage: grandTotal > 0 ? (item.total / grandTotal) * 100 : 0
        }));

        const restTotal = results.slice(5).reduce((sum, item) => sum + item.total, 0);
        
        const rest = {
            total: restTotal,
            percentage: grandTotal > 0 ? (restTotal / grandTotal) * 100 : 0
        };

        res.json({ top: top5, rest, grandTotal });

    } catch (err) {
        next(err);
    }
});
// ===============================================================
// FIN DE NUEVA RUTA API PARA RANKING
// ===============================================================

module.exports = router;


----- C:\Users\Javier\Desktop\finanzas-app\routes\pago.js -----
// routes/pago.js

const express = require('express');
const router = express.Router();
const db = require('../db/database');
const Consultas = require('../db/consultas');

module.exports = function(requireLicense) {
    router.get('/', async (req, res, next) => {
        try {
            const { proveedor_id } = req.query;
            let proveedorSeleccionado = null;
            if (proveedor_id) {
                proveedorSeleccionado = await Consultas.dbGetAsync(`SELECT id, nombre, categoria_id FROM proveedores WHERE id = ?`, [proveedor_id]);
            }
            
            const [categorias, modalidades] = await Promise.all([
                Consultas.getCategoriasPorTipo('proveedor'),
                Consultas.getModalidades()
            ]);

            res.render('pago', {
                title: 'Carga de Egresos',
                active_link: 'pago',
                categorias,
                modalidades,
                movimiento: null,
                proveedorSeleccionado: proveedorSeleccionado,
                returnToReport: false,
                returnToRegistro: false,
                returnQuery: ''
            });
        } catch (err) {
            next(err);
        }
    });

    router.get('/editar/:id', async (req, res, next) => {
        try {
            const movimiento = await Consultas.getMovimientoPorId(req.params.id);
            if (!movimiento) return res.status(404).send("Movimiento no encontrado");

            const [proveedor, categorias, modalidades] = await Promise.all([
                Consultas.getProveedorPorId(movimiento.entidad_id),
                Consultas.getCategoriasPorTipo('proveedor'),
                Consultas.getModalidades()
            ]);

            const returnToRegistro = req.query.from === 'registro';
            const queryParams = { ...req.query };
            delete queryParams.from;
            const returnQuery = new URLSearchParams(queryParams).toString();

            res.render('pago', {
                title: 'Editar Egreso',
                active_link: 'pago',
                movimiento,
                proveedorSeleccionado: proveedor,
                categorias,
                modalidades,
                returnToReport: req.query.from === 'report',
                returnToRegistro,
                returnQuery
            });
        } catch (err) {
            next(err);
        }
    });

    router.post('/editar/:id', requireLicense, async (req, res, next) => {
        try {
            const { fecha, importe, proveedor_id, modalidad, categoria_id, comentarios, returnToReport, returnToRegistro, returnQuery, es_ajuste } = req.body;
            if (!categoria_id) return res.status(400).json({ success: false, message: 'El campo Categoría es obligatorio.' });
            
            const tipo = 'egreso';
            const monto = es_ajuste ? -Math.abs(parseFloat(importe)) : Math.abs(parseFloat(importe));

            const sql = `UPDATE movimientos SET fecha = ?, monto = ?, entidad_id = ?, modalidad = ?, descripcion = ?, tipo = ?, categoria_id = ? WHERE id = ?`;
            await Consultas.dbRunAsync(sql, [fecha, monto, proveedor_id, modalidad, comentarios, tipo, categoria_id, req.params.id]);
            
            if (returnToRegistro === 'true') return res.json({ success: true, redirectTo: `/registro?${returnQuery}&update=success` });
            if (returnToReport === 'true') return res.json({ success: true, redirectTo: `/reportes/generar?${returnQuery}&update=success` });
            res.json({ success: true, message: 'Movimiento actualizado con éxito' });
        } catch (err) {
            next(err);
        }
    });

    router.post('/', requireLicense, async (req, res, next) => {
        try {
            const { fecha, importe, proveedor_id, modalidad, categoria_id, comentarios, es_ajuste } = req.body;
            if (!fecha || !importe || !proveedor_id || !modalidad || !categoria_id) {
                return res.status(400).json({ success: false, message: 'Todos los campos son obligatorios.' });
            }
            
            const tipo = 'egreso';
            const monto = es_ajuste ? -Math.abs(parseFloat(importe)) : Math.abs(parseFloat(importe));
            
            const sql = `INSERT INTO movimientos (fecha, monto, tipo, entidad_id, entidad_tipo, modalidad, categoria_id, descripcion) VALUES (?, ?, ?, ?, 'proveedor', ?, ?, ?)`;
            await Consultas.dbRunAsync(sql, [fecha, monto, tipo, proveedor_id, modalidad, categoria_id, comentarios]);
            
            res.status(201).json({ success: true, message: 'Movimiento registrado con éxito.' });
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/proveedores', async (req, res, next) => {
        try {
            const query = req.query.q;
            if (!query) return res.json([]);
            const sql = `SELECT id, nombre, cuit, categoria_id FROM proveedores WHERE nombre LIKE ? OR id LIKE ? OR cuit LIKE ? LIMIT 10`;
            const rows = await Consultas.dbAllAsync(sql, [`%${query}%`, `%${query}%`, `%${query}%`]);
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/proveedores/recientes', async (req, res, next) => {
        try {
            const sql = `SELECT p.id, p.nombre, p.categoria_id FROM proveedores p JOIN (SELECT entidad_id, MAX(fecha) as last_mov_date FROM movimientos WHERE entidad_tipo = 'proveedor' GROUP BY entidad_id) m ON p.id = m.entidad_id ORDER BY m.last_mov_date DESC LIMIT 3`;
            const rows = await Consultas.dbAllAsync(sql);
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/proveedores/todos', async (req, res, next) => {
        try {
            const sql = `SELECT id, nombre, categoria_id FROM proveedores ORDER BY nombre ASC`;
            const rows = await Consultas.dbAllAsync(sql);
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/proveedores/:id', async (req, res, next) => {
        try {
            const row = await Consultas.getProveedorPorId(req.params.id);
            res.json(row);
        } catch (err) {
            next(err);
        }
    });

    router.post('/api/proveedores', requireLicense, async (req, res, next) => {
        try {
            const { nombre, cuit, telefono, email, comentarios, categoria_id } = req.body;
            if (!nombre || !cuit) return res.status(400).json({ success: false, message: 'Nombre y CUIT son obligatorios.' });
            if (!/^\d+$/.test(cuit)) return res.status(400).json({ success: false, message: 'El CUIT/DNI solo debe contener números.' });
            
            const row = await Consultas.dbGetAsync(`SELECT MAX(id) as maxId FROM proveedores`);
            const newId = (row.maxId || 20000) + 1;
            const sql = `INSERT INTO proveedores (id, nombre, cuit, telefono, email, observaciones, categoria_id) VALUES (?, ?, ?, ?, ?, ?, ?)`;
            
            await Consultas.dbRunAsync(sql, [newId, nombre, cuit, telefono, email, comentarios, categoria_id]);
            res.status(201).json({ success: true, newProveedor: { id: newId, nombre, categoria_id } });
        } catch (err) {
            if (err.code === 'SQLITE_CONSTRAINT') return res.status(409).json({ success: false, message: 'Ya existe un proveedor con ese CUIT/DNI.' });
            next(err);
        }
    });

    router.put('/api/proveedores/:id', requireLicense, async (req, res, next) => {
        try {
            const { nombre, cuit, telefono, email, comentarios, categoria_id } = req.body;
            if (!nombre || !cuit) return res.status(400).json({ success: false, message: 'Nombre y CUIT son obligatorios.' });
            if (!/^\d+$/.test(cuit)) return res.status(400).json({ success: false, message: 'El CUIT/DNI solo debe contener números.' });
            
            const sql = `UPDATE proveedores SET nombre = ?, cuit = ?, telefono = ?, email = ?, observaciones = ?, categoria_id = ? WHERE id = ?`;
            await Consultas.dbRunAsync(sql, [nombre, cuit, telefono, email, comentarios, categoria_id, req.params.id]);
            
            res.json({ success: true, updatedProveedor: { id: parseInt(req.params.id), nombre } });
        } catch (err) {
            if (err.code === 'SQLITE_CONSTRAINT') return res.status(409).json({ success: false, message: 'Ya existe un proveedor con ese CUIT/DNI.' });
            next(err);
        }
    });

    router.delete('/api/proveedores/:id', requireLicense, (req, res, next) => {
        db.serialize(async () => {
            try {
                await Consultas.dbRunAsync('BEGIN TRANSACTION');
                await Consultas.dbRunAsync(`DELETE FROM movimientos WHERE entidad_id = ? AND entidad_tipo = 'proveedor'`, [req.params.id]);
                await Consultas.dbRunAsync(`DELETE FROM proveedores WHERE id = ?`, [req.params.id]);
                await Consultas.dbRunAsync('COMMIT');
                res.json({ success: true, message: 'Proveedor y sus movimientos han sido eliminados.' });
            } catch (err) {
                await Consultas.dbRunAsync('ROLLBACK');
                next(err);
            }
        });
    });

    router.get('/api/proveedores/:id/movimientos', async (req, res, next) => {
        try {
            const [proveedor, movimientos] = await Promise.all([
                Consultas.dbGetAsync(`SELECT id, nombre FROM proveedores WHERE id = ?`, [req.params.id]),
                Consultas.dbAllAsync(`SELECT m.id, m.fecha, m.modalidad, m.tipo, m.monto, m.descripcion as comentarios, c.nombre as categoria_nombre FROM movimientos m LEFT JOIN categorias c ON m.categoria_id = c.id WHERE m.entidad_id = ? AND m.entidad_tipo = 'proveedor' ORDER BY m.fecha DESC, m.id DESC LIMIT 7`, [req.params.id])
            ]);
            if (!proveedor) return res.status(404).json({ message: 'Proveedor no encontrado' });
            
            res.render('partials/_historial_reciente_egresos', { movimientos, proveedorSeleccionado: proveedor }, (err, html) => {
                if (err) return next(err);
                res.json({ html });
            });
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/categorias/all', async (req, res, next) => {
        try {
            const rows = await Consultas.dbAllAsync("SELECT id, nombre, tipo FROM categorias ORDER BY nombre");
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/categorias', async (req, res, next) => {
        try {
            const { tipo } = req.query;
            if (!tipo) return res.status(400).json({ error: 'El tipo es requerido' });
            const rows = await Consultas.getCategoriasPorTipo(tipo);
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.post('/api/categorias', requireLicense, async (req, res, next) => {
        try {
            const { nombre, tipo } = req.body;
            if (!nombre || !tipo) return res.status(400).json({ success: false, message: 'Nombre y tipo son requeridos' });
            
            const existing = await Consultas.dbGetAsync("SELECT id FROM categorias WHERE lower(nombre) = lower(?)", [nombre]);
            if (existing) {
                return res.status(409).json({ success: false, message: 'Ya existe una categoría con ese nombre.' });
            }

            const result = await Consultas.dbRunAsync("INSERT INTO categorias (nombre, tipo) VALUES (?, ?)", [nombre, tipo]);
            res.status(201).json({ success: true, newCategoria: { id: result.lastID, nombre, tipo } });
        } catch (err) {
            next(err);
        }
    });

    router.put('/api/categorias/:id', requireLicense, async (req, res, next) => {
        try {
            const { nombre } = req.body;
            if (!nombre) return res.status(400).json({ success: false, message: 'El nombre es requerido' });
            
            const existing = await Consultas.dbGetAsync("SELECT id FROM categorias WHERE lower(nombre) = lower(?) AND id != ?", [nombre, req.params.id]);
            if (existing) {
                return res.status(409).json({ success: false, message: 'Ya existe otra categoría con ese nombre.' });
            }

            const result = await Consultas.dbRunAsync("UPDATE categorias SET nombre = ? WHERE id = ? AND es_editable = 1", [nombre, req.params.id]);
            if (result.changes === 0) return res.status(404).json({ success: false, message: 'Categoría no encontrada o no es editable.' });
            res.json({ success: true, message: 'Categoría actualizada.' });
        } catch (err) {
            next(err);
        }
    });

    router.delete('/api/categorias/:id', requireLicense, async (req, res, next) => {
        db.serialize(async () => {
            try {
                await Consultas.dbRunAsync('BEGIN TRANSACTION');
                const categoria = await Consultas.dbGetAsync("SELECT tipo FROM categorias WHERE id = ?", [req.params.id]);
                if (!categoria) {
                    throw new Error('Categoría no encontrada.');
                }
                const defaultCategoryName = 'Egresos sin categoría';
                const defaultCategory = await Consultas.dbGetAsync("SELECT id FROM categorias WHERE nombre = ? AND tipo = ?", [defaultCategoryName, categoria.tipo]);
                if (!defaultCategory) {
                    throw new Error(`La categoría por defecto "${defaultCategoryName}" no fue encontrada.`);
                }
                await Consultas.dbRunAsync("UPDATE movimientos SET categoria_id = ? WHERE categoria_id = ?", [defaultCategory.id, req.params.id]);
                const result = await Consultas.dbRunAsync("DELETE FROM categorias WHERE id = ? AND es_editable = 1", [req.params.id]);
                if (result.changes === 0) {
                    await Consultas.dbRunAsync('ROLLBACK');
                    return res.status(404).json({ success: false, message: 'Categoría no encontrada o no se puede eliminar.' });
                }
                await Consultas.dbRunAsync('COMMIT');
                res.json({ success: true, message: 'Categoría eliminada. Los movimientos asociados fueron reasignados.' });
            } catch (err) {
                await Consultas.dbRunAsync('ROLLBACK');
                next(err);
            }
        });
    });

    router.get('/api/modalidades', async (req, res, next) => {
        try {
            const rows = await Consultas.getModalidades();
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.post('/api/modalidades', requireLicense, async (req, res, next) => {
        try {
            const { nombre } = req.body;
            if (!nombre) return res.status(400).json({ success: false, message: 'El nombre es requerido' });
            const result = await Consultas.dbRunAsync("INSERT INTO modalidades (nombre, es_editable) VALUES (?, 1)", [nombre]);
            res.status(201).json({ success: true, newModalidad: { id: result.lastID, nombre, es_editable: 1 } });
        } catch (err) {
            if (err.code === 'SQLITE_CONSTRAINT') return res.status(409).json({ success: false, message: 'Esa modalidad ya existe.' });
            next(err);
        }
    });

    router.put('/api/modalidades/:id', requireLicense, async (req, res, next) => {
        try {
            const { nombre } = req.body;
            if (!nombre) return res.status(400).json({ success: false, message: 'El nombre es requerido' });
            const original = await Consultas.dbGetAsync("SELECT nombre FROM modalidades WHERE id = ? AND es_editable = 1", [req.params.id]);
            if (!original) return res.status(404).json({ success: false, message: 'Modalidad no encontrada o no es editable.' });
            await Consultas.dbRunAsync('BEGIN TRANSACTION');
            await Consultas.dbRunAsync("UPDATE movimientos SET modalidad = ? WHERE modalidad = ?", [nombre, original.nombre]);
            await Consultas.dbRunAsync("UPDATE modalidades SET nombre = ? WHERE id = ?", [nombre, req.params.id]);
            await Consultas.dbRunAsync('COMMIT');
            res.json({ success: true, message: 'Modalidad actualizada.' });
        } catch (err) {
            await Consultas.dbRunAsync('ROLLBACK');
            if (err.code === 'SQLITE_CONSTRAINT') return res.status(409).json({ success: false, message: 'Ese nombre de modalidad ya existe.' });
            next(err);
        }
    });

    router.delete('/api/modalidades/:id', requireLicense, async (req, res, next) => {
        try {
            const modality = await Consultas.dbGetAsync("SELECT nombre, es_editable FROM modalidades WHERE id = ?", [req.params.id]);
            if (!modality) return res.status(404).json({ success: false, message: 'Modalidad no encontrada.' });
            if (modality.es_editable === 0) return res.status(400).json({ success: false, message: 'Esta modalidad no se puede eliminar.' });
            await Consultas.dbRunAsync('BEGIN TRANSACTION');
            await Consultas.dbRunAsync("UPDATE movimientos SET modalidad = 'Efectivo' WHERE modalidad = ?", [modality.nombre]);
            await Consultas.dbRunAsync("DELETE FROM modalidades WHERE id = ?", [req.params.id]);
            await Consultas.dbRunAsync('COMMIT');
            res.json({ success: true, message: 'Modalidad eliminada.' });
        } catch (err) {
            await Consultas.dbRunAsync('ROLLBACK');
            next(err);
        }
    });

    return router;
};


----- C:\Users\Javier\Desktop\finanzas-app\routes\registro.js -----
// routes/registro.js

const express = require('express');
const router = express.Router();
const Consultas = require('../db/consultas');

router.get('/', async (req, res, next) => {
    try {
        const pagina = req.query.pagina || 1;
        const { tipo, busqueda, fecha_desde, fecha_hasta } = req.query;

        const resultados = await Consultas.getMovimientosPaginados({
            pagina,
            porPagina: 10,
            tipo,
            busqueda,
            fechaDesde: fecha_desde,
            fechaHasta: fecha_hasta
        });
        // Se crea una copia de los filtros y se elimina el parámetro 'update'
        // para que no se incluya en los enlaces de paginación.
        const filtrosParaPlantilla = { ...req.query };
        delete filtrosParaPlantilla.update;

        res.render('registro', {
            title: 'Registro de movimientos',
            active_link: 'registro',
            movimientos: resultados.movimientos,
            paginaActual: resultados.pagina,
            totalPaginas: resultados.totalPaginas,
            filtros: filtrosParaPlantilla // Se usan los filtros limpios
        });
    } catch (err) {
        next(err);
    }
});

module.exports = router;

----- C:\Users\Javier\Desktop\finanzas-app\routes\reportes.js -----
// routes/reportes.js

const express = require('express');
const router = express.Router();
const xlsx = require('xlsx');
const PDFDocument = require('pdfkit');
const Consultas = require('../db/consultas');

module.exports = function(requireLicense) {
    // Helper para asegurar que un valor sea un array
    const ensureArray = (value) => {
        if (Array.isArray(value)) return value;
        if (value) return [value];
        return [];
    };

    const formatDateForDisplay = (dateString) => {
        if (!dateString) return '';
        const date = new Date(dateString + 'T00:00:00');
        return date.toLocaleDateString('es-AR', { day: '2-digit', month: '2-digit', year: 'numeric' });
    };

    function addPdfHeader(doc, username) {
        const range = doc.bufferedPageRange();
        
        for (let i = range.start; i < range.start + range.count; i++) {
            doc.switchToPage(i);
            const y = doc.page.margins.top / 2 - 10;
            const pageThird = (doc.page.width - doc.page.margins.left - doc.page.margins.right) / 3;
            doc.fontSize(8).fillColor('grey');
            doc.text(
                `Emitido: ${new Date().toLocaleString('es-AR', { dateStyle: 'short', timeStyle: 'short', hour12: false})}`,
                doc.page.margins.left, y, { align: 'left', width: pageThird }
            );
            if (username) {
                doc.text(
                    `Usuario: ${username}`,
                    doc.page.margins.left + pageThird, y, { align: 'center', width: pageThird }
                );
            }
            doc.text(
                `Página ${i + 1} de ${range.count}`,
                doc.page.margins.left + (pageThird * 2), y, { align: 'right', width: pageThird }
            );
        }
    }

    function formatCurrency(value) {
        const number = Number(value) || 0;
        const sign = number < 0 ? '- ' : '';
        const formattedNumber = new Intl.NumberFormat('es-AR', { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(Math.abs(number));
        return `${sign}${formattedNumber}`;
    }

    function drawHeaderInfo(doc, data, reportTitle) {
        doc.fontSize(16).text(reportTitle, { align: 'center' });
        doc.fontSize(10).text(`Período: ${formatDateForDisplay(data.periodo.desde)} al ${formatDateForDisplay(data.periodo.hasta)}`, { align: 'center' });
        doc.moveDown(1.5);
        const startX = doc.page.margins.left;
        const contentWidth = doc.page.width - doc.page.margins.left - doc.page.margins.right;
        const initialY = doc.y;
        let currentY = initialY;
        let columnX = startX;
        doc.fontSize(9);
        if (data.tipo !== 'egreso') {
            doc.font('Helvetica-Bold').text('Total Ingresos:', columnX, currentY, { continued: true });
            doc.font('Helvetica').text(` ${formatCurrency(data.totalIngresos)}`);
            currentY += 15;
        }
        if (data.tipo !== 'ingreso') {
            doc.font('Helvetica-Bold').text('Total Egresos:', columnX, currentY, { continued: true });
            doc.font('Helvetica').text(` ${formatCurrency(-data.totalEgresos)}`);
            currentY += 15;
        }
        if (data.tipo === 'todos') {
            doc.font('Helvetica-Bold').text('Resultado del Período:', columnX, currentY, { continued: true });
            doc.font('Helvetica').text(` ${formatCurrency(data.resultado)}`);
        }
        if (Object.keys(data.filtrosAplicados).length > 0) {
            columnX = startX + contentWidth / 2;
            currentY = initialY;
            doc.font('Helvetica-Bold').text('Filtros Aplicados:', columnX, currentY);
            currentY += 15;
            doc.font('Helvetica');
            for (const [key, value] of Object.entries(data.filtrosAplicados)) {
                const text = `${key}: ${value}`;
                doc.text(text, columnX, currentY, { width: contentWidth / 2 - 20 });
                const textHeight = doc.heightOfString(text, { width: contentWidth / 2 - 20 });
                currentY += textHeight + 2;
            }
        }
        doc.y = Math.max(currentY, doc.y);
        doc.moveDown(2);
    }

    // ... (The rest of the helper functions: getHeaderDataAsArray, drawPdfResumenRow, procesarResumen, getReportData)
    // These functions do not need to be changed as they are pure data processing functions.

    function getHeaderDataAsArray(data) {
        const headerData = [[]];
        if (data.tipo !== 'egreso') {
            headerData.push(['Total Ingresos:', Number(data.totalIngresos)]);
        }
        if (data.tipo !== 'ingreso') {
            headerData.push(['Total Egresos:', Number(-data.totalEgresos)]);
        }
        if (data.tipo === 'todos') {
            headerData.push(['Resultado del Período:', Number(data.resultado)]);
        }
        headerData.push([]);
        if (Object.keys(data.filtrosAplicados).length > 0) {
            headerData.push(['Filtros Aplicados:']);
            for (const [key, value] of Object.entries(data.filtrosAplicados)) {
                headerData.push([`${key}:`, value]);
            }
            headerData.push([]);
        }
        return headerData;
    }
    
    function drawPdfResumenRow(doc, items, level, config) {
        const { isAllTypes, colWidths, startX, drawHeader, tipo, margins } = config;
        items.forEach(item => {
            if (doc.y > doc.page.height - doc.page.margins.bottom - 40) {
                doc.addPage({ margins: margins });
                drawHeader(doc.y);
            }
            const y = doc.y;
            let x = startX;
            const indentation = ' '.repeat(level * 4);
            const font = level === 1 ? 'Helvetica-Bold' : (level === 2 ? 'Helvetica' : 'Helvetica-Oblique');
            const fontSize = 10 - (level * 0.5);
            doc.fontSize(fontSize).font(font);
            doc.text(indentation + item.clave, x, y + 5, { width: colWidths[0] });
            x += colWidths[0];
            if (isAllTypes) {
                doc.text(formatCurrency(item.ingresos), x, y + 5, { width: colWidths[1], align: 'right' });
                x += colWidths[1];
                doc.text(formatCurrency(-item.egresos), x, y + 5, { width: colWidths[2], align: 'right' });
                x += colWidths[2];
                doc.text(formatCurrency(item.resultado), x, y + 5, { width: colWidths[3], align: 'right' });
            } else {
                const amount = tipo === 'ingreso' ? item.ingresos : -item.egresos;
                doc.text(formatCurrency(amount), x, y + 5, { width: colWidths[1], align: 'right' });
            }
            doc.y = y + doc.heightOfString(item.clave, { width: colWidths[0] }) + 5;
            const lineY = doc.y + 2;
            const strokeColor = level === 1 ? "#807a7d" : "#dddddd";
            const lineWidth = level === 1 ? 0.8 : 0.5;
            doc.strokeColor(strokeColor).lineWidth(lineWidth).moveTo(startX, lineY).lineTo(startX + colWidths.reduce((a, b) => a + b), lineY).stroke().lineWidth(1);
            doc.moveDown(0.5);
            if (item.subgrupos && item.subgrupos.length > 0) {
                drawPdfResumenRow(doc, item.subgrupos, level + 1, config);
            }
        });
    }

    function procesarResumen(movimientos, niveles) {
        if (!niveles || niveles.length === 0) {
            return [];
        }
        const getWeekNumber = (d) => {
            d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
            d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
            const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
            return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
        };
        const agrupar = (movs, nivelActual) => {
            if (!movs || movs.length === 0) {
                return [];
            }
            const grupos = movs.reduce((acc, mov) => {
                let clave;
                let sortKey;

                switch (nivelActual) {
                    case 'mensual':
                        const dateMensual = new Date(mov.fecha + 'T00:00:00');
                        const yearMensual = dateMensual.getFullYear();
                        const monthNumber = (dateMensual.getMonth() + 1).toString().padStart(2, '0');
                        let monthName = dateMensual.toLocaleString('es-AR', { month: 'long' });
                        monthName = monthName.charAt(0).toUpperCase() + monthName.slice(1);
                        clave = `${yearMensual}-${monthName}`;
                        sortKey = `${yearMensual}-${monthNumber}`;
                        break;
                    case 'semanal':
                        const dateSemanal = new Date(mov.fecha + 'T00:00:00');
                        const yearSemanal = dateSemanal.getFullYear();
                        const week = getWeekNumber(dateSemanal);
                        clave = `${yearSemanal}-Semana.${String(week).padStart(2, '0')}`;
                        sortKey = clave;
                        break;
                    case 'categoria':
                        clave = mov.categoria_nombre || 'Sin categorizar';
                        sortKey = clave;
                        break;
                    case 'entidad':
                        clave = mov.entidad_nombre || 'General';
                        sortKey = clave;
                        break;
                    case 'modalidad':
                        clave = mov.modalidad || 'No especificada';
                        sortKey = clave;
                        break;
                    default:
                        clave = 'Desconocido';
                        sortKey = clave;
                }
                if (!acc[clave]) {
                    acc[clave] = { clave: clave, sortKey: sortKey, movimientos: [], ingresos: 0, egresos: 0, resultado: 0 };
                }
                acc[clave].movimientos.push(mov);
                if (mov.tipo === 'ingreso') {
                    acc[clave].ingresos += mov.monto;
                } else {
                    acc[clave].egresos += mov.monto;
                }
                acc[clave].resultado = acc[clave].ingresos - acc[clave].egresos;
                return acc;
            }, {});
            const resultadoArray = Object.values(grupos);
            const proximoNivel = niveles[niveles.indexOf(nivelActual) + 1];
            if (proximoNivel) {
                resultadoArray.forEach(grupo => {
                    grupo.subgrupos = agrupar(grupo.movimientos, proximoNivel);
                    delete grupo.movimientos;
                });
            } else {
                 resultadoArray.forEach(grupo => {
                    delete grupo.movimientos;
                });
            }
            return resultadoArray.sort((a, b) => a.sortKey.localeCompare(b.sortKey));
        };
        return agrupar(movimientos, niveles[0]);
    }
    
    async function getReportData(queryParams) {
        const {
            desde, hasta, tipo, invertir_orden,
            clientes, proveedores, modalidades, categorias,
            mostrar_comentarios,
            resumen_nivel_1, resumen_nivel_2, resumen_nivel_3
        } = queryParams;
        let sql = `
            SELECT 
                m.*, 
                COALESCE(cat.nombre, 'Sin categorizar') as categoria_nombre, 
                CASE 
                    WHEN m.entidad_tipo = 'cliente' THEN c.nombre 
                    WHEN m.entidad_tipo = 'proveedor' THEN p.nombre 
                    ELSE 'N/A' 
                END as entidad_nombre 
            FROM movimientos m 
            LEFT JOIN clientes c ON m.entidad_id = c.id AND m.entidad_tipo = 'cliente' 
            LEFT JOIN proveedores p ON m.entidad_id = p.id AND m.entidad_tipo = 'proveedor' 
            LEFT JOIN categorias cat ON m.categoria_id = cat.id
        `;
        const whereClauses = ['m.fecha BETWEEN ? AND ?'];
        const params = [desde, hasta];
        const filtrosAplicados = {};
        if (tipo && tipo !== 'todos') {
            whereClauses.push('m.tipo = ?');
            params.push(tipo);
            filtrosAplicados.tipo = tipo === 'ingreso' ? 'Solo Ingresos' : 'Solo Egresos';
        }
        const categoriasArr = ensureArray(categorias);
        if (categoriasArr.length > 0) {
            whereClauses.push(`m.categoria_id IN (${categoriasArr.map(() => '?').join(',')})`);
            params.push(...categoriasArr);
            const nombresResult = await Consultas.dbAllAsync(`SELECT nombre FROM categorias WHERE id IN (${categoriasArr.map(() => '?').join(',')})`, categoriasArr);
            if (nombresResult.length > 0) {
                filtrosAplicados['Categorías'] = nombresResult.map(c => c.nombre).join(', ');
            }
        }
        const modalidadesArr = ensureArray(modalidades);
        if (modalidadesArr.length > 0) {
            whereClauses.push(`m.modalidad IN (${modalidadesArr.map(() => '?').join(',')})`);
            params.push(...modalidadesArr);
            filtrosAplicados['Modalidades'] = modalidadesArr.join(', ');
        }
        const clientesArr = ensureArray(clientes);
        const proveedoresArr = ensureArray(proveedores);
        const entidadClauses = [];
        if (clientesArr.length > 0) {
            entidadClauses.push(`(m.entidad_tipo = 'cliente' AND m.entidad_id IN (${clientesArr.map(() => '?').join(',')}))`);
            params.push(...clientesArr);
            const nombresResult = await Consultas.dbAllAsync(`SELECT nombre FROM clientes WHERE id IN (${clientesArr.map(() => '?').join(',')})`, clientesArr);
            if (nombresResult.length > 0) {
                filtrosAplicados.Clientes = nombresResult.map(c => c.nombre).join(', ');
            }
        }
        if (proveedoresArr.length > 0) {
            entidadClauses.push(`(m.entidad_tipo = 'proveedor' AND m.entidad_id IN (${proveedoresArr.map(() => '?').join(',')}))`);
            params.push(...proveedoresArr);
            const nombresResult = await Consultas.dbAllAsync(`SELECT nombre FROM proveedores WHERE id IN (${proveedoresArr.map(() => '?').join(',')})`, proveedoresArr);
            if (nombresResult.length > 0) {
                filtrosAplicados.Proveedores = nombresResult.map(p => p.nombre).join(', ');
            }
        }
        if (entidadClauses.length > 0) {
            whereClauses.push(`(${entidadClauses.join(' OR ')})`);
        }
        if (whereClauses.length > 0) {
            sql += ` WHERE ${whereClauses.join(' AND ')}`;
        }
        const orden = invertir_orden ? 'ASC' : 'DESC';
        sql += ` ORDER BY m.fecha ${orden}, m.id ${orden}`;
        const movimientos = await Consultas.dbAllAsync(sql, params);
        const totalIngresos = movimientos.filter(m => m.tipo === 'ingreso').reduce((sum, m) => sum + m.monto, 0);
        const totalEgresos = movimientos.filter(m => m.tipo === 'egreso').reduce((sum, m) => sum + m.monto, 0);
        let resultadosResumen = null;
        const nivelesResumen = [resumen_nivel_1, resumen_nivel_2, resumen_nivel_3].filter(Boolean);
        if (nivelesResumen.length > 0) {
            resultadosResumen = procesarResumen(movimientos, nivelesResumen);
        }
        return {
            movimientos, totalIngresos, totalEgresos, resultado: totalIngresos - totalEgresos,
            periodo: { desde, hasta }, tipo, orden, filtrosAplicados, mostrar_comentarios,
            resultadosResumen, nivelesResumen
        };
    }

    router.get('/', async (req, res, next) => {
        try {
            const [modalidades, categorias, clientes, proveedores] = await Promise.all([
                Consultas.getModalidadesUnicas(),
                Consultas.getCategorias(),
                Consultas.getClientes(),
                Consultas.getProveedores()
            ]);
            res.render('reportes', {
                title: 'Reportes',
                active_link: 'reportes',
                resultados: null,
                resultadosResumen: null,
                modalidades,
                categorias,
                clientes,
                proveedores,
                query: {}
            });
        } catch (err) {
            next(err);
        }
    });

    router.get('/generar', requireLicense, async (req, res, next) => {
        try {
            const { fecha_desde, fecha_hasta } = req.query;
            if (!fecha_desde || !fecha_hasta) {
                 return res.redirect('/reportes');
            }
            const data = await getReportData({
                desde: fecha_desde,
                hasta: fecha_hasta,
                tipo: req.query.tipo,
                invertir_orden: req.query.invertir_orden,
                clientes: req.query.clientes,
                proveedores: req.query.proveedores,
                modalidades: req.query.modalidad,
                categorias: req.query.categoria_id,
                mostrar_comentarios: req.query.mostrar_comentarios,
                resumen_nivel_1: req.query.resumen_nivel_1,
                resumen_nivel_2: req.query.resumen_nivel_2,
                resumen_nivel_3: req.query.resumen_nivel_3,
            });
            const [modalidades, categorias, clientes, proveedores] = await Promise.all([
                Consultas.getModalidadesUnicas(),
                Consultas.getCategorias(),
                Consultas.getClientes(),
                Consultas.getProveedores()
            ]);
            res.render('reportes', {
                title: 'Reportes',
                active_link: 'reportes',
                resultados: data,
                resultadosResumen: data.resultadosResumen,
                modalidades,
                categorias,
                clientes,
                proveedores,
                query: req.query
            });
        } catch (err) {
            next(err);
        }
    });

    router.post('/generar', requireLicense, (req, res) => {
        const params = new URLSearchParams();
        for (const key in req.body) {
            const value = req.body[key];
            if (Array.isArray(value)) {
                value.forEach(item => params.append(key, item));
            } else if (value) {
                params.append(key, value);
            }
        }
        res.redirect(`/reportes/generar?${params.toString()}`);
    });

    function generarPdfDetalle(res, data, username) {
        const margins = { top: 72, bottom: 72, left: 40, right: 40 };
        const doc = new PDFDocument({ layout: 'landscape', margins: margins, size: 'A4', bufferPages: true });
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', 'attachment; filename=reporte_detalle.pdf');
        doc.pipe(res);
        drawHeaderInfo(doc, data, 'Reporte Detallado de Movimientos');
        const headers = ["Fecha", "Entidad", "Categoría", "Modalidad", "Importe"];
        const colWidths = [80, 250, 180, 100, 110];
        const tableWidth = colWidths.reduce((a, b) => a + b);
        const availableWidth = doc.page.width - doc.page.margins.left - doc.page.margins.right;
        const startX = doc.page.margins.left + (availableWidth - tableWidth) / 2;
        const drawHeader = (y) => {
            let x = startX;
            doc.fontSize(9).font('Helvetica-Bold');
            headers.forEach((header, i) => {
                doc.text(header, x, y, { width: colWidths[i], align: i === 4 ? 'right' : 'left' });
                x += colWidths[i];
            });
            doc.moveTo(startX, y + 15).lineTo(startX + tableWidth, y + 15).stroke('#aaaaaa');
            doc.font('Helvetica');
        };
        drawHeader(doc.y);
        doc.moveDown(0.5);
        data.movimientos.forEach(m => {
            const estRowHeight = data.mostrar_comentarios && m.descripcion ? 40 : 20;
            if (doc.y > doc.page.height - doc.page.margins.bottom - estRowHeight) {
                doc.addPage({ layout: 'landscape', size: 'A4', margins: margins });
                drawHeader(doc.y);
                doc.moveDown(0.5);
            }
            let x = startX;
            const importeFinal = m.tipo === 'ingreso' ? Number(m.monto) : -Number(m.monto);
            const row = [
                new Date(m.fecha + 'T00:00:00').toLocaleDateString('es-AR', { day: '2-digit', month: '2-digit', year: '2-digit' }),
                String(m.entidad_nombre || 'N/A'),
                String(m.categoria_nombre || 'N/A'),
                String(m.modalidad || ''),
                formatCurrency(importeFinal)
            ];
            const y = doc.y;
            doc.fontSize(9);
            row.forEach((cell, i) => {
                doc.text(cell, x, y, { width: colWidths[i], align: i === 4 ? 'right' : 'left' });
                x += colWidths[i];
            });
            const rowHeight = doc.y - y;
            let finalY = y + rowHeight;
            if (data.mostrar_comentarios && m.descripcion) {
                doc.font('Helvetica-Oblique').fontSize(8).fillColor('grey');
                doc.text(`↳ ${m.descripcion}`, startX + 10, doc.y, {
                    width: tableWidth - 20,
                    align: 'left'
                });
                doc.font('Helvetica').fontSize(9).fillColor('black');
                finalY = doc.y;
            }
            doc.moveTo(startX, finalY + 3).lineTo(startX + tableWidth, finalY + 3).stroke('#dddddd');
            doc.y = finalY + 5;
        });
        addPdfHeader(doc, username);
        doc.end();
    }
    
    function generarExcelDetalle(res, data) {
        const wb = xlsx.utils.book_new();
        const headerArray = getHeaderDataAsArray(data);
        const headers = ["Fecha", "Entidad", "Categoría", "Modalidad", "Importe"];
        if (data.mostrar_comentarios) {
            headers.push("Comentarios");
        }
        const ws_data = [
            ["Reporte Detallado"],
            [`Período: ${formatDateForDisplay(data.periodo.desde)} al ${formatDateForDisplay(data.periodo.hasta)}`],
            ...headerArray,
            headers
        ];
        const dataStartIndex = ws_data.length;
        data.movimientos.forEach(m => {
            const importeFinal = m.tipo === 'ingreso' ? Number(m.monto) : -Number(m.monto);
            const [year, month, day] = m.fecha.split('-').map(Number);
            const fechaObjeto = new Date(Date.UTC(year, month - 1, day));
            const row = [
                fechaObjeto,
                m.entidad_nombre,
                m.categoria_nombre,
                m.modalidad,
                importeFinal
            ];
            if (data.mostrar_comentarios) {
                row.push(m.descripcion || '');
            }
            ws_data.push(row);
        });
        const ws = xlsx.utils.aoa_to_sheet(ws_data);
        const numberFormat = '#,##0.00';
        const dateFormat = 'dd/mm/yyyy';
        for (let i = dataStartIndex; i < ws_data.length; i++) {
            const dateCellRef = xlsx.utils.encode_cell({r: i, c: 0});
            if (ws[dateCellRef] && ws[dateCellRef].v instanceof Date) {
                ws[dateCellRef].t = 'd';
                ws[dateCellRef].z = dateFormat;
            }
            const amountCellRef = xlsx.utils.encode_cell({r: i, c: 4});
            if (ws[amountCellRef]) {
                ws[amountCellRef].t = 'n';
                ws[amountCellRef].z = numberFormat;
            }
        }
        headerArray.forEach((row, index) => {
            if(row.length > 1 && typeof row[1] === 'number') {
                const cellRef = xlsx.utils.encode_cell({r: index + 2, c: 1});
                 if(ws[cellRef]) {
                    ws[cellRef].t = 'n';
                    ws[cellRef].z = numberFormat;
                 }
            }
        });
        xlsx.utils.book_append_sheet(wb, ws, "Reporte Detallado");
        const buf = xlsx.write(wb, { type: 'buffer', bookType: 'xlsx' });
        res.setHeader('Content-Disposition', 'attachment; filename="reporte_detallado.xlsx"');
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        res.send(buf);
    }
    
    function generarPdfResumen(res, data, username) {
        const margins = { top: 72, bottom: 72, left: 40, right: 40 };
        const doc = new PDFDocument({ margins: margins, size: 'A4', bufferPages: true });
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', 'attachment; filename=reporte_resumen.pdf');
        doc.pipe(res);
        drawHeaderInfo(doc, data, 'Reporte Resumido de Movimientos');
        const isAllTypes = data.tipo === 'todos';
        const headers = isAllTypes ? ['Concepto', 'Ingresos', 'Egresos', 'Resultado'] : ['Concepto', 'Importe'];
        const colWidths = isAllTypes ? [300, 80, 80, 80] : [400, 120];
        const tableWidth = colWidths.reduce((a, b) => a + b);
        const availableWidth = doc.page.width - doc.page.margins.left - doc.page.margins.right;
        const startX = doc.page.margins.left + (availableWidth - tableWidth) / 2;
        const drawHeader = (y) => {
            let x = startX;
            doc.fontSize(9).font('Helvetica-Bold');
            headers.forEach((header, i) => {
                doc.text(header, x, y, { width: colWidths[i], align: i > 0 ? 'right' : 'left' });
                x += colWidths[i];
            });
            doc.moveTo(startX, y + 12).lineTo(startX + tableWidth, y + 12).stroke('#aaaaaa');
            doc.font('Helvetica');
        };
        drawHeader(doc.y);
        const recursiveConfig = {
            isAllTypes, colWidths, startX, drawHeader, tipo: data.tipo, margins: margins
        };
        drawPdfResumenRow(doc, data.resultadosResumen, 1, recursiveConfig);
        doc.moveDown(0.5);
        doc.fontSize(10).font('Helvetica-Bold');
        let x = startX;
        doc.text('Total del Período:', x, doc.y);
        x += colWidths[0];
        if (isAllTypes) {
            doc.text(formatCurrency(data.totalIngresos), x, doc.y, { width: colWidths[1], align: 'right' });
            x += colWidths[1];
            doc.text(formatCurrency(-data.totalEgresos), x, doc.y, { width: colWidths[2], align: 'right' });
            x += colWidths[2];
            doc.text(formatCurrency(data.resultado), x, doc.y, { width: colWidths[3], align: 'right' });
        } else {
            const totalAmount = data.tipo === 'ingreso' ? data.totalIngresos : -data.totalEgresos;
            doc.text(formatCurrency(totalAmount), x, doc.y, { width: colWidths[1], align: 'right' });
        }
        addPdfHeader(doc, username);
        doc.end();
    }
    
    function generarExcelResumen(res, data) {
        const wb = xlsx.utils.book_new();
        const isAllTypes = data.tipo === 'todos';
        const headers = isAllTypes ? ['Concepto', 'Ingresos', 'Egresos', 'Resultado'] : ['Concepto', 'Importe'];
        const headerArray = getHeaderDataAsArray(data);
        const ws_data = [
            ["Reporte Resumido"],
            [`Período: ${formatDateForDisplay(data.periodo.desde)} al ${formatDateForDisplay(data.periodo.hasta)}`],
            ...headerArray,
            headers
        ];
        const dataStartIndex = ws_data.length;
        const addRowsRecursive = (items, level) => {
            items.forEach(item => {
                const indentation = ' '.repeat(level * 4);
                let row = [indentation + item.clave];
                if (isAllTypes) {
                    row.push(Number(item.ingresos), Number(-item.egresos), Number(item.resultado));
                } else {
                    const amount = data.tipo === 'ingreso' ? item.ingresos : -item.egresos;
                    row.push(Number(amount));
                }
                ws_data.push(row);
                if (item.subgrupos) {
                    addRowsRecursive(item.subgrupos, level + 1);
                }
            });
        };
        addRowsRecursive(data.resultadosResumen, 1);
        ws_data.push([]);
        let totalRow = ['Total del Período:'];
        if (isAllTypes) {
            totalRow.push(Number(data.totalIngresos), Number(-data.totalEgresos), Number(data.resultado));
        } else {
            const totalAmount = data.tipo === 'ingreso' ? data.totalIngresos : -data.totalEgresos;
            totalRow.push(Number(totalAmount));
        }
        ws_data.push(totalRow);
        const ws = xlsx.utils.aoa_to_sheet(ws_data);
        const numberFormat = '#,##0.00';
        for (let i = dataStartIndex; i <= ws_data.length; i++) {
            for (let j = 1; j < headers.length; j++) {
                const cellRef = xlsx.utils.encode_cell({r: i - 1, c: j});
                if (ws[cellRef] && typeof ws[cellRef].v === 'number') {
                    ws[cellRef].t = 'n';
                    ws[cellRef].z = numberFormat;
                }
            }
        }
        headerArray.forEach((row, index) => {
            if(row.length > 1 && typeof row[1] === 'number') {
                const cellRef = xlsx.utils.encode_cell({r: index + 2, c: 1});
                 if(ws[cellRef]) {
                    ws[cellRef].t = 'n';
                    ws[cellRef].z = numberFormat;
                 }
            }
        });
        xlsx.utils.book_append_sheet(wb, ws, "Resumen");
        const buf = xlsx.write(wb, { type: 'buffer', bookType: 'xlsx' });
        res.setHeader('Content-Disposition', 'attachment; filename="reporte_resumen.xlsx"');
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        res.send(buf);
    }

    router.get('/exportar/detalle/:formato', requireLicense, async (req, res, next) => {
        try {
            const { formato } = req.params;
            const data = await getReportData({
                desde: req.query.desde,
                hasta: req.query.hasta,
                tipo: req.query.tipo,
                invertir_orden: req.query.invertir_orden,
                clientes: req.query.clientes,
                proveedores: req.query.proveedores,
                modalidades: req.query.modalidad,
                categorias: req.query.categoria_id,
                mostrar_comentarios: req.query.mostrar_comentarios
            });
            if (formato === 'pdf') generarPdfDetalle(res, data, req.app.locals.username);
            else if (formato === 'excel') generarExcelDetalle(res, data);
            else res.status(400).send("Formato no válido");
        } catch (err) {
            next(err);
        }
    });

    router.get('/exportar/resumen/:formato', requireLicense, async (req, res, next) => {
        try {
            const { formato } = req.params;
            const data = await getReportData({
                desde: req.query.desde,
                hasta: req.query.hasta,
                tipo: req.query.tipo,
                clientes: req.query.clientes,
                proveedores: req.query.proveedores,
                modalidades: req.query.modalidad,
                categorias: req.query.categoria_id,
                resumen_nivel_1: req.query.resumen_nivel_1,
                resumen_nivel_2: req.query.resumen_nivel_2,
                resumen_nivel_3: req.query.resumen_nivel_3,
            });
            if (formato === 'pdf') generarPdfResumen(res, data, req.app.locals.username);
            else if (formato === 'excel') generarExcelResumen(res, data);
            else res.status(400).send("Formato no válido");
        } catch (err) {
            next(err);
        }
    });
    
    return router;
};


----- C:\Users\Javier\Desktop\finanzas-app\routes\settings.js -----
// routes/settings.js

const express = require('express');
const router = express.Router();
const fs = require('fs');
const path = require('path');
const os = require('os');
const db = require('../db/database');
const localBackupHelper = require('../utils/localBackupHelper');
const crypto = require('crypto');
const multer = require('multer');

// Configurar multer para guardar el archivo en el directorio temporal del sistema
const upload = multer({ dest: os.tmpdir() });

const LICENSE_FILE_PATH = path.resolve(__dirname, '../license.json');
const SECRET_KEY = 'tu-clave-secreta-para-generar-licencias'; 

const restartPageHtml = `
    <!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <title>Reiniciando Aplicación</title>
        <style>
            body { font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; text-align: center; padding: 50px; background-color: #f4f7f9; color: #333; }
            .container { max-width: 600px; margin: auto; padding: 2rem; background-color: #fff; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
            h1 { color: #0056b3; }
            .loader { border: 5px solid #f3f3f3; border-radius: 50%; border-top: 5px solid #3498db; width: 50px; height: 50px; -webkit-animation: spin 2s linear infinite; animation: spin 2s linear infinite; margin: 20px auto; }
            @-webkit-keyframes spin { 0% { -webkit-transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); } }
            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Operación completada.</h1>
            <p>La aplicación se está reiniciando. Serás redirigido a la página de inicio de sesión en unos segundos.</p>
            <div class="loader"></div>
            <p>Si la redirección no funciona, <a href="/login">haz clic aquí</a>.</p>
        </div>
        <script>
            setTimeout(() => {
                window.location.href = '/login';
            }, 5000);
        </script>
    </body>
    </html>
`;

module.exports = function(requireLicense) {

    function getConfig() {
        const configPath = path.resolve(__dirname, '../config.json');
        const rawdata = fs.readFileSync(configPath);
        return JSON.parse(rawdata);
    }
    function saveConfig(config) {
        const configPath = path.resolve(__dirname, '../config.json');
        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    }

    function generateCorrectLicenseKey(username, cuit) {
        if (!username || !cuit) return null;
        return crypto.createHash('sha256').update(username + cuit + SECRET_KEY).digest('hex').substring(0, 32);
    }
    
    function gracefulRestart(req) {
        const server = req.app.get('server');
        
        console.log('Iniciando cierre programado del servidor...');
    
        if (server) {
            server.close(() => {
                console.log('Servidor HTTP cerrado.');
                process.exit(1); 
            });
        }
    
        setTimeout(() => {
            console.error('El cierre del servidor tardó demasiado. Forzando salida.');
            process.exit(1);
        }, 5000).unref();
    }

    // ===============================================================
    // INICIO DE LA MODIFICACIÓN: Nueva ruta para el manual de usuario
    // ===============================================================
    router.get('/manual', (req, res) => {
        res.render('manual', {
            title: 'Manual de Usuario',
            active_link: 'settings',
        });
    });
    // ===============================================================
    // FIN DE LA MODIFICACIÓN
    // ===============================================================
    
    router.get('/database', (req, res, next) => {
        try {
            const localSettings = localBackupHelper.getSettings();
            const localBackups = localBackupHelper.listBackups(localSettings.path);
            res.render('database_management', {
                title: 'Gestionar Base de Datos',
                active_link: 'settings',
                status: req.query.status || null,
                localSettings: localSettings,
                localBackups: localBackups,
            });
        } catch (error) {
            next(error);
        }
    });
    
    router.post('/database/local/update-settings', requireLicense, (req, res, next) => {
        try {
            const { backupPath, mode, scheduleTime, retentionCount } = req.body;
            if (!backupPath) {
                return res.status(400).json({ success: false, message: 'La ruta de respaldo no puede estar vacía.' });
            }
            if (!fs.existsSync(backupPath)) {
                try {
                    fs.mkdirSync(backupPath, { recursive: true });
                } catch (mkdirError) {
                     return res.status(400).json({ success: false, message: 'No se pudo crear la carpeta. Verifique los permisos.' });
                }
            }
            
            localBackupHelper.saveSettings({
                path: backupPath,
                mode: mode || 'manual',
                scheduleTime: scheduleTime || '04:00',
                retentionCount: parseInt(retentionCount, 10) || 5,
            });

            res.json({ success: true, message: 'Configuración guardada. Reinicie la aplicación para aplicar los cambios en la programación de respaldos.' });
        } catch (error) {
            console.error("Error al guardar la configuración local:", error);
            res.status(500).json({ success: false, message: 'Error interno al guardar la configuración.' });
        }
    });
    
    router.post('/database/local/test-path', requireLicense, (req, res) => {
        try {
            const { backupPath } = req.body;
            if (!backupPath) {
                 return res.status(400).json({ success: false, message: 'La ruta no puede estar vacía.' });
            }
            fs.accessSync(backupPath, fs.constants.W_OK);
            res.json({ success: true, message: 'La ruta es válida y accesible.' });
        } catch (error) {
            res.status(400).json({ success: false, message: 'La ruta no existe o no tiene permisos de escritura.' });
        }
    });
    
    
    router.post('/database/local/backup', requireLicense, (req, res, next) => {
        try {
            localBackupHelper.createBackup();
            res.redirect('/settings/database?status=local_backup_success');
        } catch (error) {
            console.error('Error al crear respaldo local:', error);
            res.redirect('/settings/database?status=local_backup_error');
        }
    });
    
    router.post('/database/local/restore', requireLicense, (req, res, next) => {
        const { backupFilePath } = req.body;
        const dbPath = path.resolve(__dirname, '../db/financiero.sqlite');

        if (!fs.existsSync(backupFilePath)) {
            return res.redirect('/settings/database?status=local_restore_error');
        }

        req.app.locals.maintenanceMode = true;
        console.log("MODO MANTENIMIENTO ACTIVADO. La base de datos se cerrará para la restauración.");

        db.close((err) => {
            if (err) {
                console.error('Error al cerrar la base de datos antes de restaurar:', err.message);
                req.app.locals.maintenanceMode = false;
                return res.redirect('/settings/database?status=local_restore_error_db_close');
            }

            console.log('Base de datos cerrada para la restauración.');

            try {
                fs.copyFileSync(backupFilePath, dbPath);
                res.status(200).send(restartPageHtml);
                console.log('Restauración completa. Reiniciando el proceso...');
                setTimeout(() => process.exit(1), 500);
            } catch (copyError) {
                console.error('Error al copiar el archivo de respaldo:', copyError);
                req.app.locals.maintenanceMode = false;
                res.status(500).send("<h1>Error Crítico</h1><p>No se pudo restaurar la base de datos. Reinicie la aplicación manualmente.</p>");
            }
        });
    });

    router.post('/database/local/upload-restore', requireLicense, upload.single('backupFile'), (req, res, next) => {
        const uploadedFile = req.file;

        if (!uploadedFile) {
            return res.redirect('/settings/database?status=local_restore_error_no_file');
        }

        const tempPath = uploadedFile.path;
        const originalName = uploadedFile.originalname;
        const fileExtension = path.extname(originalName).toLowerCase();
        
        if (fileExtension !== '.sqlite') {
            fs.unlink(tempPath, (err) => {
                if (err) console.error("Error al eliminar archivo temporal inválido:", err);
            });
            return res.redirect('/settings/database?status=local_restore_error_invalid_file');
        }

        req.app.locals.maintenanceMode = true;
        console.log("MODO MANTENIMIENTO ACTIVADO. La base de datos se cerrará para la restauración desde archivo.");
        const dbPath = path.resolve(__dirname, '../db/financiero.sqlite');

        db.close((err) => {
            if (err) {
                console.error('Error al cerrar la base de datos antes de restaurar:', err.message);
                req.app.locals.maintenanceMode = false;
                fs.unlink(tempPath, () => {});
                return res.redirect('/settings/database?status=local_restore_error_db_close');
            }
            
            console.log('Base de datos cerrada para la restauración.');

            try {
                fs.copyFileSync(tempPath, dbPath);
                fs.unlinkSync(tempPath);
                
                res.status(200).send(restartPageHtml);
                
                console.log('Restauración desde archivo subido completa. Reiniciando el proceso...');
                setTimeout(() => process.exit(1), 500);

            } catch (copyError) {
                console.error('Error al copiar/eliminar el archivo de respaldo:', copyError);
                req.app.locals.maintenanceMode = false;
                res.status(500).send("<h1>Error Crítico</h1><p>No se pudo restaurar la base de datos. Reinicie la aplicación manualmente.</p>");
            }
        });
    });
    
    router.post('/database/local/delete-backup', requireLicense, (req, res, next) => {
        try {
            const { backupFilePath } = req.body;
            const settings = localBackupHelper.getSettings();
            const backupDir = path.resolve(settings.path);
            const resolvedBackupPath = path.resolve(backupFilePath);
            
            if (!resolvedBackupPath.startsWith(backupDir)) {
                 return res.status(403).json({ success: false, message: 'Acción no permitida. Intento de acceso fuera del directorio de respaldos.' });
            }
            
            if (fs.existsSync(resolvedBackupPath)) {
                fs.unlinkSync(resolvedBackupPath);
                res.json({ success: true, message: 'Respaldo eliminado con éxito.' });
            } else {
                res.status(404).json({ success: false, message: 'El archivo de respaldo no fue encontrado.' });
            }
        } catch (error) {
            console.error("Error al eliminar el respaldo:", error);
            res.status(500).json({ success: false, message: 'Error del servidor al intentar eliminar el respaldo.' });
        }
    });
    
    router.post('/restart-app', requireLicense, (req, res) => {
        res.status(200).json({ message: 'Comando de reinicio recibido.' });
        setTimeout(() => gracefulRestart(req), 100);
    });
    
    router.post('/database/delete', requireLicense, (req, res, next) => {
        const { pin } = req.body;
        if (pin !== getConfig().APP_PIN) {
            // Redirige a la página anterior con un error en lugar de renderizar una nueva.
            return res.redirect('/settings/database?status=reset_pin_error');
        }
        const dbPath = path.resolve(__dirname, '../db/financiero.sqlite');
    
        req.app.locals.maintenanceMode = true;
        console.log("MODO MANTENIMIENTO ACTIVADO. La base de datos se cerrará para el reseteo.");
    
        // 1. Cerrar la conexión a la base de datos primero.
        db.close((err) => {
            if (err) {
                console.error('Error al cerrar la BD para el reseteo:', err.message);
                req.app.locals.maintenanceMode = false;
                return res.status(500).send('<h1>Error Crítico</h1><p>No se pudo cerrar la base de datos para el reseteo. Reinicie la aplicación manualmente.</p>');
            }
    
            console.log('Base de datos cerrada para el reseteo.');
    
            // 2. Una vez cerrada, intentar eliminar el archivo.
            fs.unlink(dbPath, (unlinkErr) => {
                // ENOENT (Error NO ENtity) significa que el archivo no existe, lo cual es aceptable.
                if (unlinkErr && unlinkErr.code !== 'ENOENT') {
                    console.error("Error al eliminar el archivo de la BD:", unlinkErr);
                    req.app.locals.maintenanceMode = false;
                    return res.status(500).send('<h1>Error Crítico</h1><p>No se pudo eliminar el archivo de la base de datos porque está bloqueado. Reinicie la aplicación manualmente.</p>');
                }
                
                console.log('Archivo de la base de datos eliminado.');
    
                // 3. Finalmente, resetear la configuración y reiniciar.
                try {
                    saveConfig({ APP_PIN: "1234", PIN_HINT: "" });
                    res.status(200).send(restartPageHtml);
                    // Salir del proceso para que el gestor (Nodemon/PM2) lo reinicie.
                    setTimeout(() => process.exit(1), 500); 
                } catch (saveErr) {
                    console.error("Error al guardar config.json:", saveErr);
                    req.app.locals.maintenanceMode = false;
                    next(saveErr);
                }
            });
        });
    });
    
    router.get('/api/license-status', (req, res) => {
        res.json({ 
            activated: res.locals.isLicensed,
            username: res.locals.username,
            cuit: res.locals.cuit
        });
    });
    
    router.post('/api/activate-license', (req, res) => {
        const { licenseKey, username, cuit } = req.body;
    
        if (!username || username.trim() === '') {
            return res.status(400).json({ success: false, message: 'El nombre de usuario es obligatorio.' });
        }
        if (!cuit || cuit.trim() === '') {
            return res.status(400).json({ success: false, message: 'El CUIT es obligatorio.' });
        }
    
        const correctKey = generateCorrectLicenseKey(username.trim(), cuit.trim());
    
        if (licenseKey && licenseKey === correctKey) {
            const newLicense = { activated: true, key: licenseKey, username: username.trim(), cuit: cuit.trim() };
            fs.writeFileSync(LICENSE_FILE_PATH, JSON.stringify(newLicense, null, 2));
            
            res.json({ success: true, message: '¡Licencia activada con éxito!' });
        } else {
            res.status(400).json({ success: false, message: 'La clave de licencia es inválida para el usuario y CUIT ingresados.' });
        }
    });
    
    router.post('/api/delete-license', (req, res) => {
        if (!req.session.loggedin) {
            return res.status(401).json({ success: false, message: 'No autorizado.' });
        }
        try {
            if (fs.existsSync(LICENSE_FILE_PATH)) {
                fs.unlinkSync(LICENSE_FILE_PATH);
            }
            
            const config = getConfig();
            config.APP_PIN = "1234";
            config.PIN_HINT = "";
            saveConfig(config);
            console.log("PIN reseteado a 1234 por eliminación de licencia.");

            res.json({ success: true, message: 'Licencia eliminada con éxito.' });
        } catch (error) {
            console.error("Error al eliminar la licencia:", error);
            res.status(500).json({ success: false, message: 'No se pudo eliminar la licencia.' });
        }
    });

    return router;
};


----- C:\Users\Javier\Desktop\finanzas-app\routes\venta.js -----
// routes/venta.js

const express = require('express');
const router = express.Router();
const db = require('../db/database');
const Consultas = require('../db/consultas');

module.exports = function(requireLicense) {
    router.get('/', async (req, res, next) => {
        try {
            const { cliente_id } = req.query;
            let clienteSeleccionado = null;
            if (cliente_id) {
                clienteSeleccionado = await Consultas.dbGetAsync(`SELECT id, nombre, categoria_id FROM clientes WHERE id = ?`, [cliente_id]);
            }
            const [categorias, modalidades] = await Promise.all([
                Consultas.getCategoriasPorTipo('cliente'),
                Consultas.getModalidades()
            ]);
            res.render('venta', {
                title: 'Carga de Ingresos',
                active_link: 'venta',
                categorias,
                modalidades,
                movimiento: null,
                clienteSeleccionado: clienteSeleccionado,
                returnToReport: false,
                returnToRegistro: false,
                returnQuery: ''
            });
        } catch (err) {
            next(err);
        }
    });

    router.get('/editar/:id', async (req, res, next) => {
        try {
            const movimiento = await Consultas.getMovimientoPorId(req.params.id);
            if (!movimiento) return res.status(404).send("Movimiento no encontrado");
            const [cliente, categorias, modalidades] = await Promise.all([
                Consultas.getClientePorId(movimiento.entidad_id),
                Consultas.getCategoriasPorTipo('cliente'),
                Consultas.getModalidades()
            ]);
            const returnToRegistro = req.query.from === 'registro';
            const queryParams = { ...req.query };
            delete queryParams.from;
            const returnQuery = new URLSearchParams(queryParams).toString();
            res.render('venta', {
                title: 'Editar Ingreso',
                active_link: 'venta',
                movimiento,
                clienteSeleccionado: cliente,
                categorias,
                modalidades,
                returnToReport: req.query.from === 'report',
                returnToRegistro,
                returnQuery
            });
        } catch (err) {
            next(err);
        }
    });

    router.post('/editar/:id', requireLicense, async (req, res, next) => {
        try {
            const { fecha, importe, cliente_id, modalidad, categoria_id, comentarios, returnToReport, returnToRegistro, returnQuery, es_ajuste } = req.body;
            if (!categoria_id) return res.status(400).json({ success: false, message: 'El campo Categoría es obligatorio.' });
            
            const tipo = 'ingreso';
            const monto = es_ajuste ? -Math.abs(parseFloat(importe)) : Math.abs(parseFloat(importe));

            const sql = `UPDATE movimientos SET fecha = ?, monto = ?, entidad_id = ?, modalidad = ?, descripcion = ?, tipo = ?, categoria_id = ? WHERE id = ?`;
            await Consultas.dbRunAsync(sql, [fecha, monto, cliente_id, modalidad, comentarios, tipo, categoria_id, req.params.id]);
            
            if (returnToRegistro === 'true') return res.json({ success: true, redirectTo: `/registro?${returnQuery}&update=success` });
            if (returnToReport === 'true') return res.json({ success: true, redirectTo: `/reportes/generar?${returnQuery}&update=success` });
            res.json({ success: true, message: 'Movimiento actualizado con éxito' });
        } catch (err) {
            next(err);
        }
    });

    router.post('/', requireLicense, async (req, res, next) => {
        try {
            const { fecha, importe, cliente_id, modalidad, categoria_id, comentarios, es_ajuste } = req.body;
            if (!fecha || !importe || !cliente_id || !modalidad || !categoria_id) return res.status(400).json({ success: false, message: 'Todos los campos son obligatorios.' });
            
            const tipo = 'ingreso';
            const monto = es_ajuste ? -Math.abs(parseFloat(importe)) : Math.abs(parseFloat(importe));
            
            const sql = `INSERT INTO movimientos (fecha, monto, tipo, entidad_id, entidad_tipo, modalidad, categoria_id, descripcion) VALUES (?, ?, ?, ?, 'cliente', ?, ?, ?)`;
            await Consultas.dbRunAsync(sql, [fecha, monto, tipo, cliente_id, modalidad, categoria_id, comentarios]);
            res.status(201).json({ success: true, message: 'Movimiento registrado con éxito.' });
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/clientes', async (req, res, next) => {
        try {
            const query = req.query.q;
            if (!query) return res.json([]);
            const sql = `SELECT id, nombre, cuit, categoria_id FROM clientes WHERE nombre LIKE ? OR id LIKE ? OR cuit LIKE ? LIMIT 10`;
            const rows = await Consultas.dbAllAsync(sql, [`%${query}%`, `%${query}%`, `%${query}%`]);
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/clientes/recientes', async (req, res, next) => {
        try {
            const sql = `SELECT c.id, c.nombre, c.categoria_id FROM clientes c JOIN (SELECT entidad_id, MAX(fecha) as last_mov_date FROM movimientos WHERE entidad_tipo = 'cliente' GROUP BY entidad_id) m ON c.id = m.entidad_id ORDER BY m.last_mov_date DESC LIMIT 3`;
            const rows = await Consultas.dbAllAsync(sql);
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/clientes/todos', async (req, res, next) => {
        try {
            const sql = `SELECT id, nombre, categoria_id FROM clientes ORDER BY nombre ASC`;
            const rows = await Consultas.dbAllAsync(sql);
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/clientes/:id', async (req, res, next) => {
        try {
            const row = await Consultas.getClientePorId(req.params.id);
            res.json(row);
        } catch (err) {
            next(err);
        }
    });

    router.post('/api/clientes', requireLicense, async (req, res, next) => {
        try {
            const { nombre, cuit, telefono, email, comentarios, categoria_id } = req.body;
            if (!nombre || !cuit) return res.status(400).json({ success: false, message: 'Nombre y CUIT son obligatorios.' });
            if (!/^\d+$/.test(cuit)) return res.status(400).json({ success: false, message: 'El CUIT/DNI solo debe contener números.' });
            const row = await Consultas.dbGetAsync(`SELECT MAX(id) as maxId FROM clientes`);
            const newId = (row.maxId || 10000) + 1;
            const sql = `INSERT INTO clientes (id, nombre, cuit, telefono, email, observaciones, categoria_id) VALUES (?, ?, ?, ?, ?, ?, ?)`;
            await Consultas.dbRunAsync(sql, [newId, nombre, cuit, telefono, email, comentarios, categoria_id]);
            res.status(201).json({ success: true, newCliente: { id: newId, nombre, categoria_id } });
        } catch (err) {
            if (err.code === 'SQLITE_CONSTRAINT') return res.status(409).json({ success: false, message: 'Ya existe un cliente con ese CUIT/DNI.' });
            next(err);
        }
    });

    router.put('/api/clientes/:id', requireLicense, async (req, res, next) => {
        try {
            const { nombre, cuit, telefono, email, comentarios, categoria_id } = req.body;
            if (!nombre || !cuit) return res.status(400).json({ success: false, message: 'Nombre y CUIT son obligatorios.' });
            if (!/^\d+$/.test(cuit)) return res.status(400).json({ success: false, message: 'El CUIT/DNI solo debe contener números.' });
            const sql = `UPDATE clientes SET nombre = ?, cuit = ?, telefono = ?, email = ?, observaciones = ?, categoria_id = ? WHERE id = ?`;
            await Consultas.dbRunAsync(sql, [nombre, cuit, telefono, email, comentarios, categoria_id, req.params.id]);
            res.json({ success: true, updatedCliente: { id: parseInt(req.params.id), nombre } });
        } catch (err) {
            if (err.code === 'SQLITE_CONSTRAINT') return res.status(409).json({ success: false, message: 'Ya existe un cliente con ese CUIT/DNI.' });
            next(err);
        }
    });

    router.delete('/api/clientes/:id', requireLicense, (req, res, next) => {
        db.serialize(async () => {
            try {
                await Consultas.dbRunAsync('BEGIN TRANSACTION');
                await Consultas.dbRunAsync(`DELETE FROM movimientos WHERE entidad_id = ? AND entidad_tipo = 'cliente'`, [req.params.id]);
                await Consultas.dbRunAsync(`DELETE FROM clientes WHERE id = ?`, [req.params.id]);
                await Consultas.dbRunAsync('COMMIT');
                res.json({ success: true, message: 'Cliente y sus movimientos han sido eliminados.' });
            } catch (err) {
                await Consultas.dbRunAsync('ROLLBACK');
                next(err);
            }
        });
    });

    router.get('/api/clientes/:id/movimientos', async (req, res, next) => {
        try {
            const [cliente, movimientos] = await Promise.all([
                Consultas.dbGetAsync(`SELECT id, nombre FROM clientes WHERE id = ?`, [req.params.id]),
                Consultas.dbAllAsync(`SELECT m.id, m.fecha, m.modalidad, m.tipo, m.monto, m.descripcion as comentarios, c.nombre as categoria_nombre FROM movimientos m LEFT JOIN categorias c ON m.categoria_id = c.id WHERE m.entidad_id = ? AND m.entidad_tipo = 'cliente' ORDER BY m.fecha DESC, m.id DESC LIMIT 7`, [req.params.id])
            ]);
            if (!cliente) return res.status(404).json({ message: 'Cliente no encontrado' });
            res.render('partials/_historial_reciente_ingresos', { movimientos, clienteSeleccionado: cliente }, (err, html) => {
                if (err) return next(err);
                res.json({ html });
            });
        } catch (err) {
            next(err);
        }
    });

    router.delete('/api/movimientos/:id', requireLicense, async (req, res, next) => {
        try {
            await Consultas.eliminarMovimientoPorId(req.params.id);
            res.json({ success: true, message: 'Movimiento eliminado' });
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/categorias/all', async (req, res, next) => {
        try {
            const rows = await Consultas.dbAllAsync("SELECT id, nombre, tipo, es_editable FROM categorias ORDER BY nombre");
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.get('/api/categorias', async (req, res, next) => {
        try {
            const { tipo } = req.query;
            if (!tipo) return res.status(400).json({ error: 'El tipo es requerido' });
            const rows = await Consultas.getCategoriasPorTipo(tipo);
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.post('/api/categorias', requireLicense, async (req, res, next) => {
        try {
            const { nombre, tipo } = req.body;
            if (!nombre || !tipo) return res.status(400).json({ success: false, message: 'Nombre y tipo son requeridos' });
            const existing = await Consultas.dbGetAsync("SELECT id FROM categorias WHERE lower(nombre) = lower(?)", [nombre]);
            if (existing) {
                return res.status(409).json({ success: false, message: 'Ya existe una categoría con ese nombre.' });
            }
            const result = await Consultas.dbRunAsync("INSERT INTO categorias (nombre, tipo) VALUES (?, ?)", [nombre, tipo]);
            res.status(201).json({ success: true, newCategoria: { id: result.lastID, nombre, tipo } });
        } catch (err) {
            next(err);
        }
    });

    router.put('/api/categorias/:id', requireLicense, async (req, res, next) => {
        try {
            const { nombre } = req.body;
            if (!nombre) return res.status(400).json({ success: false, message: 'El nombre es requerido' });
            const existing = await Consultas.dbGetAsync("SELECT id FROM categorias WHERE lower(nombre) = lower(?) AND id != ?", [nombre, req.params.id]);
            if (existing) {
                return res.status(409).json({ success: false, message: 'Ya existe otra categoría con ese nombre.' });
            }
            const result = await Consultas.dbRunAsync("UPDATE categorias SET nombre = ? WHERE id = ? AND es_editable = 1", [nombre, req.params.id]);
            if (result.changes === 0) return res.status(404).json({ success: false, message: 'Categoría no encontrada o no es editable.' });
            res.json({ success: true, message: 'Categoría actualizada.' });
        } catch (err) {
            next(err);
        }
    });

    router.delete('/api/categorias/:id', requireLicense, async (req, res, next) => {
        db.serialize(async () => {
            try {
                await Consultas.dbRunAsync('BEGIN TRANSACTION');
                const categoria = await Consultas.dbGetAsync("SELECT tipo FROM categorias WHERE id = ?", [req.params.id]);
                if (!categoria) {
                    throw new Error('Categoría no encontrada.');
                }
                const defaultCategoryName = 'Ingresos sin categoría';
                const defaultCategory = await Consultas.dbGetAsync("SELECT id FROM categorias WHERE nombre = ? AND tipo = ?", [defaultCategoryName, categoria.tipo]);
                if (!defaultCategory) {
                    throw new Error(`La categoría por defecto "${defaultCategoryName}" no fue encontrada.`);
                }
                await Consultas.dbRunAsync("UPDATE movimientos SET categoria_id = ? WHERE categoria_id = ?", [defaultCategory.id, req.params.id]);
                const result = await Consultas.dbRunAsync("DELETE FROM categorias WHERE id = ? AND es_editable = 1", [req.params.id]);
                if (result.changes === 0) {
                    await Consultas.dbRunAsync('ROLLBACK');
                    return res.status(404).json({ success: false, message: 'Categoría no encontrada o no se puede eliminar.' });
                }
                await Consultas.dbRunAsync('COMMIT');
                res.json({ success: true, message: 'Categoría eliminada. Los movimientos asociados fueron reasignados.' });
            } catch (err) {
                await Consultas.dbRunAsync('ROLLBACK');
                next(err);
            }
        });
    });

    router.get('/api/modalidades', async (req, res, next) => {
        try {
            const rows = await Consultas.getModalidades();
            res.json(rows);
        } catch (err) {
            next(err);
        }
    });

    router.post('/api/modalidades', requireLicense, async (req, res, next) => {
        try {
            const { nombre } = req.body;
            if (!nombre) return res.status(400).json({ success: false, message: 'El nombre es requerido' });
            const result = await Consultas.dbRunAsync("INSERT INTO modalidades (nombre, es_editable) VALUES (?, 1)", [nombre]);
            res.status(201).json({ success: true, newModalidad: { id: result.lastID, nombre, es_editable: 1 } });
        } catch (err) {
            if (err.code === 'SQLITE_CONSTRAINT') return res.status(409).json({ success: false, message: 'Esa modalidad ya existe.' });
            next(err);
        }
    });

    router.put('/api/modalidades/:id', requireLicense, async (req, res, next) => {
        try {
            const { nombre } = req.body;
            if (!nombre) return res.status(400).json({ success: false, message: 'El nombre es requerido' });
            const original = await Consultas.dbGetAsync("SELECT nombre FROM modalidades WHERE id = ? AND es_editable = 1", [req.params.id]);
            if (!original) return res.status(404).json({ success: false, message: 'Modalidad no encontrada o no es editable.' });
            await Consultas.dbRunAsync('BEGIN TRANSACTION');
            await Consultas.dbRunAsync("UPDATE movimientos SET modalidad = ? WHERE modalidad = ?", [nombre, original.nombre]);
            await Consultas.dbRunAsync("UPDATE modalidades SET nombre = ? WHERE id = ?", [nombre, req.params.id]);
            await Consultas.dbRunAsync('COMMIT');
            res.json({ success: true, message: 'Modalidad actualizada.' });
        } catch (err) {
            await Consultas.dbRunAsync('ROLLBACK');
            if (err.code === 'SQLITE_CONSTRAINT') return res.status(409).json({ success: false, message: 'Ese nombre de modalidad ya existe.' });
            next(err);
        }
    });

    router.delete('/api/modalidades/:id', requireLicense, async (req, res, next) => {
        try {
            const modality = await Consultas.dbGetAsync("SELECT nombre, es_editable FROM modalidades WHERE id = ?", [req.params.id]);
            if (!modality) return res.status(404).json({ success: false, message: 'Modalidad no encontrada.' });
            if (modality.es_editable === 0) return res.status(400).json({ success: false, message: 'Esta modalidad no se puede eliminar.' });
            await Consultas.dbRunAsync('BEGIN TRANSACTION');
            await Consultas.dbRunAsync("UPDATE movimientos SET modalidad = 'Efectivo' WHERE modalidad = ?", [modality.nombre]);
            await Consultas.dbRunAsync("DELETE FROM modalidades WHERE id = ?", [req.params.id]);
            await Consultas.dbRunAsync('COMMIT');
            res.json({ success: true, message: 'Modalidad eliminada.' });
        } catch (err) {
            await Consultas.dbRunAsync('ROLLBACK');
            next(err);
        }
    });

    return router;
};


----- C:\Users\Javier\Desktop\finanzas-app\utils\formatters.js -----
// utils/formatters.js

/**
 * Formatea un número como moneda con opciones personalizables.
 * @param {number|string} amount - La cantidad a formatear.
 * @param {object} options - Opciones de formato.
 * @param {string} [options.signDisplay='always'] - Cómo mostrar el signo ('always', 'exceptZero', 'never').
 * @param {boolean} [options.includeSymbol=true] - Si se debe incluir el símbolo de la moneda.
 * @param {string} [options.style='decimal'] - Estilo de formato ('decimal', 'currency').
 * @param {string} [options.color] - Color del texto (ej. 'var(--ingresos-color)').
 * @param {string} [options.overrideSign] - Para forzar un signo específico ('+' o '-').
 * @returns {string} La cantidad formateada.
 */
function formatCurrency(amount, options = {}) {
    const {
        signDisplay = 'always',
        includeSymbol = true,
        style = 'decimal',
        color,
        overrideSign
    } = options;

    const number = Number(amount) || 0;
    const isNegative = number < 0;

    let sign = '';
    if (overrideSign) {
        sign = overrideSign;
    } else {
        if (signDisplay === 'always') {
            sign = number >= 0 ? '+' : '-';
        } else if (signDisplay === 'exceptZero' && number !== 0) {
            sign = number > 0 ? '+' : '-';
        }
    }

    const symbol = includeSymbol ? '$ ' : '';
    const absoluteAmount = Math.abs(number);

    let formattedNumber;
    if (style === 'currency') {
        formattedNumber = absoluteAmount.toLocaleString('es-AR', {
            style: 'currency',
            currency: 'ARS',
            signDisplay: 'never' // El símbolo se maneja manualmente
        }).replace('$', '').trim();
    } else {
        formattedNumber = absoluteAmount.toLocaleString('es-AR', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });
    }

    const result = `${sign}${sign ? ' ' : ''}${symbol}${formattedNumber}`;

    if (color) {
        return `<span style="color: ${color};">${result}</span>`;
    }

    return result;
}

module.exports = {
    // Formatos para Ingresos
    formatIncome: (amount) => formatCurrency(amount, { signDisplay: 'always' }),
    formatIncomeSimple: (amount) => formatCurrency(amount, { signDisplay: 'never' }),

    // Formatos para Egresos
    formatExpense: (amount) => formatCurrency(amount, { overrideSign: amount >= 0 ? '-' : '+' }),
    formatExpenseSimple: (amount) => formatCurrency(amount, { signDisplay: 'never' }),

    // Formato para Resultados (Balance)
    formatResult: (amount) => formatCurrency(amount, { signDisplay: 'always', includeSymbol: false }).replace(' ', ''),

    // Formato con signo y color dinámico
    formatMontoConSigno: (amount, tipo) => {
        const number = Number(amount) || 0;
        const isPositive = number >= 0;
        const color = tipo === 'ingreso' ? (isPositive ? 'var(--ingresos-color)' : 'var(--egresos-color)') : (isPositive ? 'var(--egresos-color)' : 'var(--ingresos-color)');
        const sign = tipo === 'egreso' ? (isPositive ? '-' : '+') : (isPositive ? '+' : '-');
        return formatCurrency(amount, { overrideSign: sign, color: color });
    },

    // Formatos específicos para reportes
    formatReportCurrency: (amount, tipo) => {
        const effectiveAmount = tipo === 'egreso' ? -Math.abs(Number(amount) || 0) : Math.abs(Number(amount) || 0);
        return formatCurrency(effectiveAmount, { style: 'currency', signDisplay: effectiveAmount < 0 ? 'always' : 'never', includeSymbol: true });
    },
    formatReportBalance: (amount) => {
        const number = Number(amount) || 0;
        return formatCurrency(number, { style: 'currency', signDisplay: number < 0 ? 'always' : 'never', includeSymbol: true });
    },
    formatReportCurrencySimple: (amount) => formatCurrency(amount, { signDisplay: 'never' }),

    // Formato para Resúmenes
    formatSummaryCurrency: (amount) => {
        const number = Number(amount) || 0;
        const sign = number < 0 ? '- ' : '';
        return `${sign}${formatCurrency(amount, { signDisplay: 'never' })}`;
    },
    formatReportBalancePlain: (amount) => {
        const number = Number(amount) || 0;
        return formatCurrency(number, { style: 'currency', signDisplay: number < 0 ? 'always' : 'never', includeSymbol: true });
    },
    
    // Función para obtener la fecha de hoy en formato YYYY-MM-DD
    getTodayForInput: () => {
        const now = new Date();
        const year = now.getFullYear();
        const month = (now.getMonth() + 1).toString().padStart(2, '0');
        const day = now.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    }
};


----- C:\Users\Javier\Desktop\finanzas-app\utils\localBackupHelper.js -----
// utils/localBackupHelper.js

const fs = require('fs');
const path = require('path');
const os = require('os');

const SETTINGS_PATH = path.resolve(__dirname, '../local_backup_settings.json');
const DB_PATH = path.resolve(__dirname, '../db/financiero.sqlite');

function getSettings() {
    if (fs.existsSync(SETTINGS_PATH)) {
        const data = fs.readFileSync(SETTINGS_PATH);
        return JSON.parse(data);
    }
    const defaultPath = path.join(os.homedir(), 'Documents', 'GestionSimpleBackups');
    const defaults = { path: defaultPath, mode: 'manual', retentionCount: 5, scheduleTime: '04:00' };
    fs.writeFileSync(SETTINGS_PATH, JSON.stringify(defaults, null, 2));
    return defaults;
}

function saveSettings(settings) {
    fs.writeFileSync(SETTINGS_PATH, JSON.stringify(settings, null, 2));
}

function listBackups(backupPath) {
    if (!backupPath || !fs.existsSync(backupPath)) {
        return [];
    }
    const files = fs.readdirSync(backupPath);
    return files
        .filter(file => file.startsWith('backup-local-') && file.endsWith('.sqlite'))
        .map(file => {
            const filePath = path.join(backupPath, file);
            return {
                name: file,
                path: filePath,
                createdTime: fs.statSync(filePath).mtime
            };
        })
        .sort((a, b) => new Date(b.createdTime) - new Date(a.createdTime));
}

function cleanupOldBackups(settings) {
    const backups = listBackups(settings.path);
    const maxBackups = parseInt(settings.retentionCount, 10);

    if (isNaN(maxBackups) || maxBackups < 1) {
        console.log('Retención de respaldos no configurada o inválida. No se eliminarán respaldos antiguos.');
        return;
    }

    if (backups.length > maxBackups) {
        const backupsToDelete = backups.slice(maxBackups);
        console.log(`Limpiando respaldos locales. Se eliminarán ${backupsToDelete.length}.`);
        for (const file of backupsToDelete) {
            try {
                fs.unlinkSync(file.path);
                console.log(`Respaldo local antiguo eliminado: ${file.name}`);
            } catch (error) {
                console.error(`Error al eliminar el respaldo local ${file.name}:`, error);
            }
        }
    }
}

function createBackup() {
    const settings = getSettings();
    if (!settings.path) {
        throw new Error('La ruta para los respaldos locales no está configurada.');
    }
    if (!fs.existsSync(settings.path)) {
        fs.mkdirSync(settings.path, { recursive: true });
        console.log(`Carpeta de respaldo local creada en: ${settings.path}`);
    }

    // ===============================================================
    // INICIO DE LA CORRECCIÓN: Se genera el timestamp usando la hora local
    // en lugar de la hora universal (UTC) para que coincida con la hora del usuario.
    // ===============================================================
    const pad = (num) => num.toString().padStart(2, '0');
    const now = new Date();
    const year = now.getFullYear();
    const month = pad(now.getMonth() + 1);
    const day = pad(now.getDate());
    const hours = pad(now.getHours());
    const minutes = pad(now.getMinutes());
    const seconds = pad(now.getSeconds());

    const timestamp = `${year}-${month}-${day}_${hours}-${minutes}-${seconds}`;
    const fileName = `backup-local-${timestamp}.sqlite`;
    // ===============================================================
    // FIN DE LA CORRECCIÓN
    // ===============================================================

    const backupFilePath = path.join(settings.path, fileName);
    
    fs.copyFileSync(DB_PATH, backupFilePath);
    console.log(`Respaldo local creado con éxito: ${fileName}`);
    cleanupOldBackups(settings);
    return true;
}

module.exports = {
    getSettings,
    saveSettings,
    listBackups,
    createBackup
};


----- C:\Users\Javier\Desktop\finanzas-app\views\config.json -----
{
  "APP_PIN": "1234"
}

----- C:\Users\Javier\Desktop\finanzas-app\views\database_management.ejs -----
<!-- views/database_management.ejs -->

<%- include('layout/_header') %>

<style>
    .db-management-container {
        max-width: 70%;
        margin-left: auto;
        margin-right: auto;
    }
    /* NUEVO ESTILO PARA LA LISTA DE RESPALDOS */
    .scrollable-backup-list {
        max-height: 320px; /* Altura aproximada para 5 items */
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: .25rem;
        padding: 0.5rem;
    }
    @media (max-width: 992px) {
        .db-management-container {
            max-width: 100%;
        }
    }
</style>

<div class="db-management-container" data-is-licensed="<%= isLicensed %>">
    <h1 class="mb-4">Gestionar Base de Datos</h1>

    <% if (!isLicensed) { %>
        <div class="alert alert-warning text-center">
            <i class="fa-solid fa-lock me-2"></i> Se requiere una licencia activa para gestionar la base de datos.
        </div>
    <% } %>

    <div class="accordion" id="databaseManagementAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingLocal">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseLocal">
                    <i class="fa-solid fa-floppy-disk me-2 fs-5"></i>
                    <span class="fs-6 fw-bold">Respaldos Locales</span>
                </button>
            </h2>
            
            <div id="collapseLocal" class="accordion-collapse collapse show" data-bs-parent="#databaseManagementAccordion">
                <div class="accordion-body">
                    <div class="d-grid mt-2 mb-2 gap-2">
                        <form action="/settings/database/local/backup" method="POST">
                            <button type="submit" class="btn btn-success w-100" id="btn-create-backup" <%= !isLicensed ? 'disabled' : '' %>>
                                <i class="fa-solid fa-save me-2"></i>Crear Respaldo Ahora
                            </button>
                        </form>
                    </div>

                    <hr class="my-4">

                    <form id="local-settings-form">
                        <h6 class="mt-2">Configuración</h6>
                        <p class="text-muted small">
                        Seleccione una carpeta donde se guardarán los respaldos y configure una modalidad de creación.
                        </p>
                        <fieldset <%= !isLicensed ? 'disabled' : '' %>>
                            <div class="mb-4">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fa-solid fa-folder-open"></i></span>
                                    <input type="text" name="backupPath" id="backupPath" class="form-control setting-input" value="<%= localSettings.path %>" required>
                                    <button class="btn btn-link" type="button" id="btn-verify-path">Verificar</button>
                                </div>
                                <div id="path-test-result" class="form-text mt-2"></div>
                            </div>

                                <fieldset id="backup-options-fieldset">
                                    <div class="mb-2">
                                        <div class="form-check">
                                            <input class="form-check-input setting-input" type="radio" name="mode" id="mode-manual-local" value="manual" <%= localSettings.mode === 'manual' ? 'checked' : '' %>>
                                            <label class="form-check-label" for="mode-manual-local">Manual</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input setting-input" type="radio" name="mode" id="mode-startup-local" value="startup" <%= localSettings.mode === 'startup' ? 'checked' : '' %>>
                                            <label class="form-check-label" for="mode-startup-local">Automático al iniciar el programa</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input setting-input" type="radio" name="mode" id="mode-daily-local" value="daily" <%= localSettings.mode === 'daily' ? 'checked' : '' %>>
                                            <label class="form-check-label" for="mode-daily-local">Automático todos los días</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input setting-input" type="radio" name="mode" id="mode-weekdays-local" value="weekdays" <%= localSettings.mode === 'weekdays' ? 'checked' : '' %>>
                                            <label class="form-check-label" for="mode-weekdays-local">Automático los días hábiles</label>
                                        </div>
                                    </div>
                                    
                                    <div id="automatic-settings-local" class="row <%= localSettings.mode !== 'manual' ? '' : 'd-none' %>">
                                        <div id="automatic-time-settings" class="col-md-4 mb-3 <%= ['daily', 'weekdays'].includes(localSettings.mode) ? '' : 'd-none' %>">
                                            <label for="scheduleTimeLocal" class="form-label">Hora de respaldo</label>
                                            <input type="time" name="scheduleTime" id="scheduleTimeLocal" class="form-control setting-input" value="<%= localSettings.scheduleTime || '04:00' %>">
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label for="retentionCountLocal" class="form-label">Copias a conservar</label>
                                            <input type="number" name="retentionCount" id="retentionCountLocal" class="form-control setting-input" value="<%= localSettings.retentionCount %>" min="1">
                                        </div>
                                    </div>

                                </fieldset>
                      
                             <div class="d-grid">
                                <button type="button" class="btn btn-outline-primary w-50 mb-2" id="btn-save-db-settings" disabled>
                                    <i class="fa-solid fa-check me-2"></i>Guardar Configuración
                                </button>
                            </div>
                        </fieldset>
                    </form>

                    <hr class="my-4">

                    <!-- Formulario para restaurar desde archivo -->
                    <h6 class="mt-4">Restaurar desde un archivo</h6>                    
                        
                    <p class="text-muted small">
                        Seleccione un archivo de respaldo (.sqlite) desde su equipo para restaurar la base de datos. Esta acción reemplazará todos los datos actuales.
                    </p>
                    <form action="/settings/database/local/upload-restore" method="POST" enctype="multipart/form-data" id="form-upload-restore">
                        <fieldset <%= !isLicensed ? 'disabled' : '' %>>
                            <div class="input-group mb-2">
                                <input class="form-control" type="file" id="backupFile" name="backupFile" accept=".sqlite,.db">
                                <button class="btn btn-warning fw-regular" type="button" id="btn-upload-restore" disabled data-bs-toggle="modal" data-bs-target="#modal-confirmar-restauracion" data-form-id="form-upload-restore">
                                    <i class="fa-solid fa-upload me-2"></i>Importar y Restaurar
                                </button>
                            </div>
                            <div id="file-selection-feedback" class="form-text mt-1"></div>
                        </fieldset>
                    </form>
                    
                    <hr class="my-4">

                    <h6 class="mt-4">Respaldos Locales Disponibles</h6>
                    <p class="text-muted small">
                        Aquí se detallan los respaldos locales creados y ubicados en la carpeta configurada.
                    </p>
                    <% if (localBackups.length > 0) { %>
                        <!-- INICIO DE LA MODIFICACIÓN: Contenedor para la lista con scroll -->
                        <div class="<%= localBackups.length > 5 ? 'scrollable-backup-list' : '' %>">
                            <ul class="list-group list-group-flush" id="backup-list">
                              <% localBackups.forEach(file => { %>
                                <% const safeFileId = `backup-item-${file.name.replace(/[^\w-]/g, '-')}` %>
                                <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap" id="<%= safeFileId %>">
                                    <div>
                                        <strong class="d-block"><%= file.name %></strong>
                                        <small class="text-muted"><%= new Date(file.createdTime).toLocaleString('es-AR') %></small>
                                    </div>
                                    <div class="mt-2 mt-md-0">
                                        <form action="/settings/database/local/restore" method="POST" class="d-inline" id="form-restore-local-<%= safeFileId %>">
                                            <input type="hidden" name="backupFilePath" value="<%= file.path %>">
                                            <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modal-confirmar-restauracion" data-form-id="form-restore-local-<%= safeFileId %>" <%= !isLicensed ? 'disabled' : '' %>>Restaurar</button>
                                        </form>
                                        <button type="button" class="btn btn-outline-danger btn-sm ms-2 btn-delete-backup" data-backup-path="<%= file.path %>" data-backup-id="<%= safeFileId %>" data-bs-toggle="modal" data-bs-target="#modal-confirmar-eliminacion-respaldo" <%= !isLicensed ? 'disabled' : '' %>>Eliminar</button>
                                    </div>
                                </li>
                              <% }) %>
                            </ul>
                        </div>
                        <!-- FIN DE LA MODIFICACIÓN -->
                    <% } else { %>
                        <p class="text-muted">No se encontraron respaldos en la carpeta local especificada.</p>
                    <% } %>
               </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingDanger">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseDanger">
                    <i class="fa-solid fa-triangle-exclamation me-2 text-danger fs-5"></i> 
                    <span class="text-danger fs-6 fw-bold">Zona de Alto Riesgo</span>
                </button>
            </h2>
            <div id="collapseDanger" class="accordion-collapse collapse" data-bs-parent="#databaseManagementAccordion">
                <div class="accordion-body">
                    <h6 class="card-title text-danger mb-2">Resetear Aplicación</h6>
                    <p>Esta opción elimina permanentemente todos los datos locales y configuración personalizada reiniciando la aplicación a su estado incial. <strong>No afecta los respaldos existentes.</strong></p>
                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#modal-confirmar-reseteo" <%= !isLicensed ? 'disabled' : '' %>>Resetear Base de Datos Local</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-confirmar-restauracion" tabindex="-1" aria-labelledby="modalLabelRestauracion" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="modalLabelRestauracion">Confirmar Restauración</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Se reemplazará la base de datos actual con la copia de seguridad seleccionada. <strong>Esta acción no se puede deshacer.</strong></p>
                <p>¿Está seguro que desea continuar?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="btn-confirmar-restauracion-final">Sí, Restaurar</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-confirmar-eliminacion-respaldo" tabindex="-1" aria-labelledby="modalLabelEliminarRespaldo" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabelEliminarRespaldo">Confirmar Eliminación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Está a punto de eliminar permanentemente este archivo de respaldo. <strong>Esta acción no se puede deshacer.</strong></p>
                <p>¿Está seguro que desea continuar?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="btn-confirmar-eliminacion-respaldo-final">Sí, Eliminar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Confirmar Reseteo de BD -->
<div class="modal fade" id="modal-confirmar-reseteo" tabindex="-1" aria-labelledby="modalLabelReseteo" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form action="/settings/database/delete" method="POST" id="form-reset-database">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabelReseteo">Confirmar Reseteo de Aplicación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger"><strong>¡Atención!</strong> Esta acción eliminará permanentemente todos los datos y restablecerá el PIN a "1234".</div>
                    <p>Para confirmar, ingrese su PIN de acceso actual.</p>
                    <div class="pin-form-wrapper mx-auto" style="max-width: 220px;">
                        <label for="pin-reset" class="form-label visually-hidden">PIN Actual</label>
                        <input type="password" name="pin" class="form-control form-control-lg text-center" id="pin-reset" required maxlength="4" pattern="\d{4}" autofocus autocomplete="off">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-danger" id="btn-confirmar-reseteo-final">Sí, Resetear Aplicación</button>
                </div>
            </form>
        </div>
    </div>
</div>

<% pageScripts = '<script src="/js/database_management.client.js"></script>' %>
<%- include('layout/_footer') %>



----- C:\Users\Javier\Desktop\finanzas-app\views\inicio.ejs -----
<%- include('layout/_header', { title: title }) %>

<%# --- MODIFICACIÓN --- %>
<%# Se añade un elemento oculto si el PIN fue reseteado. El script del cliente lo usará para mostrar la notificación. %>
<% if (locals.pinWasReset) { %>
    <div id="pin-reset-notification" class="d-none"></div>
<% } %>

<div class="d-flex justify-content-between align-items-center mb-3 top-date-container">
    <div id="current-date" class="date-display"></div>
    <div id="current-time" class="time-placeholder text-end date-display"></div>
</div>

<div class="dynamic-period-selector-container mb-4">
    <div class="d-flex justify-content-center">
        <div class="granularity-selector">
            <%
                const views = [
                    { key: 'anual', text: 'Anual' },
                    { key: 'mensual', text: 'Mensual' },
                    { key: 'semanal', text: 'Semanal' }
                ];
                const selectedViewKey = periodInfo.view;
                const selectedIndex = views.findIndex(v => v.key === selectedViewKey);
                if (selectedIndex !== -1) {
                    const selectedItem = views.splice(selectedIndex, 1)[0];
                    views.splice(1, 0, selectedItem);
                }
            %>

            <% views.forEach(view => { %>
                <a href="/inicio?view=<%= view.key %>" class="btn <%= selectedViewKey === view.key ? 'active' : '' %>"><%= view.text %></a>
            <% }) %>
        </div>
    </div>

    <div class="period-navigator">
        <a href="<%= periodInfo.nav.prevLink %>" class="nav-arrow"><i class="fa-solid fa-chevron-left"></i></a>
        <div class="period-ribbon-wrapper">
            <div class="period-ribbon">
                <% periodInfo.ribbon.forEach(item => { %>
                    <a href="<%= item.link %>" class="btn ribbon-item <%= item.isActive ? 'active' : '' %> <%= item.isFuture ? 'disabled' : '' %>">
                        <span class="ribbon-item-label"><%= item.label %></span>
                        <% if (item.isActive && item.subLabel) { %>
                            <span class="ribbon-item-sublabel"><%= item.subLabel %></span>
                        <% } %>
                    </a>
                <% }) %>
            </div>
        </div>
        <a href="<%= periodInfo.nav.nextLink %>" class="nav-arrow <%= periodInfo.nav.isNextDisabled ? 'disabled' : '' %>"><i class="fa-solid fa-chevron-right"></i></a>
    </div>
</div>


<div class="balance-cards-container">
    <div class="card balance-card balance-card-ingresos h-100">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-start">
                <div class="card-title-area">
                    <i class="fa-solid fa-circle-up"></i>
                    <h5>Ingresos</h5>
                </div>
                <span class="card-time-ago"><%= periodInfo.displayTitle %></span>
            </div>
            <div class="card-amount">
                <p class="amount"><%= formatIncomeSimple(ingresos.total) %></p>
            </div>
            <div class="card-comparison">
                <% if (comparisonData.ingresos.change !== null) { %>
                    <span class="badge badge-comparison">
                        <i class="fa-solid <%= comparisonData.ingresos.change >= 0 ? 'fa-arrow-trend-up' : 'fa-arrow-trend-down' %> me-1"></i>
                        <%= Math.abs(comparisonData.ingresos.change).toFixed(0) %>% <span class="fw-normal">vs</span> <%= comparisonData.previousPeriodLabel %>
                    </span>
                <% } %>
            </div>
        </div>
    </div>

    <div class="card balance-card balance-card-resultado h-100">
         <div class="card-body">
            <div class="d-flex justify-content-between align-items-start">
                <div class="card-title-area">
                    <i class="fa-solid fa-scale-balanced"></i>                
                    <h5>Balance</h5>
                </div>
                <span class="card-time-ago"><%= periodInfo.displayTitle %></span>
            </div>
            <div class="card-amount">
                <p class="amount"><%= formatResult(resultado.total) %></p>
            </div>
            <div class="card-comparison">
                <% if (comparisonData.rentabilidad !== null) { %>
                    <span class="badge badge-comparison"> <%= comparisonData.rentabilidad.toFixed(0) %>% <span class="fw-normal">de </span>rentabilidad</span> <% } %>
            </div>
        </div>
    </div>

    <div class="card balance-card balance-card-gastos h-100">
      <div class="card-body">
            <div class="d-flex justify-content-between align-items-start">
                <div class="card-title-area">
                    <i class="fa-solid fa-circle-down"></i>
                    <h5>Egresos</h5>
                </div>
                <span class="card-time-ago"><%= periodInfo.displayTitle %></span>
            </div>
            <div class="card-amount">
                <p class="amount"><%= formatExpenseSimple(gastos.total) %></p>
            </div>
            <div class="card-comparison">
                <% if (comparisonData.gastos.change !== null) { %>
                    <span class="badge badge-comparison">
                        <i class="fa-solid <%= comparisonData.gastos.change >= 0 ? 'fa-arrow-trend-up' : 'fa-arrow-trend-down' %> me-1"></i>
                        <%= Math.abs(comparisonData.gastos.change).toFixed(0) %>% <span class="fw-normal">vs</span> <%= comparisonData.previousPeriodLabel %>
                    </span>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Gráfico Histórico General -->
<div class="row">
    <div class="col-12 mb-4 mt-4">
        <div class="chart-container" id="history-chart-container">
            <% if (chartData.history.periods.length > 0 && (chartData.history.periods.some(p => p.details.length > 0))) { %>
                 <canvas id="historyChart"></canvas>
            <% } else { %>
                 <div class="empty-chart-placeholder">
                    <i class="fa-solid fa-triangle-exclamation"></i>
                    <p>No hay datos históricos<br>suficientes para graficar.</p>
                </div>
            <% } %>
        </div>
    </div>
</div>

<style>
    #custom-entity-search-results {
        max-height: 300px;
        overflow-y: auto;
    }
    #custom-entity-search[readonly] {
        background-color: #e9ecef; 
        cursor: pointer; 
        -webkit-text-fill-color: var(--on-surface-color);
        opacity: 1;
    }
</style>
<!-- =============================================================== -->
<!-- INICIO DE SECCIÓN INFERIOR: GRÁFICO PERSONALIZADO Y RANKING      -->
<!-- =============================================================== -->
<div class="row">
    <!-- Columna del Ranking del Período -->
    <div class="col-12 col-lg-6 mb-4">
        <div class="card ranking-card">
            <div class="card-body d-flex flex-column">
                <h5 class="card-title mb-3">Ranking del Período</h5>
                <div id="ranking-controls" class="btn-group w-100 mb-3 btn-group-toggle-colors" role="group">
                    <button type="button" class="btn btn-tertiary btn-clientes active" data-type="clientes">Clientes</button>
                    <button type="button" class="btn btn-tertiary btn-proveedores" data-type="proveedores">Proveedores</button>
                    <button type="button" class="btn btn-tertiary btn-ingreso" data-type="ingresos">Ingresos</button>
                    <button type="button" class="btn btn-tertiary btn-egreso" data-type="egresos">Egresos</button>
                </div>
                <div id="ranking-content" class="flex-grow-1">
                    <!-- Contenido del ranking se carga aquí -->
                </div>
            </div>
        </div>
    </div>
    <!-- Columna del Gráfico Personalizado -->
    <div class="col-12 col-lg-6 mb-4">
        <div class="card">
            <div class="card-body d-flex flex-column">
                <h5 class="card-title mb-3">Histórico Personalizado</h5>
                <div class="mb-3">
                    <div class="position-relative">
                        <div class="input-group">
                            <div class="position-relative flex-grow-1">
                                <span class="position-absolute top-50 start-0 translate-middle-y ps-3" style="z-index: 5;"><i class="fa-solid fa-magnifying-glass text-muted"></i></span>
                                <input type="text" class="form-control ps-5" id="custom-entity-search" placeholder="Seleccione cliente, proveedor o categoría" autocomplete="off">
                                <button class="btn btn-sm btn-icon position-absolute top-50 end-0 translate-middle-y d-none" type="button" id="btn-clear-custom-entity-selection" title="Limpiar selección" style="z-index: 5;"><i class="fa-solid fa-times"></i></button>
                            </div>
                        </div>
                        <div class="list-group position-absolute w-100" id="custom-entity-search-results" style="z-index: 1050;"></div>
                    </div>
                    <input type="hidden" id="custom-entity-id" name="custom_entity_id">
                </div>
                <div class="chart-container flex-grow-1" id="custom-chart-container">
                    <canvas id="customChart" style="display: none;"></canvas>
                    <div id="custom-chart-placeholder" class="empty-chart-placeholder">
                        <div id="placeholder-select-item">
                            <i class="fa-solid fa-hand-pointer"></i>
                            <p>Seleccione un ítem para<br>generar el gráfico.</p>
                        </div>
                        <div id="placeholder-no-data" style="display: none;">
                            <i class="fa-solid fa-triangle-exclamation"></i>
                            <p>No hay datos históricos<br>suficientes para graficar.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- =============================================================== -->
<!-- FIN DE SECCIÓN INFERIOR                                         -->
<!-- =============================================================== -->


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {

    // --- MODIFICACIÓN ---
    // Se añade la lógica para mostrar el toast de advertencia si el elemento de notificación existe.
    const pinResetNotification = document.getElementById('pin-reset-notification');
    if (pinResetNotification) {
        // Se utiliza la función de toast global para mostrar una advertencia persistente.
        const toastContainer = document.querySelector('.toast-container');
        const toastId = 'pin-reset-toast';
        // Se verifica si el toast ya existe para no duplicarlo.
        if (!document.getElementById(toastId)) {
            const toastHtml = `
                <div id="${toastId}" class="toast bg-warning text-dark" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
                    <div class="toast-header bg-warning text-dark border-bottom border-dark">
                        <i class="fa-solid fa-triangle-exclamation me-2"></i>
                        <strong class="me-auto">Alerta de Seguridad</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        Tu PIN fue restablecido a <strong>1234</strong> por una acción de emergencia. Se recomienda cambiarlo lo antes posible.
                    </div>
                </div>`;
            
            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement);
            toast.show();
        }
    }
    // --- FIN MODIFICACIÓN ---

    // --- LÓGICA PARA DESLIZAR EL SELECTOR DE PERÍODO ---
    const ribbonWrapper = document.querySelector('.period-ribbon-wrapper');
    if (ribbonWrapper) {
        let touchstartX = 0;
        let touchendX = 0;
        const swipeThreshold = 50;
        const prevLink = document.querySelector('.period-navigator .nav-arrow:first-child');
        const nextLink = document.querySelector('.period-navigator .nav-arrow:last-child');
        function handleSwipe() {
            const swipeDistance = touchendX - touchstartX;
            if (Math.abs(swipeDistance) < swipeThreshold) return;
            if (swipeDistance < 0 && !nextLink.classList.contains('disabled')) {
                window.location.href = nextLink.href;
            }
            if (swipeDistance > 0 && !prevLink.classList.contains('disabled')) {
                window.location.href = prevLink.href;
            }
        }
        ribbonWrapper.addEventListener('touchstart', e => { touchstartX = e.changedTouches[0].screenX; }, { passive: true });
        ribbonWrapper.addEventListener('touchend', e => { touchendX = e.changedTouches[0].screenX; handleSwipe(); });
    }
    
    // --- LÓGICA PARA GRÁFICOS ---
    Chart.register(ChartDataLabels);
    const getCssVariable = (variable) => getComputedStyle(document.documentElement).getPropertyValue(variable).trim();
    const primaryColor = getCssVariable('--primary-color');
    const secondaryColor = getCssVariable('--secondary-color');
    
    function formatNumberCompact(num) {
        if (num === null || num === undefined) return '';
        const absNum = Math.abs(num);
        let formatted;
        if (absNum >= 1000000) {
            formatted = (num / 1000000).toFixed(1).replace('.', ',') + 'M';
        } else if (absNum >= 1000) {
            formatted = (num / 1000).toFixed(1).replace('.', ',') + 'K';
        } else {
            formatted = num.toFixed(0);
        }
        return `$${formatted}`;
    }

    // --- GRÁFICO HISTÓRICO GENERAL ---
    const historyChartData = <%- JSON.stringify(chartData.history) %>;
    let historyChartInstance = null; 

    function renderHistoryChart() {
        if (historyChartInstance) {
            historyChartInstance.destroy();
        }

        if (!historyChartData.periods || historyChartData.periods.length === 0) {
            return;
        }

        let periodsToDisplay;
        const screenWidth = window.innerWidth;

        if (screenWidth < 768) { 
            periodsToDisplay = historyChartData.periods.slice(-4);
        } else if (screenWidth < 992) {
            periodsToDisplay = historyChartData.periods.slice(-8);
        } else { 
            periodsToDisplay = historyChartData.periods;
        }

        if (periodsToDisplay.some(p => p.details.length > 0)) {
            const labels = periodsToDisplay.map(p => p.label);
            const incomeTotals = periodsToDisplay.map(p => p.details.filter(d => d.tipo === 'ingreso').reduce((sum, d) => sum + d.total, 0));
            const expenseTotals = periodsToDisplay.map(p => p.details.filter(d => d.tipo === 'egreso').reduce((sum, d) => sum + d.total, 0));

            const datasets = [{
                label: 'Ingresos',
                data: incomeTotals,
                backgroundColor: '#5da043',
                barPercentage: 0.9,
                categoryPercentage: 0.5
            }, {
                label: 'Egresos',
                data: expenseTotals,
                backgroundColor: '#df655c',
                barPercentage: 0.9,
                categoryPercentage: 0.5
            }];

            historyChartInstance = new Chart(document.getElementById('historyChart').getContext('2d'), {
                type: 'bar',
                data: { labels, datasets },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    layout: { padding: { top: 30 } },
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 1)',
                            displayColors: false,
                            titleFont: { family: 'Poppins', weight: 'bold' },
                            bodyFont: { family: 'Poppins' },
                            bodySpacing: 6,
                            callbacks: {
                                title: function(context) {
                                    const firstContext = context[0];
                                    const datasetLabel = firstContext.dataset.label;
                                    const totalValue = firstContext.raw;
                                    if (totalValue === 0) return null;
                                    const formatCurrency = (val) => new Intl.NumberFormat('es-AR', { style: 'currency', currency: 'ARS' }).format(val);
                                    return `Total ${datasetLabel}: ${formatCurrency(totalValue)}`;
                                },
                                label: function(context) {
                                    const periodIndex = context.dataIndex;
                                    const datasetLabel = context.dataset.label;
                                    const totalValue = context.raw;
                                    if (totalValue === 0) return null;
                                    const type = (datasetLabel === 'Ingresos') ? 'ingreso' : 'egreso';
                                    const periodDetails = periodsToDisplay[periodIndex].details.filter(d => d.tipo === type);
                                    const formatCurrency = (val) => new Intl.NumberFormat('es-AR', { style: 'currency', currency: 'ARS' }).format(val);
                                    let tooltipBody = [];
                                    if (periodDetails.length > 0) {
                                        periodDetails.sort((a,b) => b.total - a.total).forEach(detail => {
                                            tooltipBody.push(`${detail.categoria}: ${formatCurrency(detail.total)}`);
                                        });
                                    }
                                    return tooltipBody;
                                }
                            }
                        },
                        datalabels: {
                            display: (context) => context.dataset.data[context.dataIndex] > 0,
                            formatter: (value) => formatNumberCompact(value),
                            rotation: -90,
                            font: { family: 'Poppins', weight: '600', size: window.innerWidth < 992 ? 12 : 14 },
                            anchor: 'end',
                            offset: 8,
                            align: function(context) {
                                const allData = context.chart.data.datasets.flatMap(ds => ds.data);
                                const maxValue = Math.max(...allData.filter(d => d > 0));
                                if (maxValue === 0) return 'start';
                                const currentValue = context.dataset.data[context.dataIndex];
                                return currentValue < maxValue * 0.15 ? 'end' : 'start';
                            },
                            color: function(context) {
                                const allData = context.chart.data.datasets.flatMap(ds => ds.data);
                                const maxValue = Math.max(...allData.filter(d => d > 0));
                                const isOutside = maxValue > 0 && context.dataset.data[context.dataIndex] < maxValue * 0.15;
                                if (isOutside) {
                                    return context.dataset.backgroundColor;
                                } else {
                                    return context.dataset.label === 'Ingresos' ? '#CEFAD0' : '#FFD9D4';
                                }
                            }
                        }
                    },
                    scales: {
                        y: { display: false, grid: { display: false }, min: 0 },
                        x: { grid: { display: false }, ticks: { color: secondaryColor, font: { family: 'Poppins', weight: 'bold', size: 14 } } }
                    }
                }
            });
        }
    }

    renderHistoryChart();

    let resizeTimer;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
            renderHistoryChart();
        }, 250);
    });

    const customChartCanvas = document.getElementById('customChart');
    const customChartPlaceholder = document.getElementById('custom-chart-placeholder');
    const placeholderSelectItem = document.getElementById('placeholder-select-item');
    const placeholderNoData = document.getElementById('placeholder-no-data');
    let customChartInstance = null;
    let selectedEntityName = ''; 

    const searchInput = document.getElementById('custom-entity-search');
    const searchResults = document.getElementById('custom-entity-search-results');
    const entityIdInput = document.getElementById('custom-entity-id');
    const btnClearSelection = document.getElementById('btn-clear-custom-entity-selection');

    const populateSearchResults = async (query) => {
        try {
            const response = await fetch(`/inicio/api/search-entities?q=${encodeURIComponent(query)}`);
            if (!response.ok) throw new Error('Network response was not ok');
            const entities = await response.json();
            
            searchResults.innerHTML = '';
            
            entities.forEach(entity => {
                const item = document.createElement('a');
                item.href = '#';
                item.className = 'list-group-item list-group-item-action';
                item.innerHTML = `<div class="d-flex">
                                    <div class="me-2"><span class="badge bg-light text-muted">${entity.tipo_display}</span></div>
                                    <div>${entity.nombre}</div>
                                  </div>`;
                item.addEventListener('click', (e) => {
                    e.preventDefault();
                    seleccionarEntidad(entity);
                });
                searchResults.appendChild(item);
            });
        } catch (error) {
            console.error('Error searching entities:', error);
        }
    };

    searchInput.addEventListener('focus', () => {
        populateSearchResults('*');
    });

    searchInput.addEventListener('input', () => {
        const query = searchInput.value.trim();
        populateSearchResults(query === '' ? '*' : query);
    });
    
    searchInput.addEventListener('blur', () => {
        setTimeout(() => { searchResults.innerHTML = ''; }, 200);
    });

    searchInput.addEventListener('click', () => {
        if (searchInput.readOnly) {
            resetearSeleccionEntidad();
        }
    });

    btnClearSelection.addEventListener('click', resetearSeleccionEntidad);

    function seleccionarEntidad(entity) {
        selectedEntityName = entity.nombre;
        searchInput.value = `${entity.nombre} (${entity.tipo_display})`;
        searchInput.readOnly = true;
        entityIdInput.value = JSON.stringify({type: entity.tipo, id: entity.id});
        searchResults.innerHTML = '';
        btnClearSelection.classList.remove('d-none');
        fetchAndRenderCustomChart();
    }

    function resetearSeleccionEntidad() {
        selectedEntityName = '';
        searchInput.value = '';
        searchInput.readOnly = false;
        entityIdInput.value = '';
        btnClearSelection.classList.add('d-none');
        fetchAndRenderCustomChart();
        searchInput.focus();
    }

    async function fetchAndRenderCustomChart() {
        const selectedEntityJSON = entityIdInput.value;
        const entities = selectedEntityJSON ? [JSON.parse(selectedEntityJSON)] : [];

        if (entities.length === 0) {
            if (customChartInstance) {
                customChartInstance.destroy();
                customChartInstance = null;
            }
            customChartCanvas.style.display = 'none';
            customChartPlaceholder.style.display = 'block';
            placeholderSelectItem.style.display = 'block';
            placeholderNoData.style.display = 'none';
            return;
        }
        
        const currentUrlParams = new URLSearchParams(window.location.search);
        const view = currentUrlParams.get('view') || 'mensual';
        const year = currentUrlParams.get('year');
        const month = currentUrlParams.get('month');
        const week = currentUrlParams.get('week');
        
        const apiUrl = `/inicio/api/custom-chart-data?view=${view}&year=${year||''}&month=${month||''}&week=${week||''}&entities=${JSON.stringify(entities)}`;

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) throw new Error('Error fetching data');
            const data = await response.json();
            renderCustomChart(data);
        } catch (error) {
            console.error("Failed to load custom chart data:", error);
        }
    }

    function renderCustomChart(data) {
        if (customChartInstance) {
            customChartInstance.destroy();
            customChartInstance = null;
        }

        const hasData = data.totals && data.totals.some(total => total > 0);

        if (!hasData) {
            customChartCanvas.style.display = 'none';
            customChartPlaceholder.style.display = 'block';
            placeholderSelectItem.style.display = 'none';
            placeholderNoData.style.display = 'block';
            return;
        }

        customChartCanvas.style.display = 'block';
        customChartPlaceholder.style.display = 'none';

        const colorPalette = {
            '#df995c': '#f9f0e8',
            '#df877c': '#f9eae8',
            '#c786ab': '#f6e6f0',
            '#77a5b3': '#e3f0f3'
        };
        const barColorKeys = Object.keys(colorPalette);
        const randomColorKey = barColorKeys[Math.floor(Math.random() * barColorKeys.length)];
        const barColor = randomColorKey;
        const textColor = colorPalette[randomColorKey];

        customChartInstance = new Chart(customChartCanvas.getContext('2d'), {
            type: 'bar',
            data: {
                labels: data.labels,
                datasets: [{
                    label: 'Total',
                    data: data.totals,
                    backgroundColor: barColor,
                    barPercentage: 0.9,
                    categoryPercentage: 0.5
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                layout: { padding: { top: 30 } },
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        displayColors: false,
                        callbacks: {
                            title: () => selectedEntityName || null,
                            label: (context) => `${context.label}: ${new Intl.NumberFormat('es-AR', { style: 'currency', currency: 'ARS' }).format(context.raw)}`
                        }
                    },
                    datalabels: {
                        display: (context) => context.dataset.data[context.dataIndex] !== 0,
                        formatter: (value) => formatNumberCompact(value),
                        rotation: -90,
                        anchor: 'end',
                        offset: 8,
                        font: { family: 'Poppins', weight: '600', size: window.innerWidth < 992 ? 12 : 14 },
                        align: function(context) {
                            const allData = context.chart.data.datasets.flatMap(ds => ds.data);
                            const maxValue = Math.max(...allData.filter(d => d > 0));
                            if (maxValue === 0) return 'start';
                            const currentValue = context.dataset.data[context.dataIndex];
                            return currentValue < maxValue * 0.15 ? 'end' : 'start';
                        },
                        color: function(context) {
                            const allData = context.chart.data.datasets.flatMap(ds => ds.data);
                            const maxValue = Math.max(...allData.filter(d => d > 0));
                            const isOutside = maxValue > 0 && context.dataset.data[context.dataIndex] < maxValue * 0.15;

                            if (isOutside) {
                                return barColor;
                            } else {
                                return textColor;
                            }
                        }
                    }
                },
                scales: {
                    y: { display: false, grid: { display: false }, min: 0 },
                    x: { grid: { display: false }, ticks: { color: secondaryColor, font: { family: 'Poppins', weight: 'bold', size: 14 } } }
                }
            }
        });
    }

    fetchAndRenderCustomChart();
    
    const rankingControls = document.getElementById('ranking-controls');
    const rankingContent = document.getElementById('ranking-content');
    const formatCurrencyRanking = (value) => new Intl.NumberFormat('es-AR', { style: 'currency', currency: 'ARS', minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(value);

    const renderRanking = (data, type) => {
        if (!data || !data.top || data.grandTotal === 0) {
            rankingContent.innerHTML = `<div class="d-flex flex-column justify-content-center align-items-center h-100 text-muted">
                <i class="fa-solid fa-triangle-exclamation fa-3x mb-4 mt-2 opacity-50"></i>
                <p>No hay datos para este período.</p>
            </div>`;
            return;
        }

        const labels = {
            clientes: 'Resto de Clientes',
            proveedores: 'Resto de Proveedores',
            ingresos: 'Resto de Ingresos',
            egresos: 'Resto de Egresos'
        };
        const restoLabel = labels[type] || 'Resto';

        const progressColors = {
            ingresos: 'progress-bar-ingresos',
            egresos: 'progress-bar-egresos',
            clientes: 'progress-bar-clientes',
            proveedores: 'progress-bar-proveedores'
        };
        const progressBarClass = progressColors[type] || '';


        let html = '<ul class="list-group list-group-flush ranking-list">';
        
        data.top.forEach((item, index) => {
            html += `<li class="list-group-item">
                <div class="d-flex justify-content-between align-items-center mb-1">
                    <div class="d-flex align-items-center flex-grow-1 me-2" style="min-width: 0;">
                        <span class="ranking-position me-3">${index + 1}º</span>
                        <span class="ranking-item-name">${item.name}</span>
                    </div>
                    <span class="ranking-item-details fw-bold text-nowrap">${formatCurrencyRanking(item.total)}</span>
                </div>
                <div class="ranking-item-bar">
                    <div class="progress">
                        <div class="progress-bar ${progressBarClass}" role="progressbar" style="width: ${item.percentage.toFixed(2)}%;" aria-valuenow="${item.percentage.toFixed(2)}" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                </div>
                <div class="d-flex justify-content-end">
                    <span class="ranking-item-details">${item.percentage.toFixed(1)}%</span>
                </div>
            </li>`;
        });

        if (data.rest.total > 0) {
            html += `<li class="list-group-item">
                <div class="d-flex justify-content-between align-items-center mb-1">
                    <div class="d-flex align-items-center flex-grow-1 me-2" style="min-width: 0;">
                        <span class="ranking-position me-3" style="background-color: transparent; color: transparent;"></span>
                        <span class="ranking-item-name text-muted fst-italic">${restoLabel}</span>
                    </div>
                    <span class="ranking-item-details fw-bold text-nowrap">${formatCurrencyRanking(data.rest.total)}</span>
                </div>
                <div class="ranking-item-bar">
                    <div class="progress">
                        <div class="progress-bar ${progressBarClass}" role="progressbar" style="width: ${data.rest.percentage.toFixed(2)}%;" aria-valuenow="${data.rest.percentage.toFixed(2)}" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                </div>
                <div class="d-flex justify-content-end">
                    <span class="ranking-item-details">${data.rest.percentage.toFixed(1)}%</span>
                </div>
            </li>`;
        }

        html += '</ul>';

        html += `<div class="ranking-total">
            <div class="d-flex justify-content-between align-items-center">
                <span class="fw-bold">Total General</span>
                <span class="fw-bold fs-5">${formatCurrencyRanking(data.grandTotal)}</span>
            </div>
         </div>`;

        rankingContent.innerHTML = html;
    };

    const fetchAndRenderRanking = async (type = 'clientes') => {
        rankingContent.innerHTML = `<div class="d-flex justify-content-center align-items-center h-100"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>`;
        
        const currentUrlParams = new URLSearchParams(window.location.search);
        const view = currentUrlParams.get('view') || 'mensual';
        const year = currentUrlParams.get('year') || '';
        const month = currentUrlParams.get('month') || '';
        const week = currentUrlParams.get('week') || '';

        try {
            const response = await fetch(`/inicio/api/ranking-data?type=${type}&view=${view}&year=${year}&month=${month}&week=${week}`);
            if (!response.ok) throw new Error('Failed to fetch ranking data');
            const data = await response.json();
            renderRanking(data, type);
        } catch (error) {
            console.error(error);
            rankingContent.innerHTML = `<div class="d-flex flex-column justify-content-center align-items-center h-100 text-danger">
                <i class="fa-solid fa-triangle-exclamation fa-3x mb-2 opacity-50"></i>
                <small>Error al cargar el ranking.</small>
            </div>`;
        }
    };

    rankingControls.addEventListener('click', (e) => {
        if (e.target.tagName === 'BUTTON') {
            rankingControls.querySelector('.active').classList.remove('active');
            e.target.classList.add('active');
            const type = e.target.dataset.type;
            fetchAndRenderRanking(type);
        }
    });

    fetchAndRenderRanking();
});
</script>

<%- include('layout/_footer') %>


----- C:\Users\Javier\Desktop\finanzas-app\views\layout\_footer.ejs -----
<!--- views/layout/_footer.ejs -->

</div> 

<!-------------------------------->
<!--- barra navegacion INFERIOR -->
<!-------------------------------->
<nav class="bottom-nav">
    <a href="/inicio" class="bottom-nav-link <%= (locals.active_link && active_link === 'inicio') ? 'active' : '' %>">
        <i class="fa-solid fa-chart-simple"></i>
        <span>Tablero</span>
    </a>
    <a href="/venta" class="bottom-nav-link <%= (locals.active_link && active_link === 'venta') ? 'active' : '' %>">
        <i class="fa-solid fa-circle-up"></i>
        <span>Ingresos</span>
    </a>
    <a href="/pago" class="bottom-nav-link <%= (locals.active_link && active_link === 'pago') ? 'active' : '' %>">
        <i class="fa-solid fa-circle-down"></i>
        <span>Egresos</span>
    </a>
    <a href="/registro" class="bottom-nav-link <%= (locals.active_link && active_link === 'registro') ? 'active' : '' %>">
        <i class="fa-solid fa-table-list"></i>
        <span>Registro</span>
    </a>
    <a href="/reportes" class="bottom-nav-link <%= (locals.active_link && active_link === 'reportes') ? 'active' : '' %>">
        <i class="fa-solid fa-file-lines"></i>
        <span>Reportes</span>
    </a>
</nav>

<!-------------------------------------->
<!--- menú hamburguesa barra superior -->
<!-------------------------------------->
<div class="offcanvas offcanvas-end" tabindex="-1" id="main-menu" style="width: 280px;">
    <div class="offcanvas-header border-bottom">
        <h5 class="offcanvas-title">Menú</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
    </div>

    <div class="offcanvas-body d-flex flex-column p-3">
                <a href="/settings/manual" class="submenu-link">
            <i class="fa-solid fa-circle-question fa-fw"></i>
            <span>Manual de Ayuda</span>
        </a>
                <div class="submenu-divider my-2"></div>
        <a href="/logout" class="submenu-link text-danger">
            <i class="fa-solid fa-sign-out-alt fa-fw"></i>
            <span>Cerrar Sesión</span>
        </a>

        <div class="side-nav-info mt-auto">
            <div class="text-center">
                <small>Usuario</small>
                <span class="badge user-data-badge text-dark"><%= username %></span>
                <small>CUIT</small>
                <span class="badge user-data-badge text-dark"><%= cuit %></span>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="modal-licencia" tabindex="-1" aria-labelledby="modalLicenciaLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLicenciaLabel">Gestión de Licencia</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="license-active-view" class="d-none">
                    <div class="alert alert-success">
                        <h4 class="alert-heading text-center"><i class="fa-solid fa-check-circle me-2"></i>Licencia Activa</h4>
                        <p class="text-center">Este software tiene una licencia activa para:</p>
                        <hr>
                        <p class="mb-0 fs-5 text-center fw-bold" id="active-license-username"></p>
                    </div>
                    <p class="text-muted small">Si desea activar una nueva licencia, primero debe eliminar la actual.</p>
                    <div class="d-grid">
                        <button class="btn btn-outline-danger" id="btn-delete-license">
                            <i class="fa-solid fa-trash-alt me-2"></i>Eliminar Licencia
                        </button>
                    </div>
                </div>

                <div id="license-activation-view">
                    <p class="text-muted">La licencia del software está vinculada al nombre de usuario y CUIT.</p>
                    <div class="mb-3">
                        <label for="license-username-input" class="form-label">Nombre de Usuario</label>
                        <input type="text" class="form-control" id="license-username-input" placeholder="Ingrese el nombre de usuario de la licencia">
                    </div>
                    <div class="mb-3">
                        <label for="license-cuit-input" class="form-label">CUIT</label>
                        <input type="text" class="form-control" id="license-cuit-input" placeholder="Ingrese el CUIT asociado a la licencia">
                    </div>
                    <div class="mb-3">
                        <label for="license-key-input" class="form-label">Clave de Licencia</label>
                        <input type="text" class="form-control" id="license-key-input" placeholder="Ingrese su clave de licencia">
                    </div>
                    <div id="license-status-message" class="mt-3">
                    </div>
                    <div class="modal-footer pb-0">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cerrar</button>
                        <button type="button" class="btn btn-primary" id="btn-activar-licencia">Activar Licencia</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-confirmar-eliminar-licencia" tabindex="-1" aria-labelledby="modalEliminarLicenciaLabel" aria-hidden="true" style="z-index: 1060;">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEliminarLicenciaLabel">Confirmar Eliminación de Licencia</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning"><strong>Atención:</strong> Esta acción desactivará el software. Necesitará una nueva clave para volver a activarlo.</div>
                <p>Para confirmar, por favor escriba la palabra <strong id="palabra-confirmacion-licencia" class="text-danger"></strong> en el campo de abajo.</p>
                <input type="text" class="form-control" id="input-confirmacion-licencia" autocomplete="off">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="btn-confirmar-eliminacion-final-licencia" disabled>Sí, Eliminar Licencia</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-cambiar-pin" tabindex="-1" aria-labelledby="modalCambiarPinLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" style="max-width: 350px;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalCambiarPinLabel">Cambiar PIN</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="btn-close-cambiar-pin"></button>
            </div>
            <div class="modal-body">
                <div id="cambiar-pin-error" class="alert alert-danger d-none" role="alert"></div>
                <form id="form-cambiar-pin" autocomplete="off">
                    <input type="hidden" id="forcePinChange" name="forcePinChange" value="false">
                    <div class="mb-3" id="current-pin-container">
                        <label for="current_pin" class="form-label">PIN Actual</label>
                        <input type="password" name="current_pin" class="form-control text-center" id="current_pin" required maxlength="4" pattern="\d{4}" autocomplete="new-password">
                    </div>
                    <div class="mb-3">
                        <label for="new_pin" class="form-label">Nuevo PIN (4 dígitos)</label>
                        <input type="password" name="new_pin" class="form-control text-center" id="new_pin" required maxlength="4" pattern="\d{4}" autocomplete="new-password">
                    </div>
                    <div class="mb-3">
                        <label for="confirm_new_pin" class="form-label">Confirmar Nuevo PIN</label>
                        <input type="password" name="confirm_new_pin" class="form-control text-center" id="confirm_new_pin" required maxlength="4" pattern="\d{4}" autocomplete="new-password">
                    </div>
                    <div class="mb-4">
                        <label for="pin_hint" class="form-label">Pista para recordar el PIN (opcional)</label>
                        <input type="text" name="pin_hint" class="form-control text-center" id="pin_hint" autocomplete="off">
                    </div>
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary" id="btn-submit-cambiar-pin">Actualizar PIN</button>
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" id="btn-cancel-cambiar-pin">Cancelar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1100"></div>

<footer class="text-center py-4">
    <i class="fa-solid fa-square-poll-vertical text-muted small me-1"></i><small class="text-muted">Mi Balance v.1.0 © 2025 javanguz. Todos los derechos reservados.</small>
</footer>

<script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="/js/main.client.js"></script>
<%- typeof pageScripts !== 'undefined' ? pageScripts : '' %>
</body>
</html>


----- C:\Users\Javier\Desktop\finanzas-app\views\layout\_header.ejs -----
<%#* views/layout/_header.ejs %>

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> | Mi Negocio</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    
    <link rel="stylesheet" href="/css/style.css">
    
    <% if (locals.active_link && active_link === 'inicio') { %>
        <link rel="stylesheet" href="/css/tablero.css">
    <% } %>
    <% if (locals.active_link && (active_link === 'registro' || active_link === 'reportes')) { %>
        <link rel="stylesheet" href="/css/regrep.css">
    <% } %>
</head>
<% const sidebarPages = ['inicio', 'registro', 'reportes', 'settings']; %>
<body class="<%= sidebarPages.includes(locals.active_link) ? 'with-sidebar' : '' 
%> <%= (locals.active_link && active_link === 'inicio') ? 'tablero-page-bg' : '' 
%> <%= (locals.active_link && active_link === 'venta') ? 'venta-page-bg' : '' 
%> <%= (locals.active_link && active_link === 'pago') ? 'pago-page-bg' : ''
%> <%= (locals.active_link && active_link === 'registro') ? 'registro-page-bg' : ''
%> <%= (locals.active_link && active_link === 'reportes') ? 'reportes-page-bg' : '' %>">

<nav class="side-nav">
    <div>
        <a class="navbar-brand-side" href="/inicio">
            <i class="fa-solid fa-square-poll-vertical"></i>
            <span>Mi Balance</span>
        </a>
        <div class="side-nav-links">
            <a href="/inicio" class="side-nav-link <%= (locals.active_link && active_link === 'inicio') ? 'active' : '' %>">
                <i class="fa-solid fa-chart-simple fa-fw"></i>
                <span>Tablero</span>
            </a>
            <a href="/venta" class="side-nav-link <%= (locals.active_link && active_link === 'venta') ? 'active' : '' %>">
                <i class="fa-solid fa-circle-up fa-fw"></i>
                <span>Ingresos</span>
            </a>
            <a href="/pago" class="side-nav-link <%= (locals.active_link && active_link === 'pago') ? 'active' : '' %>">
                <i class="fa-solid fa-circle-down fa-fw"></i>
                <span>Egresos</span>
            </a>
            <a href="/registro" class="side-nav-link <%= (locals.active_link && active_link === 'registro') ? 'active' : '' %>">
                <i class="fa-solid fa-table-list fa-fw"></i>
                <span>Registro</span>
            </a>
            <a href="/reportes" class="side-nav-link <%= (locals.active_link && active_link === 'reportes') ? 'active' : '' %>">
                <i class="fa-solid fa-file-lines fa-fw"></i>
                <span>Reportes</span>
            </a>
        </div>
    </div>

    <div class="side-nav-footer">
        <div class="settings-menu">
            <div class="settings-submenu" id="settings-submenu">
                <a href="/settings/database" class="submenu-link">
                    <i class="fa-solid fa-database fa-fw"></i>
                    <span>Base de Datos</span>
                </a>
                <a href="/settings/manual" class="submenu-link">
                    <i class="fa-solid fa-circle-question fa-fw"></i>
                    <span>Manual de Ayuda</span>
                </a>
                <a href="#" class="submenu-link" data-bs-toggle="modal" data-bs-target="#modal-licencia">
                    <i class="fa-solid fa-key fa-fw"></i>
                    <span>Licencia</span>
                </a>
                <a href="#" class="submenu-link" data-bs-toggle="modal" data-bs-target="#modal-cambiar-pin">
                    <i class="fa-solid fa-lock-open fa-fw"></i>
                    <span>Cambiar PIN</span>
                </a>
                <div class="submenu-divider"></div>
                <a href="/logout" class="submenu-link text-danger">
                    <i class="fa-solid fa-sign-out-alt fa-fw"></i>
                    <span>Cerrar Sesión</span>
                </a>
            </div>
            <button class="settings-toggle-btn" id="settings-toggle-btn">
                <i class="fa-solid fa-bars"></i>
                <span>Opciones</span>
            </button>
        </div>
        <div class="side-nav-info">
            <small>Usuario</small>
            <span class="badge user-data-badge text-dark"><%= username %></span>
            <small>CUIT</small>
            <span class="badge user-data-badge text-dark"><%= cuit %></span>
        </div>
    </div>
</nav>

<nav class="navbar fixed-top">
    <div class="container-fluid">
        <a class="navbar-brand fw-semibold" href="/inicio" style="color: #595959;">
            <i class="fa-solid fa-square-poll-vertical me-2"></i>Mi Balance
        </a>
        <button class="btn btn-icon btn-tertiary" type="button" data-bs-toggle="offcanvas" data-bs-target="#main-menu" aria-controls="main-menu">
            <i class="fa-solid fa-bars"></i>
        </button>
    </div>
</nav>

<div class="main-container">


----- C:\Users\Javier\Desktop\finanzas-app\views\login.ejs -----
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login | Mi Negocio</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcode/1.5.1/qrcode.min.js"></script>
    <style>
        body { 
            background-color: #f4f7f9;
            font-family: 'Poppins', sans-serif;
        }
        .login-container { display: flex; align-items: center; justify-content: center; min-height: 100vh; padding: 1rem; }
        .login-card { width: 100%; max-width: 800px; border: none; box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15); border-radius: 0.75rem; overflow: hidden; }
        .form-container { padding: 2.5rem; }
        .qr-container { background-color: #f8f9fa; text-align: center; padding: 2rem; display: flex; flex-direction: column; justify-content: center; align-items: center; }
        #qr-canvas { border: 5px solid white; border-radius: 0.75rem; box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1); }
        .pin-form-wrapper { max-width: 220px; margin: 0 auto; }
        @media (max-width: 767.98px) { .form-container { padding: 2rem 1.5rem; } .login-card { max-width: 420px; } }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="card login-card">
            <div class="row g-0">
                <div class="col-md-5 qr-container d-none d-md-flex">
                    <h5 class="mb-3">Acceso Móvil</h5>
                    <canvas id="qr-canvas"></canvas>
                    <p class="text-muted mt-3 mb-1">Escanea para abrir en tu celular</p>
                    <p class="fw-bold" id="lan-url"></p>
                </div>
                <div class="col-12 col-md-7">
                    <div class="form-container">
                        <h1 class="card-title text-center mb-4"><i class="fa-solid fa-square-poll-vertical me-2"></i>Mi Balance</h1>
                        <p class="text-center text-muted mb-4">Ingrese su PIN para continuar</p>
                        <% if (error) { %><div class="alert alert-danger" role="alert"><%= error %></div><% } %>
                        <% if (success) { %><div class="alert alert-success" role="alert"><%= success %></div><% } %>
                        <div class="pin-form-wrapper">
                            <form action="/login" method="POST">
                                <div class="mb-3"><input type="password" name="pin" class="form-control form-control-lg text-center" maxlength="4" autofocus required pattern="\d{4}" title="El PIN debe ser de 4 dígitos numéricos."></div>
                                <div class="d-grid"><button type="submit" class="btn btn-primary btn-lg">Ingresar</button></div>
                            </form>
                        </div>

                        <% if (pinHint) { %>
                            <div class="text-center mt-3">
                                <a href="#" id="show-hint-link" style="text-decoration: none; font-size: 0.9rem;">¿Olvidaste tu PIN?</a>
                            </div>
                            <div id="pin-hint-container" class="mt-2" style="display: none; opacity: 0; text-align: center; transition: opacity 0.5s ease;">
                                <div class="alert alert-info py-2">
                                    <strong>Pista:</strong> <%= pinHint %>
                                </div>
                                <a href="#" id="recover-by-license-link" style="text-decoration: none; font-size: 0.9rem;">Restablecer PIN con licencia</a>
                            </div>
                        <% } %>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="modal-recover-by-license" tabindex="-1" aria-labelledby="modalRecoverLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalRecoverLabel">Restablecer PIN con Licencia</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p class="text-muted small">Ingrese los datos exactos de su licencia para restablecer su PIN.</p>
                    <div id="recover-error" class="alert alert-danger d-none" role="alert"></div>
                    <form id="form-recover-by-license">
                        <div class="mb-3">
                            <label for="recover-username" class="form-label fw-bold">Nombre de Usuario</label>
                            <input type="text" class="form-control" id="recover-username" required>
                        </div>
                        <div class="mb-3">
                            <label for="recover-cuit" class="form-label fw-bold">CUIT</label>
                            <input type="text" class="form-control" id="recover-cuit" required>
                        </div>
                        <div class="mb-3">
                            <label for="recover-key" class="form-label fw-bold">Clave de Licencia</label>
                            <input type="text" class="form-control" id="recover-key" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="btn-submit-recover">Restablecer PIN</button>
                </div>
            </div>
        </div>
    </div>

    <!-- INICIO DE CORRECCIÓN: Se agrega el script de Bootstrap aquí, antes del script personalizado -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- FIN DE CORRECCIÓN -->

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Lógica de QR y código secreto (sin cambios)
            const ip = '<%= ip %>'; const port = '<%= port %>';
            if (ip && ip !== 'localhost' && ip !== '127.0.0.1') {
                const url = `http://${ip}:${port}`;
                const urlDisplay = document.getElementById('lan-url');
                if (urlDisplay) urlDisplay.textContent = url;
                const canvas = document.getElementById('qr-canvas');
                if (canvas) { QRCode.toCanvas(canvas, url, { width: 180, margin: 2, color: { dark: '#000000', light: '#FFFFFF' } }, function (error) { if (error) console.error(error); }); }
            } else {
                const qrContainer = document.querySelector('.qr-container');
                if(qrContainer) { qrContainer.innerHTML = '<p class="text-muted m-auto">El acceso por QR solo está disponible cuando la app se ejecuta en una red local.</p>'; }
            }
            const secretCode = ['a', 'c', 'ArrowUp', 'b', 'ArrowUp', 'b', 'a', 'ArrowDown'];
            let keySequence = [];
            document.addEventListener('keydown', function(e) {
                if (e.target.tagName === 'INPUT') return;
                keySequence.push(e.key);
                if (keySequence.length > secretCode.length) keySequence.shift();
                if (JSON.stringify(keySequence) === JSON.stringify(secretCode)) {
                    window.location.href = '/emergency-recovery';
                    keySequence = [];
                }
            });

            // Lógica para Pista y Modal de Licencia
            const recoverModalEl = document.getElementById('modal-recover-by-license');
            const showHintLink = document.getElementById('show-hint-link');
            const hintContainer = document.getElementById('pin-hint-container');

            if (recoverModalEl && showHintLink && hintContainer) {
                const recoverModal = new bootstrap.Modal(recoverModalEl);

                showHintLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    this.style.display = 'none';
                    hintContainer.style.display = 'block';
                    setTimeout(() => { hintContainer.style.opacity = 1; }, 10);
                });

                const formContainer = document.querySelector('.form-container');
                if (formContainer) {
                    formContainer.addEventListener('click', function(e) {
                        if (e.target.id === 'recover-by-license-link') {
                            e.preventDefault();
                            recoverModal.show();
                        }
                    });
                }
                
                const recoverForm = document.getElementById('form-recover-by-license');
                const submitRecoverBtn = document.getElementById('btn-submit-recover');
                const errorDiv = document.getElementById('recover-error');
                
                submitRecoverBtn.addEventListener('click', async () => {
                    const username = document.getElementById('recover-username').value;
                    const cuit = document.getElementById('recover-cuit').value;
                    const licenseKey = document.getElementById('recover-key').value;
                    errorDiv.classList.add('d-none');
                    if (!username || !cuit || !licenseKey) {
                        errorDiv.textContent = 'Todos los campos son obligatorios.';
                        errorDiv.classList.remove('d-none');
                        return;
                    }
                    try {
                        submitRecoverBtn.disabled = true;
                        submitRecoverBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Verificando...';
                        const response = await fetch('/recover-by-license', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ username, cuit, licenseKey })
                        });
                        const result = await response.json();
                        if (response.ok && result.success) {
                            recoverModal.hide();
                            window.location.href = '/inicio';
                        } else {
                            errorDiv.textContent = result.message || 'Error desconocido.';
                            errorDiv.classList.remove('d-none');
                        }
                    } catch (error) {
                        errorDiv.textContent = 'Error de conexión con el servidor.';
                        errorDiv.classList.remove('d-none');
                    } finally {
                        submitRecoverBtn.disabled = false;
                        submitRecoverBtn.textContent = 'Restablecer PIN';
                    }
                });

                recoverModalEl.addEventListener('hidden.bs.modal', () => {
                    recoverForm.reset();
                    errorDiv.classList.add('d-none');
                    submitRecoverBtn.disabled = false;
                    submitRecoverBtn.textContent = 'Restablecer PIN';
                });
            }
        });
    </script>
</body>
</html>



----- C:\Users\Javier\Desktop\finanzas-app\views\manual.ejs -----
<%- include('layout/_header', { title: title }) %>

<style>
    .manual-container {
        max-width: 900px;
        margin: auto;
        background-color: #ffffff;
        padding: 25px 40px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border: 1px solid #e5e5ea;
    }
    .manual-container h1, .manual-container h2, .manual-container h3 {
        color: #1c1c1e;
        border-bottom: 2px solid #e5e5ea;
        padding-bottom: 10px;
        margin-top: 30px;
    }
    .manual-container h1 {
        text-align: center;
        font-size: 2.5em;
        color: #2060DF;
        border: none;
    }
    .manual-container h1 .icon {
        font-size: 0.9em;
    }
    .manual-container code {
        background-color: #e9ecef;
        padding: 2px 6px;
        border-radius: 4px;
        font-family: monospace;
        color: #d63384;
    }
    .icon {
        margin-right: 12px;
        width: 24px;
        text-align: center;
    }
    .text-ingreso { color: #4EA72E; }
    .text-egreso { color: #ce3838; }
    .text-registro { color: #0070C0; }
    .text-reportes { color: #e79333; }
    .text-tablero { color: #5D6B89; }
    .text-opciones { color: #636366; }

    .feature-box {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-left: 5px solid #2060DF;
        padding: 20px;
        margin: 20px 0;
        border-radius: 5px;
    }
    .feature-box h4 {
        margin-top: 0;
        color: #2060DF;
    }
    .manual-container ul {
        list-style: none;
        padding-left: 0;
    }
    .manual-container ul li {
        position: relative;
        padding-left: 25px;
        margin-bottom: 10px;
    }
    .manual-container ul li::before {
        content: '✓';
        position: absolute;
        left: 0;
        color: #4EA72E;
        font-weight: bold;
    }
    .alert {
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }
    .alert-warning {
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        color: #856404;
    }
    .alert-info {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        color: #0c5460;
    }
</style>

<div class="manual-container">
    <h1><i class="fa-solid fa-square-poll-vertical icon"></i>Mi Balance: Manual de Usuario</h1>

    <p style="text-align: center; font-size: 1.1em; color: #6c757d;">Tu guía completa para dominar la gestión de tus finanzas.</p>

    <!-- PRIMEROS PASOS -->
    <h2><i class="fa-solid fa-rocket icon"></i>Primeros Pasos</h2>
    <div class="feature-box">
        <h4><i class="fa-solid fa-key icon"></i>Acceso y Configuración Inicial</h4>
        <p>Al abrir la aplicación por primera vez, te recibirán con una pantalla de acceso. Aquí te explicamos cómo empezar.</p>
        <ul>
            <li><strong>PIN Inicial:</strong> Tu PIN de seguridad por defecto es <code>1234</code>. Ingrésalo para acceder al panel principal.</li>
            <li><strong>Activación de Licencia:</strong> Para desbloquear todas las funciones, es crucial activar tu licencia. Sin ella, la aplicación funcionará en modo de solo lectura.
                <ol style="padding-left: 20px;">
                    <li>Navega a <span class="text-opciones"><i class="fa-solid fa-bars icon"></i><strong>Opciones</strong></span> y selecciona <span class="text-opciones"><i class="fa-solid fa-key icon"></i><strong>Licencia</strong></span>.</li>
                    <li>Completa los campos con tu <strong>Nombre de Usuario</strong>, <strong>CUIT</strong> y la <strong>Clave de Licencia</strong> que se te proporcionó.</li>
                    <li>Haz clic en "Activar". Si los datos son correctos, la aplicación se reiniciará con todas sus funciones habilitadas.</li>
                </ol>
            </li>
            <li><strong>Cambio de PIN (Recomendado):</strong> Por tu seguridad, cambia el PIN inicial cuanto antes.
                <ol style="padding-left: 20px;">
                    <li>Ve a <span class="text-opciones"><i class="fa-solid fa-bars icon"></i><strong>Opciones</strong></span> ➔ <span class="text-opciones"><i class="fa-solid fa-lock-open icon"></i><strong>Cambiar PIN</strong></span>.</li>
                    <li>Ingresa el PIN actual (<code>1234</code> si es el primero).</li>
                    <li>Establece tu nuevo PIN de 4 dígitos y confírmalo.</li>
                    <li>Opcionalmente, puedes añadir una **pista** para recordarlo. Esta pista solo será visible si tienes una licencia activa.</li>
                </ol>
            </li>
        </ul>
        <div class="alert alert-warning">
            <strong><i class="fa-solid fa-triangle-exclamation"></i> ¿Olvidaste tu PIN?</strong> Si tienes una licencia activa, puedes usar la opción "Restablecer PIN con licencia" en la pantalla de acceso para recuperarlo. Esto restablecerá tu PIN a <code>1234</code> para que puedas volver a ingresar y cambiarlo.
        </div>
    </div>

    <!-- TABLERO -->
    <h2><i class="fa-solid fa-chart-simple icon text-tablero"></i>El Tablero Principal</h2>
    <div class="feature-box">
        <h4><i class="fa-solid fa-gauge-high icon"></i>Tu Centro de Control Financiero</h4>
        <p>La pantalla de <strong>Inicio</strong> te da una visión panorámica y en tiempo real de la salud de tu negocio.</p>
        <ul>
            <li><strong>Selector de Período Dinámico:</strong> Elige la granularidad de tus datos: <strong>Anual, Mensual o Semanal</strong>. Utiliza las flechas <i class="fa-solid fa-chevron-left"></i> y <i class="fa-solid fa-chevron-right"></i> o desliza en tu dispositivo móvil para navegar rápidamente entre períodos.</li>
            <li><strong>Tarjetas de Balance:</strong>
                <ul style="padding-left: 20px;">
                    <li><span class="text-ingreso"><i class="fa-solid fa-circle-up icon"></i><strong>Ingresos</strong></span>: Muestra el total de ingresos del período.</li>
                    <li><span class="text-tablero"><i class="fa-solid fa-scale-balanced icon"></i><strong>Balance</strong></span>: El resultado neto (Ingresos - Egresos).</li>
                    <li><span class="text-egreso"><i class="fa-solid fa-circle-down icon"></i><strong>Egresos</strong></span>: El total de egresos del período.</li>
                </ul>
                <p>Cada tarjeta incluye una comparación porcentual con el período anterior (ej. vs mes pasado), ayudándote a identificar tendencias.</p>
            </li>
            <li><strong>Gráfico Histórico General:</strong> Un gráfico de barras compara tus ingresos y egresos de los últimos 12 períodos, dándote una perspectiva a largo plazo.</li>
            <li><strong>Ranking del Período:</strong> Analiza rápidamente tu rendimiento con un Top 5 de:
                <ul style="padding-left: 20px;">
                    <li><strong>Clientes:</strong> Quiénes te generan más ingresos.</li>
                    <li><strong>Proveedores:</strong> En quiénes estás invirtiendo más.</li>
                    <li><strong>Ingresos:</strong> Qué categorías de venta son las más rentables.</li>
                    <li><strong>Egresos:</strong> Cuáles son tus principales categorías de gastos.</li>
                </ul>
            </li>
            <li><strong>Histórico Personalizado:</strong> Utiliza el buscador <i class="fa-solid fa-magnifying-glass"></i> para seleccionar un cliente, proveedor o categoría específica y visualiza su evolución financiera en un gráfico dedicado.</li>
        </ul>
    </div>

    <!-- INGRESOS -->
    <h2><i class="fa-solid fa-circle-up icon text-ingreso"></i>Gestión de Ingresos</h2>
    <div class="feature-box">
        <h4><i class="fa-solid fa-cash-register icon"></i>Carga de Ventas y Cobranzas</h4>
        <p>Registra cualquier entrada de dinero de forma precisa y organizada.</p>
        <ol style="padding-left: 20px;">
            <li><strong>Selecciona el Cliente:</strong> Usa el campo de búsqueda para encontrar a tu cliente por nombre, ID o CUIT. Puedes escribir <code>*</code> para verlos a todos. Si el cliente no existe, puedes crearlo desde el menú <span class="text-opciones"><i class="fa-solid fa-sliders icon"></i><strong>Gestionar</strong></span>.</li>
            <li><strong>Completa los Datos del Movimiento:</strong>
                <ul style="padding-left: 20px;">
                    <li><strong>Fecha:</strong> Por defecto, se establece la fecha actual.</li>
                    <li><strong>Importe:</strong> El monto total del ingreso.</li>
                    <li><strong>Modalidad:</strong> Elige cómo se recibió el pago (Efectivo, Transferencia, etc.). Si no encuentras una opción, puedes añadirla seleccionando "Otra...".</li>
                    <li><strong>Categoría:</strong> Asigna una categoría para clasificar el ingreso (ej. "Ventas web", "Servicios").</li>
                    <li><strong>Comentario (Opcional):</strong> Añade cualquier nota relevante de hasta 140 caracteres.</li>
                </ul>
            </li>
            <li><strong>Función de Crédito <i class="fa-solid fa-toggle-on"></i>:</strong> Si necesitas registrar una nota de crédito, una devolución o un ajuste que *reste* saldo al cliente, activa el interruptor <strong>"Crédito"</strong>. El monto se guardará como un valor negativo en el historial.</li>
            <li><strong>Confirmar:</strong> Haz clic en <button style="border:none; padding: 5px 10px; background-color: #e9ecef; border-radius: 4px;"><i class="fa-solid fa-check"></i> Confirmar Movimiento</button> para guardar el registro.</li>
        </ol>
        <div class="alert alert-info">
            <strong><i class="fa-solid fa-clock-rotate-left"></i> Historial a la Vista:</strong> Al seleccionar un cliente, su historial de movimientos más recientes aparecerá a la derecha de la pantalla, dándote contexto inmediato.
        </div>
    </div>

    <!-- EGRESOS -->
    <h2><i class="fa-solid fa-circle-down icon text-egreso"></i>Gestión de Egresos</h2>
    <div class="feature-box">
        <h4><i class="fa-solid fa-receipt icon"></i>Carga de Pagos y Compras</h4>
        <p>El proceso es idéntico al de los ingresos, pero enfocado en las salidas de dinero.</p>
        <ol style="padding-left: 20px;">
            <li><strong>Selecciona el Proveedor:</strong> Busca a tu proveedor por nombre, ID o CUIT.</li>
            <li><strong>Completa los Datos:</strong> Fecha, Importe, Modalidad, Categoría y Comentario.</li>
            <li><strong>Función de Crédito <i class="fa-solid fa-toggle-on"></i>:</strong> Activa este interruptor si un proveedor te ha emitido una nota de crédito o te ha hecho una devolución. Esto registrará un "egreso negativo" (una entrada de dinero) a tu favor.</li>
            <li><strong>Confirmar Movimiento:</strong> Guarda el registro.</li>
        </ol>
    </div>

    <!-- REGISTRO -->
    <h2><i class="fa-solid fa-table-list icon text-registro"></i>Registro de Movimientos</h2>
    <div class="feature-box">
        <h4><i class="fa-solid fa-book-bookmark icon"></i>Tu Libro Contable Digital</h4>
        <p>El Registro es el corazón de tu contabilidad, donde puedes consultar, filtrar y gestionar cada movimiento.</p>
        <ul>
            <li><strong>Filtros por Tipo:</strong> Usa los botones para visualizar rápidamente lo que necesitas.</li>
            <li><strong>Búsqueda y Fechas:</strong> Utiliza los campos de la parte superior para filtrar por un rango de fechas específico o buscar por texto libre (nombre, categoría, modalidad, etc.).</li>
            <li><strong>Paginación:</strong> Si tienes muchos movimientos, la tabla se dividirá en páginas para una navegación más cómoda.</li>
            <li><strong>Gestión de Movimientos:</strong>
                <ul style="padding-left: 20px;">
                    <li><span class="text-opciones"><i class="fa-solid fa-pencil icon"></i><strong>Editar:</strong></span> Modifica cualquier dato de un movimiento. Serás redirigido a la pantalla de carga correspondiente.</li>
                    <li><span class="text-egreso"><i class="fa-solid fa-trash icon"></i><strong>Eliminar:</strong></span> Borra un movimiento de forma permanente (requiere confirmación).</li>
                </ul>
            </li>
        </ul>
    </div>

    <!-- REPORTES -->
    <h2><i class="fa-solid fa-file-lines icon text-reportes"></i>Reportes e Informes</h2>
    <div class="feature-box">
        <h4><i class="fa-solid fa-magnifying-glass-chart icon"></i>Análisis Profundo de tus Datos</h4>
        <p>Transforma tus datos en información valiosa con el potente motor de reportes.</p>
        <ul>
            <li><strong>Configuración del Reporte:</strong>
                <ol style="padding-left: 20px;">
                    <li><strong>Período:</strong> Define el rango de fechas a analizar.</li>
                    <li><strong>Filtros Avanzados:</strong> Acota los resultados por <strong>Tipo</strong> (ingresos/egresos), <strong>Categoría</strong>, <strong>Modalidad</strong>, <strong>Clientes</strong> o <strong>Proveedores</strong> específicos. Puedes seleccionar múltiples valores en cada filtro.</li>
                    <li><strong>Vista Detallada vs. Resumida:</strong>
                        <ul style="padding-left: 20px;">
                            <li><strong>Detallado:</strong> Si no eliges un nivel de resumen, obtendrás un listado de cada movimiento individual que coincida con tus filtros.</li>
                            <li><strong>Resumido:</strong> Agrupa tus datos hasta en tres niveles jerárquicos. Por ejemplo, puedes ver tus gastos <em>Por Mes</em> ➔ <em>Por Categoría</em> ➔ <em>Por Proveedor</em>.</li>
                        </ul>
                    </li>
                </ol>
            </li>
            <li><strong>Generación y Exportación:</strong>
                <ul style="padding-left: 20px;">
                    <li>Haz clic en <button style="border:none; padding: 5px 10px; background-color: #e9ecef; border-radius: 4px;"><i class="fa-solid fa-cogs"></i> Generar Reporte</button> para ver los resultados en pantalla.</li>
                    <li>Usa el botón <button style="border:none; padding: 5px 10px; background-color: #e9ecef; border-radius: 4px;"><i class="fa-solid fa-download"></i> Exportar</button> para descargar tu informe en formato **PDF** o **Excel**.</li>
                </ul>
            </li>
        </ul>
    </div>

    <!-- MANTENIMIENTO -->
    <h2><i class="fa-solid fa-database icon text-opciones"></i>Ajustes y Mantenimiento</h2>
    <div class="feature-box">
        <h4><i class="fa-solid fa-shield-halved icon"></i>Mantén tu Información Segura</h4>
        <p>Accede desde <span class="text-opciones"><i class="fa-solid fa-bars icon"></i><strong>Opciones</strong></span> ➔ <span class="text-opciones"><i class="fa-solid fa-database icon"></i><strong>Base de Datos</strong></span>.</p>
        <ul>
            <li><strong>Respaldos Locales (Backups):</strong>
                <ul style="padding-left: 20px;">
                    <li><strong>Configuración:</strong> Define una carpeta en tu PC para guardar las copias de seguridad. Puedes programar respaldos automáticos **al iniciar la app**, **diariamente** o solo los **días hábiles** a una hora específica.</li>
                    <li><strong>Creación Manual:</strong> Crea un respaldo en cualquier momento con el botón <button style="border:none; padding: 5px 10px; background-color: #e9ecef; border-radius: 4px;"><i class="fa-solid fa-save"></i> Crear Respaldo Ahora</button>.</li>
                    <li><strong>Restauración:</strong> Restaura tu base de datos a un estado anterior seleccionando un respaldo de la lista o subiendo un archivo <code>.sqlite</code> desde tu equipo. <strong>Esta acción reemplazará todos los datos actuales</strong>.</li>
                </ul>
            </li>
            <li><strong>Zona de Alto Riesgo:</strong>
                <ul style="padding-left: 20px;">
                    <li><strong>Resetear Aplicación:</strong> Esta función <strong>elimina permanentemente toda tu información</strong> y restaura la aplicación a su estado inicial, incluyendo el PIN por defecto (<code>1234</code>). <strong>Requiere tu PIN actual como confirmación y es irreversible</strong>.</li>
                </ul>
            </li>
        </ul>
    </div>
</div>

<%- include('layout/_footer') %>


----- C:\Users\Javier\Desktop\finanzas-app\views\pago.ejs -----
<%- include('layout/_header', { title: title }) %>

<h1 class="mt-4 mb-4 page-title">
    <span class="title-egresos badge">
        <i class="fa-solid fa-circle-down me-4"></i>Egresos · Compras · Pagos
    </span>
</h1>

<% if (!isLicensed) { %>
    <div class="alert alert-warning text-center">
        <i class="fa-solid fa-lock me-2"></i> Para cargar o modificar egresos, se requiere una licencia activa.
    </div>
<% } %>

<div class="form-historial-container">
    
    <div class="form-container-flex">
        <div class="card">
            <div class="card-body">
                <form id="form-cargar-pago" action="<%= movimiento ? '/pago/editar/' + movimiento.id : '/pago' %>" method="POST">
                    <fieldset <%= !isLicensed ? 'disabled' : '' %>>
                        <% if (locals.returnToReport) { %>
                            <input type="hidden" name="returnToReport" value="true">
                            <input type="hidden" name="returnQuery" value="<%= returnQuery %>">
                         <% } %>
                        <% if (locals.returnToRegistro) { %>
                            <input type="hidden" name="returnToRegistro" value="true">
                            <input type="hidden" name="returnQuery" value="<%= returnQuery %>">
                         <% } %>
                        
                        <div class="mb-3">
                            <label for="proveedor-search" class="form-label">Proveedor</label>
                            <div class="position-relative">
                                <div class="input-group">
                                    <div class="position-relative flex-grow-1">
                                         <input type="text" class="form-control" id="proveedor-search" placeholder="Buscar proveedor o ingresar * para ver todos" autocomplete="off" value="<%= proveedorSeleccionado ? `${proveedorSeleccionado.nombre} (${proveedorSeleccionado.id})` : '' %>" <%= proveedorSeleccionado ? 'disabled' : '' %>>
                                        <button class="btn btn-sm btn-icon position-absolute top-50 end-0 translate-middle-y <%= proveedorSeleccionado ? '' : 'd-none' %>" type="button" id="btn-clear-proveedor-selection" title="Limpiar selección" data-bs-toggle="tooltip" style="z-index: 5;">
                                            <i class="fa-solid fa-times"></i>
                                        </button>
                                     </div>
                                </div>
                                <div class="list-group position-absolute w-100" id="search-results-pago" style="z-index: 1050;"></div>
                             </div>
                        </div>
            
                        <input type="hidden" id="proveedor_id" name="proveedor_id" value="<%= proveedorSeleccionado ? proveedorSeleccionado.id : '' %>">
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                 <label for="fecha" class="form-label">Fecha</label>
                                <input type="date" class="form-control" id="fecha" name="fecha" value="<%= movimiento ? movimiento.fecha : getTodayForInput() %>" required>
                            </div>
                            <div class="col-md-8">
                                <label for="importe" class="form-label">Importe</label>
                                 <div class="d-flex align-items-center gap-3">
                                    <div class="input-group">
                                        <span class="input-group-text" id="importe-signo">$</span>
                                        <%# --- INICIO CORRECCIÓN --- %>
                                        <input type="number" class="form-control" id="importe" name="importe" placeholder="0.00" value="<%= movimiento ? Math.abs(movimiento.monto) : '' %>" required step="0.01">
                                        <%# --- FIN CORRECCIÓN --- %>
                                    </div>
                                    <div class="d-flex align-items-center">
                                         <div class="form-check form-switch">
                                            <%# --- INICIO CORRECCIÓN --- %>
                                            <input class="form-check-input" type="checkbox" role="switch" value="true" id="es_ajuste_pago" name="es_ajuste" <%= (movimiento && movimiento.monto < 0) ? 'checked' : '' %>>
                                            <%# --- FIN CORRECCIÓN --- %>
                                             <label class="form-check-label label-ajuste text-nowrap" for="es_ajuste_pago">Crédito</label>
                                        </div>
                                        <i class="fa-solid fa-circle-info info-icon ms-2" data-bs-toggle="tooltip" data-bs-placement="top" 
                                            title="Útil para registrar notas de crédito, ajustes, devoluciones o reembolsos de proveedores.">
                                        </i>
                                    </div>
                                 </div>
                            </div>
                        </div>

                         <div class="mb-3">
                            <label class="form-label" for="modalidad-select-pago">Modalidad</label>
                            <select class="form-select" name="modalidad" id="modalidad-select-pago">
                                 <% 
                                    let selectedModalidad = movimiento ? movimiento.modalidad : (modalidades.length > 0 ? modalidades[0].nombre : '');
                                    modalidades.forEach(m => { %>
                                        <option value="<%= m.nombre %>" <%= selectedModalidad === m.nombre ? 'selected' : '' %>><%= m.nombre %></option>
                                     <% }); %>
                                <% if (movimiento && !modalidades.some(m => m.nombre === movimiento.modalidad)) { %>
                                    <option value="<%= movimiento.modalidad %>" selected class="custom-modalidad"><%= movimiento.modalidad %></option>
                                     <% } %>
                                <option value="Otra...">Otra...</option>
                            </select>
                        </div>
                    
                        <div class="mb-3">
                            <label for="categoria_id_pago" class="form-label">Categoría</label>
                            <select class="form-select" name="categoria_id" id="categoria_id_pago">
                                <% categorias.forEach(cat => { %>
                                    <option value="<%= cat.id %>" data-editable="<%= cat.es_editable %>" 
                                     <%= (movimiento && movimiento.categoria_id == cat.id) || (!movimiento && cat.es_editable == 0) ? 'selected' : '' %>>
                                        <%= cat.nombre %>
                                    </option>
                                     <% }); %>
                            </select>
                         </div>
                        
                        <div class="mb-3">
                            <label for="comentarios" class="form-label">Comentario (opcional)</label>
                            <div class="position-relative">
                                <textarea class="form-control" id="comentarios" name="comentarios" rows="1" maxlength="140"><%= movimiento ? (movimiento.descripcion || '') : '' %></textarea>
                                <button type="button" class="btn btn-sm btn-icon position-absolute top-50 end-0 translate-middle-y " id="btn-clear-comentario-pago" title="Limpiar comentario" data-bs-toggle="tooltip">
                                    <i class="fa-solid fa-times"></i>
                                 </button>
                            </div>
                            <div id="char-counter-pago" class="form-text text-end d-none">0 / 140</div>
                        </div>
                         
                        <div class="d-grid gap-2 mt-4">
                            <span id="btn-confirmar-wrapper-pago" class="d-grid" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Faltan datos obligatorios por completar">
                                 <button type="submit" class="btn btn-primary" id="btn-confirmar-movimiento-pago">
                                    <i class="fa-solid fa-check me-2"></i>
                                    <%= movimiento ? 'Actualizar Movimiento' : 'Confirmar Movimiento' %>
                                </button>
                            </span>
                        </div>
                    </fieldset>

                    <div class="d-flex justify-content-between align-items-center mt-2">
                        <div>
                            <% if (!movimiento) { %>                               
                                <button type="button" class="btn btn-link" data-bs-toggle="modal" data-bs-target="#modal-confirmar-restablecer-pago" <%= !isLicensed ? 'disabled' : '' %>><i class="fa-solid fa-undo me-1"></i>Restablecer</button>
                            <% } %>
                        </div>
                        <% if (!movimiento && isLicensed) { %>
                        <div class="dropup">
                            <button class="btn btn-tertiary dropdown-toggle" type="button" id="dropdownMenuButtonPago" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fa-solid fa-sliders me-2"></i>Gestionar
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButtonPago">
                                <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modal-gestionar-proveedores"><i class="fa-solid fa-users fa-fw me-2 mb-2"></i>Proveedores</a></li>
                                <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modal-gestion-categorias-pago"><i class="fa-solid fa-tags fa-fw me-2 mb-2"></i>Categorías</a></li>
                                <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modal-gestion-modalidades-pago"><i class="fa-solid fa-wallet fa-fw me-2 mb-2"></i>Modalidades</a></li>
                            </ul>
                        </div>
                        <% } %>
                    </div>

                     <% if (locals.returnToRegistro || locals.returnToReport) { %>
                        <div class="d-grid mt-2">
                            <a href="<%= locals.returnToRegistro ? '/registro?' + returnQuery : '/reportes/generar?' + returnQuery %>" class="btn btn-outline-secondary">Cancelar y Volver</a>
                        </div>
                    <% } %>
                </form>
            </div>
        </div>
    </div>
    
    <div class="historial-container-flex">
         <div id="historial-proveedor-container">
            <% if (proveedorSeleccionado) { %>
                <%- include('partials/_historial_reciente_egresos', { movimientos: [], proveedorSeleccionado: proveedorSeleccionado }) %>
            <% } %>
        </div>
    </div>
</div>

<!-- Modals remain the same -->
<%- include('partials/_pago_modals') %>

<% pageScripts = '<script src="/js/pago.client.js"></script>' %>
<%- include('layout/_footer') %>


----- C:\Users\Javier\Desktop\finanzas-app\views\partials\_historial_reciente_egresos.ejs -----
<!-- partials/_historial_reciente_egresos.ejs -->

<% if (proveedorSeleccionado) { %>
    <div class="card" style="width: fit-content;">
        <div class="card-body">
            <h6 class="card-title text-muted mb-4" style="font-size: 1.10rem;"><i class="fa-solid fa-clock-rotate-left me-2" style="color: var(--egresos-color);"></i>Historial reciente del Proveedor</h6>

            <% if (movimientos && movimientos.length > 0) { %>
                <div class="table-responsive">
                    <table class="table table-flush border-top" style="width: auto;">
                         <tbody>
                            <% 
                            const meses = ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"];
                            movimientos.forEach((mov) => {
                                const fecha = new Date(mov.fecha + 'T00:00:00');
                                const fechaFormateada = `${String(fecha.getDate()).padStart(2, '0')}-${meses[fecha.getMonth()]}`;
                                
                                // CORREGIDO: La clase del badge se invierte para egresos.
                                // Un monto positivo (gasto) es 'egreso' (rojo).
                                // Un monto negativo (crédito) es 'ingreso' (verde).
                                const badgeClass = mov.monto >= 0 ? 'egreso' : 'ingreso';
                            %>
                            <tr style="vertical-align: middle;">
                                <%#-- FECHA --%>
                                <td class="text-center text-nowrap" style="font-size: 0.8rem; width: 60px;">
                                    <span class="text-muted"><%= fechaFormateada %></span>
                                </td>
                                <%#-- CAT & MOD --%>
                                <td class="px-3" style="font-size: 0.9rem; width: 1%; white-space: nowrap;">
                                    <div class="fw-semibold text-muted small"><%= mov.categoria_nombre %></div>
                                    <div class="text-muted small"><%= mov.modalidad %></div>
                                </td>
                                <%#-- COMENT --%>
                                <td class="text-center" style="width: 40px;">
                                    <% if (mov.comentarios) { %>
                                        <i class="fa-solid fa-comment-dots text-muted" data-bs-toggle="tooltip" data-bs-placement="top" title="<%= mov.comentarios %>"></i>
                                    <% } %>
                                </td>
                                
                                <%#-- IMPORTE --%>
                                <td class="text-end" style="white-space: nowrap;">
                                    <span class="importe-badge <%= badgeClass %> text-nowrap">
                                        <%# CORREGIDO: Se usa formatExpense para mostrar el signo correcto para egresos. %>
                                        <%= formatExpense(mov.monto) %>
                                    </span>
                                </td>
                            </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <p class="text-center text-muted mt-3">Este proveedor no tiene movimientos registrados.</p>
            <% } %>

            <div class="text-end mt-1">
                <a href="/registro?busqueda=<%= proveedorSeleccionado.id %>" class="btn btn-link" title="Se visualizarán todos los movimientos de este proveedor en el registro." data-bs-toggle="tooltip" data-bs-placement="bottom">
                    <i class="fa-solid fa-arrow-up-right-from-square me-2"></i>Ver más...
                </a>
            </div>
        </div>
    </div>
<% } %>


----- C:\Users\Javier\Desktop\finanzas-app\views\partials\_historial_reciente_ingresos.ejs -----
<!-- partials/_historial_reciente_ingresos.ejs -->

<% if (clienteSeleccionado) { %>
    <div class="card" style="width: fit-content;">
        <div class="card-body">
            <h6 class="card-title text-muted mb-4" style="font-size: 1.10rem;"><i class="fa-solid fa-clock-rotate-left me-2" style="color: var(--ingresos-color);"></i>Historial reciente del Cliente</h6>

            <% if (movimientos && movimientos.length > 0) { %>
                <div class="table-responsive">
                    <table class="table table-flush border-top" style="width: auto;">
                         <tbody>
                            <% 
                            const meses = ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"];
                            movimientos.forEach((mov) => {
                                const fecha = new Date(mov.fecha + 'T00:00:00');
                                const fechaFormateada = `${String(fecha.getDate()).padStart(2, '0')}-${meses[fecha.getMonth()]}`;
                                
                                // La clase del badge ahora respeta estrictamente el signo del importe.
                                // Positivo (>= 0) usa 'ingreso' (verde).
                                // Negativo (< 0) usa 'egreso' (rojo).
                                const badgeClass = mov.monto >= 0 ? 'ingreso' : 'egreso';
                            %>
                            <tr style="vertical-align: middle;">
                                <%#-- FECHA --%>
                                <td class="text-center text-nowrap" style="font-size: 0.8rem; width: 60px;">
                                    <span class="text-muted"><%= fechaFormateada %></span>
                                </td>
                                <%#-- CAT & MOD --%>
                                <td class="px-3" style="font-size: 0.9rem; width: 1%; white-space: nowrap;">
                                    <div class="fw-semibold text-muted small"><%= mov.categoria_nombre %></div>
                                    <div class="text-muted small"><%= mov.modalidad %></div>
                                </td>
                                <%#-- COMENT --%>
                                <td class="text-center" style="width: 40px;">
                                    <% if (mov.comentarios) { %>
                                        <i class="fa-solid fa-comment-dots text-muted" data-bs-toggle="tooltip" data-bs-placement="top" title="<%= mov.comentarios %>"></i>
                                    <% } %>
                                </td>
                                
                                <%#-- IMPORTE --%>
                                <td class="text-end" style="white-space: nowrap;">
                                    <span class="importe-badge <%= badgeClass %> text-nowrap">
                                        <%# Se usa formatIncome para que el signo (+/-) coincida directamente con el del importe %>
                                        <%= formatIncome(mov.monto) %>
                                    </span>
                                </td>
                            </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <p class="text-center text-muted mt-3">Este cliente no tiene movimientos registrados.</p>
            <% } %>

            <div class="text-end mt-1">
                <a href="/registro?busqueda=<%= clienteSeleccionado.id %>" class="btn btn-link" title="Se visualizarán todos los movimientos de este cliente en el registro." data-bs-toggle="tooltip" data-bs-placement="bottom">
                    <i class="fa-solid fa-arrow-up-right-from-square me-2"></i>Ver más...
                </a>
            </div>
        </div>
    </div>
<% } %>


----- C:\Users\Javier\Desktop\finanzas-app\views\partials\_movimientos_items.ejs -----
<!-- partials/_movimientos_items.ejs -->

<% if (ultimosMovimientos.length === 0) { %>
    <div class="text-center text-muted p-4">No hay movimientos para mostrar.</div>
<% } else { %>
    <% ultimosMovimientos.forEach(mov => { %>
        <div class="list-group-item movement-item">
            <div class="movement-info">
                <div class="movement-entity"><%= mov.entidad_nombre %></div>
                <div class="movement-meta">
                    <span class="movement-date"><%= new Date(mov.fecha + 'T00:00:00').toLocaleDateString('es-AR', { day: '2-digit', month: '2-digit', year: '2-digit' }) %></span>
                    <% if(mov.categoria_nombre) { %>
                              <span class="badge category-badge <%= mov.tipo %>"><%= mov.categoria_nombre %></span>
                    <% } %>
                </div>
            </div>
            <div class="movement-amount <%= mov.tipo %>">
                <%= mov.tipo === 'ingreso' ? formatIncome(mov.monto) : formatExpense(mov.monto) %>
            </div>
        </div>
    <% }) %>
<% } %>

----- C:\Users\Javier\Desktop\finanzas-app\views\partials\_pago_modals.ejs -----
<!-- partials/_pago_modals -->

<div class="modal fade" id="modal-gestionar-proveedores" tabindex="-1" aria-labelledby="modalGestionarProveedoresLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalGestionarProveedoresLabel">Gestionar Proveedores</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted small">Seleccione un proveedor para editarlo o agregue uno nuevo.</p>
                <ul class="list-group" id="lista-gestion-proveedores" style="max-height: 400px; overflow-y: auto;">
                    <!-- Lista de proveedores se cargará aquí dinámicamente -->
                </ul>
            </div>
            <div class="modal-footer d-flex justify-content-between">
                <div class="flex-grow-1 me-2">
                    <input type="text" class="form-control" id="input-buscar-gestion-proveedor" placeholder="Buscar proveedor...">
                </div>
                <button type="button" class="btn btn-primary" id="btn-nuevo-proveedor-gestion">
                    <i class="fa-solid fa-user-plus me-2"></i>Nuevo Proveedor
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-agregar-proveedor" tabindex="-1"><div class="modal-dialog"><div class="modal-content">
    <div class="modal-header"><h5 class="modal-title" id="modal-proveedor-label"></h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
    <div class="modal-body">
        <form id="form-agregar-proveedor">
            <input type="hidden" id="modal-proveedor-id">
            <div class="mb-3"><label for="modal-proveedor-nombre" class="form-label">Nombre / Razón Social</label><input type="text" class="form-control" id="modal-proveedor-nombre" required placeholder="dato obligatorio"></div>
            <div class="mb-3"><label for="modal-proveedor-cuit" class="form-label">CUIT/DNI</label><input type="text" class="form-control" id="modal-proveedor-cuit" required placeholder="dato obligatorio"></div>
            <div class="mb-3"><label for="modal-proveedor-categoria" class="form-label">Categoría sugerida</label><select class="form-select" id="modal-proveedor-categoria"><% categorias.forEach(cat => { %><option value="<%= cat.id %>"><%= cat.nombre %></option><% }); %></select></div>
            <div class="mb-3"><label for="modal-proveedor-telefono" class="form-label">Teléfono</label><input type="tel" class="form-control" id="modal-proveedor-telefono"></div>
            <div class="mb-3"><label for="modal-proveedor-email" class="form-label">Email</label><input type="email" class="form-control" id="modal-proveedor-email"></div>
            <div class="mb-3"><label for="modal-proveedor-comentarios" class="form-label">Comentarios</label><textarea class="form-control" id="modal-proveedor-comentarios" rows="3" maxlength="140"></textarea><div id="modal-char-counter-pago" class="form-text text-end">0 / 140</div></div>
        </form>
    </div>
    <div class="modal-footer d-flex">
        <button type="button" class="btn btn-outline-danger" id="btn-eliminar-proveedor-modal" style="flex: 1;">Eliminar</button>
         <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" style="flex: 1;">Cancelar</button>
        <button type="button" class="btn btn-primary" id="btn-guardar-proveedor" style="flex: 2;">Guardar</button>
    </div>
</div></div></div>

<div class="modal fade" id="modal-confirmar-eliminar-proveedor" tabindex="-1"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Confirmar Eliminación</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body">
    <div class="alert alert-warning"><strong>Atención:</strong> Al eliminar un proveedor, se borrarán también <strong>todos sus movimientos asociados</strong>. Esta acción es irreversible.</div>
    <p>Para confirmar, escriba <strong id="palabra-confirmacion-pago" class="text-danger"></strong> abajo.</p><input type="text" class="form-control" id="input-confirmacion-pago"></div>
    <div class="modal-footer"><button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button><button type="button" class="btn btn-danger" id="btn-confirmar-eliminacion-final-pago" disabled>Eliminar</button></div></div></div></div>

<div class="modal fade" id="modal-gestion-categorias-pago" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Editar Categorías de Egresos</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted small">Aquí puede editar, eliminar y agregar las categorías.</p>
                <ul class="list-group" id="lista-categorias-gestion-pago" style="max-height: 400px; overflow-y: auto;"></ul>
            </div>
            <div class="modal-footer">
                <form id="form-agregar-categoria-pago" class="w-100">
                    <div class="input-group">
                        <input type="text" class="form-control" id="input-nueva-categoria-gestion-pago" placeholder="Nueva categoría" required>
                        <button class="btn btn-primary" type="submit">Agregar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-confirmar-restablecer-pago" tabindex="-1"><div class="modal-dialog"><div class="modal-content">
    <div class="modal-header"><h5 class="modal-title">Confirmar Acción</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
    <div class="modal-body"><p>¿Está seguro que desea reiniciar el formulario? Se perderán los datos no guardados.</p></div>
    <div class="modal-footer"><button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button><button type="button" class="btn btn-danger" id="btn-confirmar-restablecer-final-pago">Sí, Restablecer</button></div>
</div></div></div>

<div class="modal fade" id="modal-confirmar-eliminar-movimiento-pago" tabindex="-1"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Confirmar Eliminación</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body"><p>¿Está seguro que desea eliminar este movimiento?</p></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button><button type="button" class="btn btn-danger" id="btn-confirmar-eliminacion-movimiento-final-pago">Sí, Eliminar</button></div></div></div></div>

<div class="modal fade" id="modal-confirmar-ajuste-pago" tabindex="-1"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><h5 class="modal-title text-warning"><i class="fa-solid fa-triangle-exclamation me-2"></i>Atención</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
    <div class="modal-body"><p>Está por registrar un movimiento que generará <strong>un crédito positivo</strong> en el historial del Proveedor.</p></div>
    <div class="modal-footer"><button type="button" class="btn btn-outline-secondary" id="btn-volver-ajuste-pago" data-bs-dismiss="modal">Volver</button><button type="button" class="btn btn-warning" id="btn-continuar-ajuste-pago">Continuar</button></div>
</div></div></div>

<div class="modal fade" id="modal-otra-modalidad-pago" tabindex="-1"><div class="modal-dialog modal-dialog-centered"><div class="modal-content">
    <div class="modal-header"><h5 class="modal-title">Especificar Modalidad</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
    <div class="modal-body"><div class="mb-3"><label for="input-nueva-modalidad-pago" class="form-label">Nombre de la nueva modalidad:</label><input type="text" class="form-control" id="input-nueva-modalidad-pago"></div></div>
    <div class="modal-footer"><button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button><button type="button" class="btn btn-primary" id="btn-guardar-nueva-modalidad-pago">Guardar</button></div>
</div></div></div>
    
<div class="modal fade" id="modal-gestion-modalidades-pago" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Editar Modalidades</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted small">Aquí puede editar, eliminar y agregar las modalidades de pago. La modalidad <strong>Efectivo</strong> no se puede modificar.</p>
                <p class="text-muted small mb-3">
                    <i class="fa-solid fa-circle-info me-2"></i>Las modalidades son las mismas y compartidas entre pagos y cobranzas.
                </p>
                <ul class="list-group" id="lista-modalidades-gestion-pago" style="max-height: 400px; overflow-y: auto;"></ul>
            </div>
            <div class="modal-footer">
                <form id="form-agregar-modalidad-pago" class="w-100">
                    <div class="input-group">
                        <input type="text" class="form-control" id="input-nueva-modalidad-gestion-pago" placeholder="Nueva modalidad" required>
                        <button class="btn btn-primary" type="submit">Agregar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-confirmar-gestion-pago" tabindex="-1" style="z-index: 1060;"><div class="modal-dialog modal-dialog-centered"><div class="modal-content">
    <div class="modal-header"><h5 class="modal-title">Confirmar Eliminación</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
    <div class="modal-body"><p id="modal-confirmar-gestion-body-pago"></p></div>
    <div class="modal-footer"><button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button><button type="button" class="btn btn-danger" id="btn-confirmar-gestion-final-pago">Confirmar</button></div>
</div></div></div>


----- C:\Users\Javier\Desktop\finanzas-app\views\partials\_reporte_resumen_fila.ejs -----
<!-- partials/_reporte_resumen_fila.ejs -->

<% items.forEach(item => { %>
    <tr class="level-<%= nivel %>">
        <%# Columna de Concepto (siempre presente) %>
        <td>
            <span class="concept-label"><%= item.clave %></span>
        </td>

        <%# Columnas de Importes (dependen del tipo de reporte) %>
        <% if (tipo === 'todos') { %>
            <td class="text-end text-nowrap amount-cell"><%- formatReportBalancePlain(item.ingresos) %></td>
            <td class="text-end text-nowrap amount-cell"><%- formatReportBalancePlain(-item.egresos) %></td>
            <td class="text-end text-nowrap amount-cell"><%- formatReportBalancePlain(item.resultado) %></td>
        <% } else { %>
            <td class="text-end text-nowrap amount-cell">
            <%- formatSummaryCurrency(tipo === 'ingreso' ? item.ingresos : -item.egresos) %>            </td>
        <% } %>
    </tr>

    <%# Llamada recursiva si hay subgrupos %>
    <% if (item.subgrupos && item.subgrupos.length > 0) { %>
        <%- include('_reporte_resumen_fila', {
            items: item.subgrupos,
            nivel: nivel + 1,
            tipo: tipo,
            formatReportCurrencySimple: formatReportCurrencySimple,
            formatReportBalancePlain: formatReportBalancePlain
        }) %>
    <% } %>
<% }) %>


----- C:\Users\Javier\Desktop\finanzas-app\views\partials\_venta_modals.ejs -----
<!-- partials/_venta_modals.ejs -->

<div class="modal fade" id="modal-gestionar-clientes" tabindex="-1" aria-labelledby="modalGestionarClientesLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalGestionarClientesLabel">Gestionar Clientes</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted small">Seleccione un cliente para editarlo o agregue uno nuevo.</p>
                <ul class="list-group" id="lista-gestion-clientes" style="max-height: 400px; overflow-y: auto;">
                    </ul>
            </div>
            <div class="modal-footer d-flex justify-content-between">
                <div class="flex-grow-1 me-2">
                    <input type="text" class="form-control" id="input-buscar-gestion-cliente" placeholder="Buscar cliente...">
                </div>
                <button type="button" class="btn btn-primary" id="btn-nuevo-cliente-gestion">
                    <i class="fa-solid fa-user-plus me-2"></i>Nuevo Cliente
                </button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="modal-agregar-cliente" tabindex="-1" aria-labelledby="modalAgregarClienteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalAgregarClienteLabel">Agregar Nuevo Cliente</h5>
                 <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="form-agregar-cliente">
                    <div class="mb-3"><label for="modal-agregar-cliente-nombre" class="form-label">Nombre / Razón Social</label><input type="text" class="form-control" id="modal-agregar-cliente-nombre" required placeholder="dato obligatorio"></div>
                     <div class="mb-3"><label for="modal-agregar-cliente-cuit" class="form-label">CUIT/DNI</label><input type="text" class="form-control" id="modal-agregar-cliente-cuit" required placeholder="dato obligatorio"></div>
                    <div class="mb-3"><label for="modal-agregar-cliente-categoria" class="form-label">Categoría sugerida</label><select class="form-select" id="modal-agregar-cliente-categoria"><% categorias.forEach(cat => { %><option value="<%= cat.id %>"><%= cat.nombre %></option><% }); %></select></div>
                    <div class="mb-3"><label for="modal-agregar-cliente-telefono" class="form-label">Teléfono</label><input type="tel" class="form-control" id="modal-agregar-cliente-telefono"></div>
                    <div class="mb-3"><label for="modal-agregar-cliente-email" class="form-label">Email</label><input type="email" class="form-control" id="modal-agregar-cliente-email"></div>
                    <div class="mb-3"><label for="modal-agregar-cliente-comentarios" class="form-label">Comentarios</label><textarea class="form-control" id="modal-agregar-cliente-comentarios" rows="3" maxlength="140"></textarea><div class="form-text text-end">0 / 140</div></div>
                </form>
             </div>
            <div class="modal-footer d-flex">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" style="flex: 1;">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btn-guardar-nuevo-cliente" style="flex: 3;">Guardar Cliente</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-editar-cliente" tabindex="-1" aria-labelledby="modalEditarClienteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEditarClienteLabel">Editar Cliente</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                 <form id="form-editar-cliente">
                    <input type="hidden" id="modal-editar-cliente-id">
                    <div class="mb-3"><label for="modal-editar-cliente-nombre" class="form-label">Nombre / Razón Social</label><input type="text" class="form-control" id="modal-editar-cliente-nombre" required placeholder="dato obligatorio"></div>
                    <div class="mb-3"><label for="modal-editar-cliente-cuit" class="form-label">CUIT/DNI</label><input type="text" class="form-control" id="modal-editar-cliente-cuit" required placeholder="dato obligatorio"></div>
                     <div class="mb-3"><label for="modal-editar-cliente-categoria" class="form-label">Categoría sugerida</label><select class="form-select" id="modal-editar-cliente-categoria"><% categorias.forEach(cat => { %><option value="<%= cat.id %>"><%= cat.nombre %></option><% }); %></select></div>
                    <div class="mb-3"><label for="modal-editar-cliente-telefono" class="form-label">Teléfono</label><input type="tel" class="form-control" id="modal-editar-cliente-telefono"></div>
                    <div class="mb-3"><label for="modal-editar-cliente-email" class="form-label">Email</label><input type="email" class="form-control" id="modal-editar-cliente-email"></div>
                    <div class="mb-3"><label for="modal-editar-cliente-comentarios" class="form-label">Comentarios</label><textarea class="form-control" id="modal-editar-cliente-comentarios" rows="3" maxlength="140"></textarea><div id="modal-editar-char-counter" class="form-text text-end">0 / 140</div></div>
                 </form>
            </div>
            <div class="modal-footer d-flex">
                <button type="button" class="btn btn-outline-danger" id="btn-eliminar-cliente-modal" style="flex: 1;">Eliminar</button>
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" style="flex: 1;">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btn-actualizar-cliente" style="flex: 2;">Actualizar</button>
             </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-confirmar-eliminar" tabindex="-1"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Confirmar Eliminación</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body">
    <div class="alert alert-warning"><strong>Atención:</strong> Al eliminar un cliente, se borrarán también <strong>todos sus movimientos asociados</strong>. Esta acción es irreversible.</div>
    <p>Para confirmar, escriba <strong id="palabra-confirmacion" class="text-danger"></strong> abajo.</p><input type="text" class="form-control" id="input-confirmacion"></div>
    <div class="modal-footer"><button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button><button type="button" class="btn btn-danger" id="btn-confirmar-eliminacion-final" disabled>Eliminar</button></div></div></div></div>

<div class="modal fade" id="modal-gestion-categorias-venta" tabindex="-1" aria-labelledby="modalGestionCategoriasVentaLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalGestionCategoriasVentaLabel">Editar Categorías de Ingresos</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted small">Aquí puede editar, eliminar y agregar las categorías.</p>
                <ul class="list-group" id="lista-categorias-gestion-venta" style="max-height: 400px; overflow-y: auto;">
                </ul>
            </div>
            <div class="modal-footer">
                <form id="form-agregar-categoria-venta" class="w-100">
                    <div class="input-group">
                        <input type="text" class="form-control" id="input-nueva-categoria-gestion-venta" placeholder="Nombre de la nueva categoría" required>
                        <button class="btn btn-primary" type="submit">Agregar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-confirmar-restablecer" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Acción</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
             <div class="modal-body">
                <p>¿Está seguro que desea reiniciar el formulario? Se perderán todos los datos ingresados no guardados.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="btn-confirmar-restablecer-final">Sí, Restablecer</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-confirmar-eliminar-movimiento" tabindex="-1"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Confirmar Eliminación</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body"><p>¿Está seguro que desea eliminar este movimiento?</p></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button><button type="button" class="btn btn-danger" id="btn-confirmar-eliminacion-movimiento-final">Sí, Eliminar</button></div></div></div></div>
<div class="modal fade" id="modal-confirmar-ajuste" tabindex="-1"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><h5 class="modal-title text-warning">
    <i class="fa-solid fa-triangle-exclamation me-2"></i>Atención</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body">
        <p>Está por registrar un movimiento que generará <strong>un crédito negativo</strong> en el historial del Cliente.</p>
        </div><div class="modal-footer">
            <button type="button" class="btn btn-outline-secondary" id="btn-volver-ajuste" data-bs-dismiss="modal">Volver</button>
             <button type="button" class="btn btn-warning" id="btn-continuar-ajuste">Continuar</button></div></div></div></div>

<div class="modal fade" id="modal-otra-modalidad" tabindex="-1" aria-labelledby="modalOtraModalidadLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                    <h5 class="modal-title" id="modalOtraModalidadLabel">Especificar Modalidad</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
             </div>
            <div class="modal-body">
                <div class="mb-3">
                        <label for="input-nueva-modalidad" class="form-label">Nombre de la nueva modalidad:</label>
                    <input type="text" class="form-control" id="input-nueva-modalidad">
                 </div>
            </div>
                <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btn-guardar-nueva-modalidad">Guardar</button>
            </div>
        </div>
    </div>
</div>
     
<div class="modal fade" id="modal-gestion-modalidades" tabindex="-1" aria-labelledby="modalGestionModalidadesLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalGestionModalidadesLabel">Editar Modalidades</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted small">Aquí puede editar, eliminar y agregar las modalidades de pago. La modalidad <strong>Efectivo</strong> no se puede modificar.</p>
                <p class="text-muted small mb-3">
                    <i class="fa-solid fa-circle-info me-2"></i>Las modalidades son las mismas y compartidas entre pagos y cobranzas.
                </p>
                <ul class="list-group" id="lista-modalidades-gestion" style="max-height: 400px; overflow-y: auto;">
                    </ul>
            </div>
            <div class="modal-footer">
                <form id="form-agregar-modalidad" class="w-100">
                    <div class="input-group">
                        <input type="text" class="form-control" id="input-nueva-modalidad-gestion" placeholder="Nombre de la nueva modalidad" required>
                        <button class="btn btn-primary" type="submit">Agregar</button>
                    </div>
                </form>
            </div>
            </div>
    </div>
</div>

<div class="modal fade" id="modal-confirmar-gestion" tabindex="-1" aria-hidden="true" style="z-index: 1060;">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
                <div class="modal-header">
                <h5 class="modal-title">Confirmar Eliminación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
             </div>
            <div class="modal-body">
                    <p id="modal-confirmar-gestion-body"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="btn-confirmar-gestion-final">Confirmar</button>
            </div>
            </div>
    </div>
</div>


----- C:\Users\Javier\Desktop\finanzas-app\views\registro.ejs -----
<%- include('layout/_header', { title: title }) %>

<h1 class="mt-4 mb-4 page-title">
        <span class="title-registro badge">
        <i class="fa-solid fa-table-list fa-fw me-4"></i>Registro de Movimientos
        </span>
</h1>

<div class="card">
    <div class="card-body">
      
   <form action="/registro" method="GET" id="registro-filtros-form" class="mb-3">
    <input type="hidden" name="tipo" id="filtro_tipo" value="<%= filtros.tipo || 'todos' %>">
    <input type="hidden" name="pagina" value="1">

    <div class="row g-3 align-items-lg-end">

        <div class="col-12 col-lg-3">
            <div class="btn-group btn-group-toggle-colors w-100" role="group">
                <button type="button" class="btn btn-tertiary btn-todos tipo-btn w-100 <%= !filtros.tipo || filtros.tipo === 'todos' ? 'active' : '' %>" data-tipo="todos">Todos</button>
                <button type="button" class="btn btn-tertiary btn-ingreso tipo-btn w-100 <%= filtros.tipo === 'ingreso' ? 'active' : '' %>" data-tipo="ingreso">Ingresos</button>
                <button type="button" class="btn btn-tertiary btn-egreso tipo-btn w-100 <%= filtros.tipo === 'egreso' ? 'active' : '' %>" data-tipo="egreso">Egresos</button>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg">
            <div class="input-group">
                <input type="text" id="daterange" class="form-control" autocomplete="off" placeholder="Filtrar por fecha">
                <input type="hidden" name="fecha_desde" id="fecha_desde" value="<%= filtros.fecha_desde || '' %>">
                <input type="hidden" name="fecha_hasta" id="fecha_hasta" value="<%= filtros.fecha_hasta || '' %>">
                <button class="btn btn-secondary" type="submit" title="Aplicar filtros"><i class="fa-solid fa-filter"></i></button>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg-4">
            <div class="input-group">
                <input type="text" id="busqueda" name="busqueda" class="form-control" placeholder="Buscar por texto" value="<%= filtros.busqueda || '' %>">
                <button class="btn btn-secondary" type="submit"><i class="fa-solid fa-search"></i></button>
            </div>
        </div>
        <div class="col-12 col-md-12 col-lg-auto">
                <button type="button" id="btn-restablecer-filtros" class="btn btn-link text-nowrap" title="Restablecer filtros" disabled>
                    <i class="fa-solid fa-undo me-1"></i>Restablecer
                </button>
        </div>

    </div>
</form>

      
   <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead class="registro-header">
                    <tr>
                        <th class="text-center">Tipo</th>
                        <th>Fecha</th>
                        <th>Entidad</th>
                        <th>Categoría</th>
                        <th>Modalidad</th>
                        <th></th>
                        <th class="text-end">Importe</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <% if (movimientos.length === 0) { %>
                        <tr>
                            <td colspan="8" class="text-center text-muted py-4">No se encontraron movimientos con los filtros aplicados.</td>
                        </tr>
                    <% } else { %>
                        <% const returnParams = new URLSearchParams(filtros); %>
                        <% movimientos.forEach(mov => { %>
                            <tr id="movimiento-row-<%= mov.id %>">
                                <td class="text-center">
                                     <% if (mov.tipo === 'ingreso') { %>
                                        <i class="fa-solid fa-arrow-up" style="color: var(--ingresos-color);" title="Ingreso"></i>
                                     <% } else { %>
                                        <i class="fa-solid fa-arrow-down" style="color: var(--egresos-color);" title="Egreso"></i>
                                     <% } %>
                                </td>
                                <td class="text-nowrap"><%= new Date(mov.fecha + 'T00:00:00').toLocaleDateString('es-AR', { day: '2-digit', month: '2-digit', year: '2-digit' }) %></td>
                                <td>
                                    <%= mov.entidad_nombre %>
                                </td>
                                <td><%= mov.categoria_nombre %></td>
                                <td><%= mov.modalidad %></td>
                                <td class="text-center">
                                     <% if (mov.descripcion) { %>
                                        <i class="fa-solid fa-comment-dots text-muted" data-bs-toggle="tooltip" data-bs-placement="top" title="<%= mov.descripcion %>"></i>
                                     <% } %>
                                </td>
                                <td class="text-end fw-semibold text-nowrap">
                                     <%- formatMontoConSigno(mov.monto, mov.tipo) %>
                                </td>
                                <td class="text-end text-nowrap">
                                    <% if (isLicensed) { %>
                                        <% const editPath = mov.entidad_tipo === 'cliente' ? '/venta/editar/' : '/pago/editar/'; %>
                                       <a href="<%= editPath %><%= mov.id %>?from=registro&<%= returnParams.toString() %>" class="btn btn-sm btn-icon btn-primary"><i class="fa-solid fa-pencil"></i></a>
                                       <button type="button" class="btn btn-sm btn-icon btn-danger btn-eliminar-movimiento-registro" data-id="<%= mov.id %>" data-bs-toggle="modal" data-bs-target="#modal-confirmar-eliminar-movimiento-registro"><i class="fa-solid fa-trash"></i></button>
                                    <% } else { %>
                                        <span class="text-muted" data-bs-toggle="tooltip" title="Se requiere licencia para editar o eliminar."><i class="fa-solid fa-lock"></i></span>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                     <% } %>
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-center align-items-center mt-3 flex-wrap">
            <% if (totalPaginas > 1) { %>
               <nav>
                    <ul class="pagination pagination-sm mb-0">
                        <% const urlParams = new URLSearchParams(filtros); %>
                        
                        <% if (paginaActual > 1) { %>
                            <% urlParams.set('pagina', 1); %>
                            <li class="page-item">
                                <a class="page-link" href="/registro?<%= urlParams.toString() %>" title="Primera página">
                                    <span class="d-none d-sm-inline">Primero</span>
                                    <span class="d-inline d-sm-none">&laquo;</span>
                                </a>
                            </li>
                            <% urlParams.set('pagina', paginaActual - 1); %>
                            <li class="page-item">
                                <a class="page-link" href="/registro?<%= urlParams.toString() %>" title="Página anterior">
                                    <span class="d-none d-sm-inline">Anterior</span>
                                    <span class="d-inline d-sm-none">&lt;</span>
                                </a>
                            </li>
                        <% } else { %>
                            <li class="page-item disabled"><span class="page-link"><span class="d-none d-sm-inline">Primero</span><span class="d-inline d-sm-none">&laquo;</span></span></li>
                            <li class="page-item disabled"><span class="page-link"><span class="d-none d-sm-inline">Anterior</span><span class="d-inline d-sm-none">&lt;</span></span></li>
                        <% } %>

                        <% 
                        const maxPaginasVisibles = 5;
                        let inicio = Math.max(1, paginaActual - Math.floor(maxPaginasVisibles / 2));
                        let fin = Math.min(totalPaginas, inicio + maxPaginasVisibles - 1);
                        if (fin - inicio + 1 < maxPaginasVisibles) {
                            inicio = Math.max(1, fin - maxPaginasVisibles + 1);
                        }
                        %>
                        <% if (inicio > 1) { %><li class="page-item disabled"><span class="page-link">...</span></li><% } %>
                        <% for (let i = inicio; i <= fin; i++) { %>
                             <% urlParams.set('pagina', i); %>
                            <li class="page-item <%= i === paginaActual ? 'active' : '' %>"><a class="page-link" href="/registro?<%= urlParams.toString() %>"><%= i %></a></li>
                        <% } %>
                        <% if (fin < totalPaginas) { %><li class="page-item disabled"><span class="page-link">...</span></li><% } %>
                        
                        <% if (paginaActual < totalPaginas) { %>
                            <% urlParams.set('pagina', paginaActual + 1); %>
                            <li class="page-item">
                                <a class="page-link" href="/registro?<%= urlParams.toString() %>" title="Página siguiente">
                                    <span class="d-none d-sm-inline">Siguiente</span>
                                    <span class="d-inline d-sm-none">&gt;</span>
                                </a>
                            </li>
                            <% urlParams.set('pagina', totalPaginas); %>
                            <li class="page-item">
                                <a class="page-link" href="/registro?<%= urlParams.toString() %>" title="Última página">
                                    <span class="d-none d-sm-inline">Último</span>
                                    <span class="d-inline d-sm-none">&raquo;</span>
                                </a>
                            </li>
                        <% } else { %>
                             <li class="page-item disabled"><span class="page-link"><span class="d-none d-sm-inline">Siguiente</span><span class="d-inline d-sm-none">&gt;</span></span></li>
                             <li class="page-item disabled"><span class="page-link"><span class="d-none d-sm-inline">Último</span><span class="d-inline d-sm-none">&raquo;</span></span></li>
                        <% } %>
                    </ul>
                </nav>
            <% } %>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-confirmar-eliminar-movimiento-registro" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Eliminación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro que desea eliminar este movimiento? Esta acción es irreversible.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="btn-confirmar-eliminacion-final-registro">Sí, Eliminar</button>
            </div>
        </div>
    </div>
</div>


<% pageScripts = '<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" /><script src="/js/registro.client.js"></script>' %>
<%- include('layout/_footer') %>


----- C:\Users\Javier\Desktop\finanzas-app\views\reportes.ejs -----
<%- include('layout/_header', { title: title }) %>

<link href="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.bootstrap5.min.css" rel="stylesheet">

<h1 class="mt-4 mb-4 page-title">
    <span class="title-reportes badge">
    <i class="fa-solid fa-file-lines fa-fw me-4"></i>Reportes e Informes
    </span>
</h1>

<% if (!isLicensed) { %>
    <div class="alert alert-warning text-center">
        <i class="fa-solid fa-lock me-2"></i> Para generar o exportar reportes, se requiere una licencia activa.
    </div>
<% } %>

<div class="card">
    <div class="card-body">
        <form action="/reportes/generar" method="POST" id="form-reportes">
            <fieldset <%= !isLicensed ? 'disabled' : '' %>>
                <div class="row g-3 mb-4 align-items-end">
                    <div class="col-lg-6">
                        <label for="daterange" class="form-label fw-bold">Período del reporte</label>
                        <div class="input-group">
                            <input type="text" id="daterange" class="form-control" autocomplete="off" placeholder="Seleccione un rango de fechas">
                            <input type="hidden" name="fecha_desde" id="fecha_desde" value="<%= query.fecha_desde || '' %>">
                            <input type="hidden" name="fecha_hasta" id="fecha_hasta" value="<%= query.fecha_hasta || '' %>">
                        </div>
                    </div>
                     <div class="col-lg-6">
                        <label class="form-label fw-bold">Tipos de movimientos a incluir</label>
                        <input 
                        type="hidden" name="tipo" id="tipo" value="<%= query.tipo || 'todos' %>">
                        <div class="btn-group btn-group-toggle-colors btn-group-reportes w-100" role="group">
                            <button type="button" class="btn btn-tertiary btn-todos tipo-btn w-100 <%= (!query.tipo || query.tipo === 'todos') ? 'active' : '' %>" data-value="todos">Todos</button>
                            <button type="button" class="btn btn-tertiary btn-ingreso tipo-btn w-100 <%= query.tipo === 'ingreso' ? 'active' : '' %>" data-value="ingreso">Ingresos</button>
                            <button type="button" class="btn btn-tertiary btn-egreso tipo-btn w-100 <%= query.tipo === 'egreso' ? 'active' : '' %>" data-value="egreso">Egresos</button>
                        </div>
                    </div>
                </div>

                <div class="d-flex align-items-center">
                     <h6 class="mb-2 me-3">Filtros Opcionales</h6>
                     <hr class="flex-grow-1">
                </div>
                <div class="row g-3 mb-4">
                    <div class="col-md-6">
                         <label for="categoria_id" class="form-label">Por Categoría</label>
                        <select name="categoria_id" id="categoria_id" multiple>
                            <% const groupedCategories = categorias.reduce((acc, cat) => { acc[cat.tipo] = [...(acc[cat.tipo] || []), cat]; return acc; }, {}); %>
                             <% if (groupedCategories.cliente) { %>
                                <optgroup label="Ingresos / Clientes">
                                    <% groupedCategories.cliente.forEach(cat => { %>
                                         <option value="<%= cat.id %>" <%= (query.categoria_id && query.categoria_id.includes(String(cat.id))) ? 'selected' : '' %>><%= cat.nombre %></option>
                                    <% }) %>
                                </optgroup>
                            <% } %>
                            <% if (groupedCategories.proveedor) { %>
                                <optgroup label="Egresos / Proveedores">
                                    <% groupedCategories.proveedor.forEach(cat => { %>
                                        <option value="<%= cat.id %>" <%= (query.categoria_id && query.categoria_id.includes(String(cat.id))) ? 'selected' : '' %>><%= cat.nombre %></option>
                                    <% }) %>
                                </optgroup>
                            <% } %>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="modalidad" class="form-label">Por Modalidad</label>
                        <select name="modalidad" id="modalidad" multiple>
                            <% modalidades.forEach(mod => { %>
                                 <option value="<%= mod.modalidad %>" <%= (query.modalidad && query.modalidad.includes(mod.modalidad)) ? 'selected' : '' %>><%= mod.modalidad %></option>
                            <% }) %>
                        </select>
                    </div>
                </div>
                <div class="row g-3 mb-4">
                    <div class="col-md-6">
                        <label for="clientes" class="form-label">Por Clientes</label>
                        <select name="clientes" id="clientes" multiple>
                             <% clientes.forEach(cli => { %>
                                <option value="<%= cli.id %>" <%= (query.clientes && query.clientes.includes(String(cli.id))) ? 'selected' : '' %>><%= cli.nombre %></option>
                            <% }) %>
                        </select>
                     </div>
                    <div class="col-md-6">
                        <label for="proveedores" class="form-label">Por Proveedores</label>
                        <select name="proveedores" id="proveedores" multiple>
                             <% proveedores.forEach(prov => { %>
                                <option value="<%= prov.id %>" <%= (query.proveedores && query.proveedores.includes(String(prov.id))) ? 'selected' : '' %>><%= prov.nombre %></option>
                            <% }) %>
                        </select>
                    </div>
                </div>

                <div id="resumen-options-container">
                    <div class="d-flex align-items-center">
                        <h6 class="me-3">Opciones de Resumen</h6>
                        <hr class="flex-grow-1">
                    </div>
                     <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <label for="resumen_nivel_1" class="form-label">1er Nivel de Esquema</label>
                            <select name="resumen_nivel_1" id="resumen_nivel_1" class="form-select"></select>
                        </div>
                        <div class="col-md-4" id="resumen_nivel_2_container" style="display: none;">
                             <label for="resumen_nivel_2" class="form-label">2do Nivel de Esquema</label>
                            <select name="resumen_nivel_2" id="resumen_nivel_2" class="form-select"></select>
                        </div>
                        <div class="col-md-4" id="resumen_nivel_3_container" style="display: none;">
                            <label for="resumen_nivel_3" class="form-label">3er Nivel de Esquema</label>
                            <select name="resumen_nivel_3" id="resumen_nivel_3" class="form-select"></select>
                        </div>
                     </div>
                </div>

                <div id="opciones-visualizacion-container">
                    <div class="d-flex align-items-center">
                        <h6 class="mt-2 mb-2 me-3">Opciones de Visualización</h6>
                        <hr class="flex-grow-1">
                    </div>
                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="mostrar_comentarios" name="mostrar_comentarios" value="true" <%= query.mostrar_comentarios ? 'checked' : '' %>>
                                <label class="form-check-label" for="mostrar_comentarios">Mostrar comentarios en el reporte</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="invertir_orden" name="invertir_orden" value="true" <%= query.invertir_orden ? 'checked' : '' %>>
                                <label class="form-check-label" for="invertir_orden">Invertir orden (mostrar más antiguos primero)</label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-4 align-items-center">
                    <div class="col">
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg" id="btn-generar-reporte">
                                <i class="fa-solid fa-cogs me-2"></i>Generar Reporte
                            </button>
                        </div>
                    </div>
                    <div class="col-auto">
                        <button type="button" id="btn-restablecer-filtros" class="btn btn-link" disabled>
                            <i class="fa-solid fa-undo me-1"></i>Restablecer
                        </button>
                    </div>
                </div>
            </fieldset>
        </form>
    </div>
</div>

<% if (resultados) { %>
<div class="card mt-4 report-results-card" id="reporte-generado"></div>
    <div class="card-body">
      <div class="report-container">
            <div class="report-header">
                <div style="max-width: 600px;">
                    <h5 class="report-title">Detalles del Informe</h5>
                    <ul class="list-unstyled">
                        <li><strong>Período:</strong> <%= new Date(resultados.periodo.desde + 'T00:00:00').toLocaleDateString('es-AR') %> al <%= new Date(resultados.periodo.hasta + 'T00:00:00').toLocaleDateString('es-AR') %></li>
                        <% if (resultados.tipo !== 'egreso') { %>
                            <li><strong>Total Ingresos:</strong> <%- formatReportBalance(resultados.totalIngresos) %></li>
                        <% } %>
                        <% if (resultados.tipo !== 'ingreso') { %>
                            <li><strong>Total Egresos:</strong> <%- formatReportBalance(-resultados.totalEgresos) %></li>
                        <% } %>
                        <% if (resultados.tipo === 'todos') { %>
                            <li><strong>Resultado del Período:</strong> <%- formatReportBalance(resultados.resultado) %></li>
                        <% } %>
                        <% if (Object.keys(resultados.filtrosAplicados).length > 0) { %>
                            <li>
                                <strong>Filtros Aplicados:</strong>
                                <div class="mt-1">
                                    <% for (const [key, value] of Object.entries(resultados.filtrosAplicados)) { %>
                                        <div class="mb-1">
                                            <span class="badge bg-secondary fw-normal filter-badge">
                                                <strong class="me-1"><%= key.charAt(0).toUpperCase() + key.slice(1) %>:</strong><%= value %>
                                            </span>
                                        </div>
                                    <% } %>
                                </div>
                            </li>
                        <% } %>
                    </ul>
                </div>

                <div class="text-end mt-3">
                    <% if (isLicensed) { %>
                        <div class="btn-group">
                            <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fa-solid fa-download me-2"></i>Exportar
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="#" data-action="pdf-detalle" data-bs-toggle="modal" data-bs-target="#modal-confirmar-accion"><i class="fa-solid fa-file-pdf me-2"></i>Exportar a PDF</a></li>
                                <li><a class="dropdown-item" href="#" data-action="excel-detalle" data-bs-toggle="modal" data-bs-target="#modal-confirmar-accion"><i class="fa-solid fa-file-excel me-2"></i>Exportar a Excel</a></li>
                            </ul>
                        </div>
                    <% } %>
                </div>
            </div>

            <% if (resultadosResumen) { %>
                <%
                    const isSingleType = query.tipo === 'ingreso' || query.tipo === 'egreso';
                    const isAllTypes = query.tipo === 'todos';
                    const summaryLevels = [query.resumen_nivel_1, query.resumen_nivel_2, query.resumen_nivel_3].filter(Boolean);
                    const levelCount = summaryLevels.length;
                    let summaryTableClass = 'summary-table';
                    if (isSingleType) {
                        summaryTableClass += ' summary-table-single';
                    } else if (isAllTypes) {
                        summaryTableClass += ' summary-table-all';
                    }
                    if (levelCount === 1) summaryTableClass += ' has-one-level';
                    if (levelCount === 2) summaryTableClass += ' has-two-levels';
                    if (levelCount === 3) summaryTableClass += ' has-three-levels';
                %>
                <div class="table-responsive mt-4">
                    <table class="table table-sm report-table <%= summaryTableClass %>" style="table-layout: fixed;">
                        <colgroup>
                            <% if (isAllTypes) { %>
                                <col class="concept-col"><col class="amount-col-narrow"><col class="amount-col-narrow"><col class="amount-col-narrow">
                            <% } else { %>
                                <col class="concept-col"><col class="amount-col-wide">
                            <% } %>
                        </colgroup>
                        <thead>
                            <tr>
                                <th>Concepto</th>
                                <% if (isAllTypes) { %>
                                    <th class="text-end">Ingresos</th>
                                    <th class="text-end">Egresos</th>
                                    <th class="text-end">Resultado</th>
                                <% } else { %>
                                    <th class="text-end">Importe</th>
                                <% } %>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (resultadosResumen.length === 0) { %>
                                <tr>
                                    <td colspan="<%= isAllTypes ? 4 : 2 %>" class="text-center text-muted py-4">No se encontraron movimientos para resumir.</td>
                                </tr>
                            <% } else { %>
                                <%- include('partials/_reporte_resumen_fila', { items: resultadosResumen, nivel: 1, tipo: query.tipo, formatReportCurrencySimple: formatReportCurrencySimple, formatReportBalancePlain: formatReportBalancePlain }) %>
                            <% } %>
                        </tbody>
                        <tfoot>
                            <tr class="level-1">
                                <td class="fw-bold">Total del Período:</td>
                                <% if (isAllTypes) { %>
                                    <td class="text-end fw-bold text-nowrap amount-cell"><%- formatReportBalancePlain(resultados.totalIngresos) %></td>
                                    <td class="text-end fw-bold text-nowrap amount-cell"><%- formatReportBalancePlain(-resultados.totalEgresos) %></td>
                                    <td class="text-end fw-bold text-nowrap amount-cell"><%- formatReportBalancePlain(resultados.resultado) %></td>
                                <% } else { %>
                                    <td class="text-end fw-bold text-nowrap amount-cell"><%- formatSummaryCurrency(query.tipo === 'ingreso' ? resultados.totalIngresos : -resultados.totalEgresos) %></td>
                                <% } %>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            <% } else { %>
                <div class="table-responsive mt-4">
                    <table class="table table-sm report-table report-table-detailed">
                        <thead>
                            <tr>
                                <th>Fecha</th><th>Entidad</th><th>Categoría</th><th>Modalidad</th><th class="text-end">Importe</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (resultados.movimientos.length === 0) { %>
                                 <tr><td colspan="5" class="text-center text-muted py-4">No se encontraron movimientos.</td></tr>
                            <% } else { %>
                                <% resultados.movimientos.forEach(mov => { %>
                                    <tr>
                                        <td><%= new Date(mov.fecha + 'T00:00:00').toLocaleDateString('es-AR', { day: '2-digit', month: '2-digit', year: '2-digit' }) %></td>
                                        <td><%= mov.entidad_nombre %></td>
                                        <td><%= mov.categoria_nombre %></td>
                                        <td><%= mov.modalidad %></td>
                                        <td class="text-end text-nowrap"><%- formatReportCurrency(mov.monto, mov.tipo) %></td>
                                    </tr>
                                    <% if (query.mostrar_comentarios && mov.descripcion) { %>
                                    <tr class="comment-row">
                                        <td colspan="5" class="text-muted fst-italic pt-0 pb-2 ps-3">↳ <%= mov.descripcion %></td>
                                    </tr>
                                    <% } %>
                                <% }) %>
                            <% } %>
                        </tbody>
                        <tfoot>
                           <tr>
                                <td colspan="4" class="text-end fw-bold">Total del Período:</td>
                                <td class="text-end fw-bold text-nowrap"><%- formatReportBalance(resultados.resultado) %></td>
                           </tr>
                         </tfoot>
                    </table>
                </div>
            <% } %>
        </div>
    </div>
</div>
<% } %>


<button id="btn-volver-arriba-reporte" class="btn btn-scroll-top d-none">
    <i class="fa-solid fa-angles-up"></i>
</button>

<div class="modal fade" id="modal-confirmar-accion" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmar-accion-label">Confirmar Acción</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="confirmar-accion-body">¿Está seguro que desea continuar?</p>
             </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btn-confirmar-accion-final">Confirmar</button>
            </div>
        </div>
    </div>
</div>

<% pageScripts = `
<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script>
<script src="/js/reportes.client.js"></script>
` %>
<%- include('layout/_footer') %>


----- C:\Users\Javier\Desktop\finanzas-app\views\venta.ejs -----
<%- include('layout/_header', { title: title }) %>

<h1 class="mt-4 mb-4 page-title">
    <span class="title-ingresos badge">
        <i class="fa-solid fa-circle-up me-4"></i>Ingresos · Ventas · Cobranzas
    </span>
</h1>

<% if (!isLicensed) { %>
    <div class="alert alert-warning text-center">
        <i class="fa-solid fa-lock me-2"></i> Para cargar o modificar ingresos, se requiere una licencia activa.
    </div>
<% } %>

<div class="form-historial-container">
    
    <div class="form-container-flex">
        <div class="card">
            <div class="card-body">
                <form id="form-cargar-venta" action="<%= movimiento ? '/venta/editar/' + movimiento.id : '/venta' %>" method="POST">
                    <fieldset <%= !isLicensed ? 'disabled' : '' %>>
                        <% if (locals.returnToReport) { %>
                        <input type="hidden" name="returnToReport" value="true">
                        <input type="hidden" name="returnQuery" value="<%= returnQuery %>">
                         <% } %>
                        <% if (locals.returnToRegistro) { %>
                        <input type="hidden" name="returnToRegistro" value="true">
                        <input type="hidden" name="returnQuery" value="<%= returnQuery %>">
                        <% } %>
                    
                        <div class="mb-3">
                             <label for="cliente-search" class="form-label">Cliente</label>
                            <div class="position-relative">
                                <div class="input-group">
                                     <div class="position-relative flex-grow-1">
                                        <input type="text" class="form-control" id="cliente-search" placeholder="Buscar cliente o ingresar * para ver todos" autocomplete="off" value="<%= clienteSeleccionado ? `${clienteSeleccionado.nombre} (${clienteSeleccionado.id})` : '' %>" <%= clienteSeleccionado ? 'disabled' : '' %>>
                                        <button class="btn btn-sm btn-icon position-absolute top-50 end-0 translate-middle-y <%= clienteSeleccionado ? '' : 'd-none' %>" type="button" id="btn-clear-cliente-selection" title="Limpiar selección" data-bs-toggle="tooltip" style="z-index: 5;">
                                            <i class="fa-solid fa-times"></i>
                                        </button>
                                     </div>
                                </div>
                                <div class="list-group position-absolute w-100" id="search-results" style="z-index: 1050;"></div>
                            </div>
                         </div>
            
                        <input type="hidden" id="cliente_id" name="cliente_id" value="<%= clienteSeleccionado ? clienteSeleccionado.id : '' %>">
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="fecha" class="form-label">Fecha</label>
                                 <input type="date" class="form-control" id="fecha" name="fecha" value="<%= movimiento ? movimiento.fecha : getTodayForInput() %>" required>
                            </div>
                            <div class="col-md-8">
                                <label for="importe" class="form-label">Importe</label>
                                 <div class="d-flex align-items-center gap-3">
                                    <div class="input-group">
                                        <span class="input-group-text" id="importe-signo">$</span>
                                        <%# --- INICIO CORRECCIÓN --- %>
                                        <input type="number" class="form-control" id="importe" name="importe" placeholder="0.00" value="<%= movimiento ? Math.abs(movimiento.monto) : '' %>" required step="0.01">
                                        <%# --- FIN CORRECCIÓN --- %>
                                    </div>
                                    <div class="d-flex align-items-center">
                                         <div class="form-check form-switch">
                                            <%# --- INICIO CORRECCIÓN --- %>
                                            <input class="form-check-input" type="checkbox" role="switch" value="true" id="es_ajuste_venta" name="es_ajuste" <%= (movimiento && movimiento.monto < 0) ? 'checked' : '' %>>
                                            <%# --- FIN CORRECCIÓN --- %>
                                             <label class="form-check-label label-ajuste text-nowrap" for="es_ajuste_venta">Crédito</label>
                                        </div>
                                        <i class="fa-solid fa-circle-info info-icon ms-2" data-bs-toggle="tooltip" data-bs-placement="top" 
                                            title="Útil para registrar notas de crédito, ajustes, descuentos o reembolsos de clientes.">
                                        </i>
                                    </div>
                                 </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label" for="modalidad-select">Modalidad</label>
                            <select class="form-select" name="modalidad" id="modalidad-select">
                                 <% 
                                let selectedModalidad = movimiento ? movimiento.modalidad : (modalidades.length > 0 ? modalidades[0].nombre : '');
                                modalidades.forEach(m => { %>
                                    <option value="<%= m.nombre %>" <%= selectedModalidad === m.nombre ? 'selected' : '' %>><%= m.nombre %></option>
                                 <% }); %>
                            <% if (movimiento && !modalidades.some(m => m.nombre === movimiento.modalidad)) { %>
                                <option value="<%= movimiento.modalidad %>" selected class="custom-modalidad"><%= movimiento.modalidad %></option>
                                 <% } %>
                            <option value="Otra...">Otra...</option>
                            </select>
                        </div>
                    
                        <div class="mb-3">
                            <label for="categoria_id" class="form-label">Categoría</label>
                            <select class="form-select" name="categoria_id" id="categoria_id">
                            <% categorias.forEach(cat => { %>
                                    <option value="<%= cat.id %>" data-editable="<%= cat.es_editable %>" 
                                    <%= (movimiento && movimiento.categoria_id == cat.id) || (!movimiento && cat.es_editable == 0) ? 'selected' : '' %>>
                                    <%= cat.nombre %>
                                </option>
                                 <% }); %>
                            </select>
                         </div>
                        
                        <div class="mb-3">
                             <label for="comentarios" class="form-label">Comentario (opcional)</label>
                            <div class="position-relative">
                                <textarea class="form-control" id="comentarios" name="comentarios" rows="1" maxlength="140"><%= movimiento ? (movimiento.descripcion || '') : '' %></textarea>
                                <button type="button" class="btn btn-sm btn-icon position-absolute top-50 end-0 translate-middle-y " id="btn-clear-comentario" title="Limpiar comentario" data-bs-toggle="tooltip">
                                <i class="fa-solid fa-times"></i>
                                 </button>
                            </div>
                            <div id="char-counter" class="form-text text-end d-none">0 / 140</div>
                        </div>
                        
                        <div class="d-grid gap-2 mt-4">
                            <span id="btn-confirmar-wrapper" class="d-grid" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Faltan datos obligatorios por completar">
                                 <button type="submit" class="btn btn-primary" id="btn-confirmar-movimiento">
                                    <i class="fa-solid fa-check me-2"></i>
                                    <%= movimiento ? 'Actualizar Movimiento' : 'Confirmar Movimiento' %>
                                </button>
                            </span>
                        </div>
                    </fieldset>

                    <div class="d-flex justify-content-between align-items-center mt-2">
                        <div>
                            <% if (!movimiento) { %>
                                <button type="button" class="btn btn-link" id="btn-restablecer-formulario" data-bs-toggle="modal" data-bs-target="#modal-confirmar-restablecer" <%= !isLicensed ? 'disabled' : '' %>>
                                    <i class="fa-solid fa-undo me-1"></i>Restablecer
                                </button>
                            <% } %>
                        </div>

                        <% if (!movimiento && isLicensed) { %>
                        <div class="dropup">
                            <button class="btn btn-tertiary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fa-solid fa-sliders me-2"></i>Gestionar
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                                <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modal-gestionar-clientes"><i class="fa-solid fa-users fa-fw me-2 mb-2"></i>Clientes</a></li>
                                <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modal-gestion-categorias-venta"><i class="fa-solid fa-tags fa-fw me-2 mb-2"></i>Categorías</a></li>
                                <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modal-gestion-modalidades"><i class="fa-solid fa-wallet fa-fw me-2 mb-2"></i>Modalidades</a></li>
                            </ul>
                        </div>
                        <% } %>
                    </div>

                    <% if (locals.returnToRegistro || locals.returnToReport) { %>
                        <div class="d-grid mt-2">
                            <a href="<%= locals.returnToRegistro ? '/registro?' + returnQuery : '/reportes/generar?' + returnQuery %>" class="btn btn-outline-secondary">Cancelar y Volver</a>
                        </div>
                    <% } %>
                </form>
            </div>
        </div>
    </div>
    
    <div class="historial-container-flex">
         <div id="historial-cliente-container">
            <% if (clienteSeleccionado) { %>
                <%- include('partials/_historial_reciente_ingresos', { movimientos: [], clienteSeleccionado: clienteSeleccionado }) %>
            <% } %>
        </div>
    </div>
</div>

<!-- Modals remain the same -->
<%- include('partials/_venta_modals') %>

<% pageScripts = '<script src="/js/venta.client.js"></script>' %>
<%- include('layout/_footer') %>

